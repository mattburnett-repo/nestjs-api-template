var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.717,1,1.741]],["body/injectables/AccessTokenGuard.html",[0,1.194,1,2.901,2,1.847,3,0.448,4,0.448,5,0.394,6,3.737,7,0.546,8,0.03,9,0.982,10,3.737,11,2.62,12,1.847,13,1.847,14,1.847,15,1.705,16,1.847,17,0.448,18,0.02,19,2.384,20,3.737,21,0.025,22,0.025]],["title/injectables/AccessTokenStrategy.html",[0,0.717,23,1.914]],["body/injectables/AccessTokenStrategy.html",[0,1.013,2,1.426,3,0.346,4,0.346,5,0.304,7,0.556,8,0.03,9,0.758,11,2.024,17,0.346,18,0.016,19,1.841,21,0.021,22,0.021,23,2.704,24,2.518,25,0.533,26,1.504,27,3.856,28,1.841,29,2.886,30,3.484,31,1.013,32,3.445,33,1.759,34,1.287,35,0.962,36,1.626,37,4.602,38,4.829,39,3.445,40,3.856,41,1.126,42,1.841,43,2.886,44,2.886,45,2.886,46,2.518,47,2.46,48,2.886,49,1.392,50,1.548,51,3.445,52,1.841,53,2.024,54,2.886,55,2.886,56,2.886,57,2.886,58,3.445,59,1.317]],["title/controllers/AppController.html",[60,1.349,61,2.122]],["body/controllers/AppController.html",[3,0.309,4,0.309,5,0.271,7,0.576,8,0.031,9,0.936,12,1.27,13,1.27,14,1.27,15,1.173,16,1.27,17,0.309,18,0.014,21,0.019,22,0.019,25,0.475,26,1.39,31,0.675,41,1.003,49,1.286,52,2.609,53,3.097,59,1.866,60,2.021,61,2.77,62,1.27,63,2.571,64,4.417,65,1.173,66,3.069,67,1.998,68,2.243,69,1.998,70,1.998,71,1.501,72,3.139,73,2.571,74,2.388,75,3.069,76,3.069,77,3.069,78,3.069,79,3.069,80,1.998,81,2.243,82,2.571,83,3.069,84,2.571,85,3.069,86,2.243,87,3.069,88,3.069,89,2.571,90,3.069,91,3.069,92,3.069,93,2.571,94,3.069]],["title/modules/AppModule.html",[95,1.464,96,2.122]],["body/modules/AppModule.html",[3,0.293,4,0.293,5,0.257,7,0.604,8,0.03,9,0.641,12,1.206,13,1.206,14,1.206,15,1.114,16,1.206,17,0.293,18,0.013,21,0.019,22,0.019,30,2.79,42,1.558,61,3.092,62,1.699,72,3.012,73,2.442,95,1.843,96,4.108,97,1.309,98,2.006,99,2.442,100,2.442,101,2.442,102,3.311,103,3.311,104,3.212,105,2.41,106,1.712,107,1.712,108,2.13,109,2.672,110,2.672,111,2.914,112,2.13,113,1.558,114,2.914,115,2.914,116,2.442,117,2.914,118,4.103,119,2.914,120,1.309,121,3.471,122,2.442,123,2.914,124,2.914,125,1.712,126,2.914,127,2.442,128,2.914,129,2.914,130,2.442,131,2.914,132,2.914,133,2.914]],["title/injectables/AppService.html",[0,0.717,72,1.741]],["body/injectables/AppService.html",[0,1.044,2,1.494,3,0.363,4,0.363,5,0.319,7,0.477,8,0.03,9,0.794,17,0.363,18,0.016,21,0.022,22,0.022,25,0.558,26,1.551,28,2.835,30,3.116,31,1.24,35,0.881,41,1.18,42,1.929,49,1.435,59,1.38,64,4.72,65,1.38,72,2.537,130,3.024,134,3.024,135,1.814,136,3.877,137,5.303,138,4.477,139,4.746,140,3.609,141,4.746,142,3.609,143,2.638,144,1.494,145,3.609,146,3.609,147,3.609,148,3.609]],["title/controllers/AuthController.html",[60,1.349,149,2.122]],["body/controllers/AuthController.html",[1,1.35,3,0.254,4,0.254,5,0.223,7,0.572,8,0.031,9,0.556,12,1.045,13,1.045,14,1.045,15,0.965,16,1.045,17,0.254,18,0.012,21,0.017,22,0.017,25,0.391,26,1.21,31,1.062,33,1.844,34,1.35,35,0.896,36,1.705,41,1.577,47,1.35,52,1.35,59,1.675,60,1.045,62,1.045,65,1.844,67,1.644,68,4.055,69,1.644,70,1.644,71,1.235,74,2.143,81,1.846,84,3.101,86,3.755,120,1.663,149,2.41,150,2.116,151,1.846,152,3.101,153,3.101,154,3.101,155,3.101,156,2.116,157,2.835,158,2.525,159,2.706,160,2.525,161,2.525,162,2.525,163,2.525,164,2.525,165,2.525,166,2.525,167,2.116,168,2.412,169,3.701,170,2.525,171,1.846,172,1.846,173,1.846,174,1.644,175,2.525,176,2.116,177,1.484,178,2.116,179,2.116,180,1.846,181,1.484,182,1.484,183,1.846,184,2.525,185,2.525,186,2.525,187,2.525,188,2.525,189,2.525,190,2.525,191,2.525,192,2.525,193,2.525,194,2.525,195,2.116,196,2.525,197,2.175,198,2.525,199,2.525,200,1.846,201,2.525,202,2.525,203,2.525]],["title/classes/AuthDto.html",[18,0.015,157,1.914]],["body/classes/AuthDto.html",[3,0.413,4,0.413,5,0.363,7,0.413,8,0.03,17,0.413,18,0.024,21,0.024,22,0.024,25,0.635,31,1.135,35,0.958,49,1.788,50,2.533,65,1.971,135,1.971,157,3.03,204,1.845,205,3.441,206,3.312,207,4.321,208,4.106,209,4.106,210,3.671,211,3.671,212,2.195]],["title/modules/AuthModule.html",[95,1.464,102,1.914]],["body/modules/AuthModule.html",[3,0.316,4,0.316,5,0.278,7,0.595,8,0.03,9,0.693,12,1.303,13,1.303,14,1.303,15,1.203,16,1.303,17,0.316,18,0.014,21,0.02,22,0.02,23,3.392,47,2.314,62,1.792,74,2.823,95,1.945,97,1.414,98,2.117,102,3.701,104,3.086,105,2.543,106,1.849,107,1.849,109,2.819,110,2.819,116,2.637,149,3.222,178,2.637,180,3.164,181,2.543,182,2.543,183,3.164,213,2.637,214,3.147,215,2.637,216,3.392,217,3.147,218,3.147,219,2.301,220,3.147,221,3.147,222,3.147,223,2.637,224,4.329,225,2.301]],["title/injectables/AuthService.html",[0,0.717,74,1.593]],["body/injectables/AuthService.html",[0,0.564,2,0.651,3,0.158,4,0.158,5,0.139,7,0.469,8,0.03,9,0.346,17,0.158,18,0.007,21,0.012,22,0.012,25,0.243,26,0.838,28,1.37,30,2.738,31,1.069,33,1.858,34,1.36,35,0.902,36,1.717,41,1.524,42,0.84,47,0.84,48,2.147,49,1.835,50,1.852,59,1.689,74,1.254,80,2.113,120,2.377,144,1.706,152,2.147,153,2.147,154,2.147,155,2.147,156,2.147,157,2.199,159,1.874,167,2.147,168,1.852,176,1.317,177,0.924,179,1.317,180,1.149,181,0.924,182,0.924,183,1.149,195,3.703,197,3.108,206,0.924,219,1.149,226,1.317,227,3.114,228,2.563,229,2.563,230,2.563,231,1.572,232,2.162,233,4.661,234,1.572,235,2.563,236,1.572,237,2.736,238,2.563,239,1.572,240,1.572,241,2.563,242,1.572,243,2.563,244,1.572,245,1.572,246,1.669,247,2.563,248,1.572,249,1.572,250,1.572,251,1.572,252,1.874,253,2.563,254,2.279,255,3.245,256,2.563,257,3.018,258,1.572,259,1.572,260,4.121,261,2.563,262,1.572,263,1.317,264,0.769,265,1.317,266,1.317,267,4.42,268,1.572,269,1.572,270,1.572,271,3.245,272,1.572,273,1.572,274,2.563,275,1.572,276,1.572,277,1.572,278,1.572,279,2.563,280,2.563,281,2.563,282,2.563,283,1.572,284,1.572,285,2.563,286,1.572,287,2.563,288,1.572,289,2.563,290,2.563,291,1.572,292,2.563,293,1.572,294,1.572,295,1.572,296,1.572,297,2.563,298,2.563,299,2.563,300,2.563,301,1.572]],["title/classes/CreateExampleDto.html",[18,0.015,302,1.741]],["body/classes/CreateExampleDto.html",[3,0.303,4,0.303,5,0.266,7,0.303,8,0.03,17,0.303,18,0.019,21,0.019,22,0.019,25,0.466,31,1.286,34,1.352,35,1.085,36,2.209,49,1.803,65,2.234,135,1.605,204,1.353,210,2.735,211,3.806,212,1.61,302,2.244,303,4.994,304,2.202,305,3.148,306,2.172,307,4.05,308,4.834,309,4.05,310,4.05,311,3.012,312,2.524,313,3.012,314,4.381,315,5.499,316,3.012,317,3.012,318,3.012,319,3.518,320,4.834,321,3.012,322,3.012,323,2.735]],["title/classes/CreateUserDto.html",[18,0.015,168,1.464]],["body/classes/CreateUserDto.html",[3,0.327,4,0.327,5,0.287,7,0.327,8,0.03,17,0.327,18,0.02,21,0.02,22,0.02,25,0.503,31,1.283,34,1.408,35,1.083,49,1.915,50,2.261,65,2.229,135,1.692,168,1.989,197,2.956,204,1.461,206,2.956,207,4.216,210,3.68,211,3.797,212,1.738,306,2.261,312,2.724,323,2.882,324,4.998,325,2.377,326,4.216,327,5.032,328,3.251,329,3.251,330,3.251,331,3.251,332,3.251,333,3.251]],["title/entities/Example.html",[264,1.593,334,1.464]],["body/entities/Example.html",[3,0.309,4,0.309,5,0.271,7,0.428,8,0.03,17,0.309,18,0.019,21,0.019,22,0.019,25,0.475,31,1.293,35,1.091,49,1.733,65,2.245,125,3.097,135,1.626,212,1.64,264,2.08,305,3.179,306,2.194,307,4.09,309,4.09,310,4.09,314,3.564,319,3.564,323,2.77,334,1.911,335,1.64,336,2.571,337,4.09,338,4.09,339,4.417,340,4.09,341,3.069,342,4.921,343,3.069,344,3.069,345,3.069,346,3.069,347,3.069,348,3.069,349,2.571,350,3.069,351,4.09,352,3.069,353,2.571,354,1.501,355,2.571,356,2.571,357,1.998]],["title/controllers/ExampleController.html",[60,1.349,358,2.122]],["body/controllers/ExampleController.html",[1,1.238,3,0.233,4,0.233,5,0.205,7,0.523,8,0.03,9,0.51,12,0.959,13,0.959,14,0.959,15,0.886,16,0.959,17,0.233,18,0.011,21,0.016,22,0.016,25,0.358,26,1.135,31,1.145,33,1.768,34,1.294,35,0.859,36,1.635,41,1.701,49,1.775,52,1.238,53,1.361,59,1.989,60,0.959,62,0.959,65,1.989,67,2.713,69,1.509,70,1.509,71,1.133,89,1.941,144,1.915,151,1.694,171,2.539,173,1.694,200,1.694,302,2.781,305,1.509,306,2.338,334,1.56,358,2.261,359,1.941,360,1.56,361,3.013,362,2.91,363,3.876,364,2.261,365,2.226,366,1.941,367,2.317,368,2.317,369,1.941,370,2.91,371,2.317,372,2.317,373,2.317,374,1.509,375,2.91,376,2.317,377,1.509,378,4.627,379,2.718,380,2.91,381,2.317,382,1.941,383,1.941,384,1.941,385,3.876,386,2.226,387,1.941,388,1.509,389,2.539,390,1.509,391,2.317,392,2.317,393,2.317,394,2.91,395,2.317,396,2.317,397,1.941,398,2.317,399,2.317,400,2.317,401,2.317,402,2.317,403,2.317,404,1.941,405,2.317,406,1.941,407,2.317]],["title/modules/ExampleModule.html",[95,1.464,103,1.914]],["body/modules/ExampleModule.html",[3,0.39,4,0.39,5,0.343,7,0.602,8,0.03,9,0.854,17,0.39,18,0.018,21,0.023,22,0.023,62,2.059,95,2.235,97,1.743,98,2.433,103,3.6,105,2.923,106,2.279,107,2.279,109,3.239,110,2.527,112,2.836,113,2.074,334,1.743,358,3.576,386,3.275,387,3.251,408,3.251,409,3.251,410,3.88,411,3.88,412,3.251,413,3.88]],["title/classes/ExampleSeeder.html",[18,0.015,414,2.382]],["body/classes/ExampleSeeder.html",[3,0.354,4,0.354,5,0.311,7,0.527,8,0.03,17,0.354,18,0.016,21,0.021,22,0.021,25,0.544,26,1.526,31,0.774,33,1.345,34,0.984,35,0.653,36,1.243,41,1.15,120,2.097,136,3.829,204,1.581,227,2.799,246,3.04,257,2.495,334,1.581,335,1.881,354,2.283,357,2.292,414,3.412,415,2.948,416,3.911,417,4.388,418,3.829,419,2.948,420,4.998,421,4.388,422,4.673,423,3.519,424,2.292,425,3.519,426,3.519,427,3.519,428,3.911,429,3.519,430,2.948,431,2.948,432,2.948,433,2.292,434,3.519]],["title/injectables/ExampleService.html",[0,0.717,386,1.741]],["body/injectables/ExampleService.html",[0,0.741,2,0.92,3,0.223,4,0.223,5,0.196,7,0.515,8,0.03,9,0.489,17,0.223,18,0.01,21,0.015,22,0.015,25,0.344,26,1.1,28,1.799,31,1.206,33,1.861,34,1.362,35,0.951,36,1.72,41,1.674,49,1.757,59,1.958,80,1.447,93,1.862,113,1.188,120,1.825,135,1.286,138,3.889,143,1.625,144,1.393,181,1.306,227,2.738,237,2.46,257,1.799,302,2.602,306,2.187,334,2.187,354,1.087,360,1.512,361,2.951,362,2.82,363,3.796,364,2.192,365,1.799,366,2.82,369,2.82,374,2.192,377,2.192,379,3.126,386,2.171,388,1.447,389,2.46,390,1.447,412,1.862,435,1.862,436,2.223,437,3.312,438,3.366,439,3.366,440,2.223,441,2.223,442,2.223,443,2.223,444,2.223,445,2.223,446,1.862,447,2.223,448,2.223,449,2.223,450,2.223,451,2.223,452,2.223,453,2.223,454,1.862,455,2.223,456,2.223,457,2.223,458,2.223,459,3.366,460,2.223,461,2.223,462,2.223,463,2.223,464,2.223,465,2.223,466,2.223,467,2.223,468,2.82,469,1.862,470,2.223,471,1.862,472,1.862,473,2.223]],["title/injectables/RefreshTokenGuard.html",[0,0.717,174,2.122]],["body/injectables/RefreshTokenGuard.html",[0,1.191,2,1.838,3,0.446,4,0.446,5,0.392,7,0.544,8,0.03,9,0.977,10,3.72,11,2.609,12,1.838,13,1.838,14,1.838,15,1.697,16,1.838,17,0.446,18,0.02,19,2.373,20,3.72,21,0.025,22,0.025,174,3.525,182,2.609,474,3.72]],["title/injectables/RefreshTokenStrategy.html",[0,0.717,216,1.914]],["body/injectables/RefreshTokenStrategy.html",[0,0.987,2,1.373,3,0.333,4,0.333,5,0.293,7,0.572,8,0.03,9,0.73,11,1.949,17,0.333,18,0.015,19,1.773,21,0.02,22,0.02,25,0.513,26,1.467,27,3.759,28,1.773,29,2.779,30,3.446,31,0.987,33,1.715,34,1.255,35,0.833,36,1.585,40,4.563,41,1.084,42,1.773,43,3.759,44,2.779,45,3.759,46,2.425,47,2.398,52,1.773,53,1.949,54,2.779,55,2.779,56,2.779,57,2.779,59,1.268,68,3.982,86,2.425,120,1.49,125,1.949,172,2.425,182,1.949,197,2.636,216,2.636,475,2.779,476,3.317,477,4.487,478,3.317,479,3.317,480,3.317,481,3.317,482,3.317]],["title/classes/UpdateExampleDto.html",[18,0.015,379,1.914]],["body/classes/UpdateExampleDto.html",[3,0.461,4,0.461,5,0.405,7,0.555,8,0.03,17,0.461,18,0.021,19,2.451,21,0.025,22,0.025,71,2.242,204,2.06,302,2.451,304,3.352,360,2.06,379,3.242,389,3.352,483,3.841,484,3.841,485,4.585]],["title/classes/UpdateUserDto.html",[18,0.015,486,1.914]],["body/classes/UpdateUserDto.html",[3,0.461,4,0.461,5,0.405,7,0.555,8,0.03,17,0.461,18,0.021,19,2.451,21,0.025,22,0.025,71,2.242,168,2.06,177,2.694,204,2.06,325,3.352,360,2.06,484,3.841,486,3.242,487,3.841,488,4.585]],["title/entities/User.html",[254,1.593,264,1.593]],["body/entities/User.html",[3,0.241,4,0.241,5,0.212,7,0.427,8,0.03,15,0.916,17,0.241,18,0.016,21,0.016,22,0.016,25,0.371,31,1.233,34,1.189,35,1.041,49,1.81,50,1.909,65,2.142,125,3.205,135,1.361,197,2.497,206,2.764,210,3.274,211,3.274,212,1.281,223,2.007,227,1.281,252,1.751,254,1.741,257,1.281,263,2.983,264,1.741,306,1.909,323,2.319,326,3.56,335,1.281,337,3.56,338,3.56,339,3.941,340,3.56,342,4.414,349,3.56,351,3.56,353,2.007,354,1.172,355,2.007,356,4.57,360,1.076,365,1.281,418,1.751,424,1.56,489,2.007,490,2.396,491,3.561,492,2.396,493,2.396,494,2.396,495,2.396,496,4.249,497,2.396,498,2.396,499,2.396,500,2.396,501,2.396,502,3.561,503,3.561,504,2.396,505,2.396,506,2.396,507,1.751,508,2.396,509,2.396,510,2.007,511,2.396,512,2.396,513,2.396,514,2.396,515,2.396,516,2.396,517,2.396,518,2.396,519,2.396,520,2.396,521,3.56,522,3.561]],["title/classes/UserSeeder.html",[18,0.015,523,2.382]],["body/classes/UserSeeder.html",[3,0.322,4,0.322,5,0.282,7,0.502,8,0.03,17,0.322,18,0.015,21,0.02,22,0.02,25,0.495,26,1.431,31,0.704,33,1.223,34,0.895,35,0.594,36,1.13,41,1.045,120,2.411,136,3.647,144,1.324,204,1.437,227,2.667,246,2.85,254,2.44,257,2.667,335,1.709,354,2.14,357,2.083,360,1.437,416,3.667,417,4.18,418,3.647,419,2.68,420,4.861,421,4.18,422,4.495,424,2.083,428,3.667,430,2.68,431,2.68,432,2.68,433,2.083,437,2.338,523,3.199,524,2.68,525,3.198,526,3.198,527,3.198,528,3.198,529,3.198,530,3.198,531,4.377,532,3.198,533,3.198,534,3.198,535,3.198,536,4.377,537,3.198,538,3.198,539,3.198,540,3.198,541,3.198]],["title/controllers/UsersController.html",[60,1.349,542,2.122]],["body/controllers/UsersController.html",[1,1.241,3,0.233,4,0.233,5,0.205,7,0.524,8,0.03,9,0.511,12,0.961,13,0.961,14,0.961,15,0.888,16,0.961,17,0.233,18,0.011,21,0.016,22,0.016,25,0.359,26,1.137,31,1.146,33,1.896,34,1.388,35,0.921,36,1.753,41,1.702,49,1.799,50,1.563,52,1.241,53,1.364,59,1.991,60,0.961,62,0.961,65,1.991,67,2.265,69,1.512,70,1.512,71,1.136,144,1.727,151,1.698,168,2.34,171,2.543,173,1.698,177,2.044,200,2.543,232,2.04,266,1.946,306,2.34,360,1.563,361,3.017,364,2.265,365,2.229,370,2.915,374,1.512,375,1.946,377,1.512,380,1.946,382,1.946,383,1.946,384,1.946,385,3.881,388,1.512,390,1.512,394,2.915,397,1.946,404,1.946,406,1.946,486,3.262,542,2.265,543,1.946,544,2.322,545,2.915,546,2.915,547,1.946,548,2.322,549,2.322,550,2.322,551,1.946,552,2.322,553,1.946,554,3.479,555,2.322,556,2.322,557,2.322,558,2.322,559,2.322,560,1.946,561,2.322,562,2.322,563,2.322,564,2.322,565,2.322,566,2.322,567,2.322,568,2.322,569,2.322]],["title/modules/UsersModule.html",[95,1.464,104,1.741]],["body/modules/UsersModule.html",[3,0.364,4,0.364,5,0.32,7,0.589,8,0.03,9,0.797,12,1.5,13,1.5,14,1.5,15,1.385,16,1.5,17,0.364,18,0.017,21,0.022,22,0.022,62,1.97,95,2.138,97,1.628,98,2.327,104,3.276,105,2.795,106,2.128,107,2.128,109,3.098,110,2.359,112,2.648,113,1.936,232,3.149,254,1.772,542,3.46,560,3.035,570,3.035,571,3.035,572,3.035,573,3.622,574,4.758,575,3.035,576,3.622,577,3.622]],["title/injectables/UsersService.html",[0,0.717,232,1.593]],["body/injectables/UsersService.html",[0,0.694,2,0.846,3,0.205,4,0.205,5,0.18,7,0.498,8,0.03,9,0.449,17,0.205,18,0.009,21,0.014,22,0.014,25,0.316,26,1.031,28,1.686,31,1.174,33,1.894,34,1.386,35,0.959,36,1.751,41,1.619,49,1.747,50,1.732,59,1.974,80,1.33,113,1.092,120,1.732,135,1.206,138,3.775,143,1.493,144,1.306,168,2.106,177,1.854,227,3.269,232,1.543,237,2.306,246,3.474,254,2.121,257,1.686,265,1.711,306,2.32,354,0.999,360,1.418,361,3.052,364,2.055,365,2.06,374,2.055,377,2.055,388,1.33,390,1.33,437,3.17,446,1.711,454,1.711,468,1.711,469,1.711,471,1.711,472,1.711,486,3.134,545,3.23,546,3.23,547,2.643,551,2.643,553,2.643,575,1.711,578,1.711,579,2.043,580,3.155,581,3.155,582,2.043,583,2.043,584,2.043,585,2.043,586,2.043,587,2.043,588,2.043,589,2.043,590,4.687,591,2.043,592,2.043,593,2.043,594,3.155,595,3.155,596,3.155,597,2.043,598,2.043,599,2.043,600,2.043,601,3.155,602,2.043,603,2.043]],["title/coverage.html",[604,3.713]],["body/coverage.html",[0,1.252,1,1.35,5,0.223,6,2.116,8,0.03,18,0.025,21,0.017,22,0.017,23,1.484,24,1.846,35,0.469,60,1.998,61,1.644,63,2.116,72,1.35,74,1.235,108,1.846,121,3.203,134,2.116,144,1.045,149,1.644,150,2.116,157,1.484,168,1.135,174,1.644,205,2.116,216,1.484,225,1.846,226,2.116,232,1.235,254,1.235,264,1.81,302,1.35,303,2.116,304,2.706,324,2.116,325,2.706,334,1.135,336,2.116,358,1.644,359,2.116,379,1.484,386,1.35,414,1.846,415,2.116,435,2.116,474,2.116,475,2.116,483,2.116,486,1.484,487,2.116,489,2.116,523,1.846,524,2.116,542,1.644,543,2.116,578,2.116,604,2.116,605,2.116,606,2.525,607,2.525,608,6.561,609,4.382,610,5.805,611,6.249,612,3.701,613,4.382,614,4.382,615,4.043,616,2.116,617,2.116,618,3.101,619,4.043,620,2.116,621,2.525,622,4.382,623,2.116,624,2.525,625,2.116,626,2.525,627,2.525]],["title/dependencies.html",[98,1.914,628,2.285]],["body/dependencies.html",[8,0.031,9,0.809,11,2.16,18,0.022,21,0.022,22,0.022,42,1.965,46,3.512,47,1.965,71,1.798,81,2.688,98,1.798,113,1.965,172,3.912,212,1.965,219,2.688,252,2.688,354,2.35,424,2.394,629,5.351,630,3.677,631,3.677,632,3.677,633,3.677,634,3.677,635,3.677,636,3.677,637,3.677,638,3.677,639,3.677,640,3.677,641,3.677,642,3.677,643,3.677,644,3.677,645,3.677,646,3.677,647,3.677,648,3.677,649,3.677,650,3.677,651,3.677,652,3.677,653,3.677,654,3.677,655,3.677,656,3.677,657,3.677,658,3.677,659,3.677,660,3.677]],["title/miscellaneous/functions.html",[661,1.458,662,3.28]],["body/miscellaneous/functions.html",[8,0.026,21,0.026,22,0.026,25,0.766,623,4.151,625,5.125,661,2.648,662,4.151,663,4.955]],["title/index.html",[25,0.422,664,2.728,665,2.728]],["body/index.html",[8,0.027,21,0.021,22,0.021,82,2.969,97,1.592,159,2.591,181,2.082,264,1.733,334,1.592,433,3.423,507,2.591,510,2.969,605,2.969,666,5.256,667,5.256,668,3.544,669,5.594,670,3.544,671,3.544,672,3.544,673,3.544,674,3.544,675,3.544,676,3.544,677,3.544,678,3.544,679,3.544,680,3.544,681,3.544,682,3.544,683,3.544,684,3.544,685,3.544,686,3.544,687,3.544,688,3.544,689,3.544,690,3.544,691,3.544,692,3.544,693,3.544,694,3.544,695,3.544,696,3.544,697,3.544,698,4.69,699,4.69,700,3.544,701,3.544,702,3.544,703,3.544,704,3.544,705,3.544,706,4.69,707,3.544,708,2.969,709,2.969,710,3.544,711,3.544,712,3.544,713,3.544,714,3.544,715,3.544,716,3.544,717,3.544,718,3.544,719,3.544,720,3.544,721,3.544,722,3.544,723,3.544,724,2.969,725,2.969,726,3.544,727,3.544]],["title/modules.html",[97,1.991]],["body/modules.html",[8,0.025,21,0.025,22,0.025,96,3.028,97,2.089,102,2.732,103,2.732,104,2.485,728,6.173,729,6.173,730,6.173,731,6.173]],["title/overview.html",[732,3.713]],["body/overview.html",[2,1.416,8,0.029,21,0.021,22,0.021,23,3.034,62,1.416,72,2.76,74,2.525,96,4.157,97,1.537,98,2.24,99,2.866,100,2.866,101,2.866,102,3.724,103,3.378,104,3.283,105,2.691,106,2.01,107,2.01,204,1.537,213,2.866,215,2.866,216,3.034,232,2.956,335,1.828,386,2.76,408,2.866,409,2.866,570,2.866,571,2.866,572,2.866,732,2.866,733,4.581,734,3.421,735,3.421,736,3.421]],["title/properties.html",[135,1.496,628,2.285]],["body/properties.html",[8,0.029,21,0.026,22,0.026,135,1.838,305,3.132,737,4.809,738,4.809,739,4.809,740,4.809,741,4.809,742,4.809,743,4.809,744,4.809]],["title/miscellaneous/typealiases.html",[661,1.458,745,3.915]],["body/miscellaneous/typealiases.html",[8,0.026,21,0.026,22,0.026,24,3.586,25,0.759,35,1.067,38,4.813,661,2.622,746,4.905,747,4.905,748,4.905]],["title/miscellaneous/variables.html",[661,1.458,749,3.28]],["body/miscellaneous/variables.html",[8,0.03,21,0.017,22,0.017,25,0.396,34,0.716,35,0.82,50,1.679,108,1.87,121,4.326,122,4.327,125,2.594,127,3.131,144,1.547,206,2.195,225,2.731,335,1.997,357,3.854,365,1.997,433,3.512,507,3.549,521,4.519,615,2.143,616,3.131,617,3.131,618,4.068,619,2.143,620,3.131,661,1.367,708,3.131,709,3.131,724,3.131,725,4.068,749,2.143,750,4.855,751,2.558,752,4.855,753,5.824,754,2.558,755,2.558,756,3.737,757,3.737,758,3.737,759,3.737,760,3.737,761,3.737,762,3.737,763,3.737,764,3.737,765,3.737,766,3.737,767,3.737,768,2.558,769,3.737,770,2.558,771,2.558,772,3.737,773,3.737,774,3.737,775,4.855,776,3.737,777,3.737,778,3.737,779,2.558,780,2.558,781,2.558,782,2.558,783,2.558,784,2.558,785,2.558,786,2.558,787,2.558]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":738,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["1.17.3",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["15m",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":734,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["2.5.0",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":530,"title":{},"body":{"classes/UserSeeder.html":{}}}],["4",{"_index":733,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":429,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["6.0.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":736,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":735,"title":{},"body":{"overview.html":{}}}],["8.9.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":23,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["adjustments",{"_index":705,"title":{},"body":{"index.html":{}}}],["agnostic",{"_index":701,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["another",{"_index":712,"title":{},"body":{"index.html":{}}}],["api",{"_index":667,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":394,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apibadrequestresponse()@post",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":391,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apibearerauth('bearerauth",{"_index":399,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('example",{"_index":392,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags('root",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":682,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":61,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":72,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["argon2.hash(data",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify(user.password",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.service",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_prev/auth.service",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["auth_prev/jwr",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":149,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":157,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authentication",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"index.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":102,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":741,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":74,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":700,"title":{},"body":{"index.html":{}}}],["average",{"_index":690,"title":{},"body":{"index.html":{}}}],["await",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('password",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["basic",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["before",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":671,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":314,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["bootstrap",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":731,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":728,"title":{},"body":{"modules.html":{}}}],["burnett",{"_index":743,"title":{},"body":{"properties.html":{}}}],["cfg",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.get('database",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["check",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":18,"title":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":204,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{},"overview.html":{}}}],["cliconfig",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_examplemodule",{"_index":408,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_providers",{"_index":409,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":570,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":572,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":571,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["code",{"_index":706,"title":{},"body":{"index.html":{}}}],["column",{"_index":342,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({default",{"_index":346,"title":{},"body":{"entities/Example.html":{}}}],["column({nullable",{"_index":349,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({unique",{"_index":491,"title":{},"body":{"entities/User.html":{}}}],["common/guards/accesstoken.guard",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["config",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["config/dbconfig",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configoptions",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":479,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configure",{"_index":686,"title":{},"body":{"index.html":{}}}],["connectivity",{"_index":694,"title":{},"body":{"index.html":{}}}],["connects",{"_index":710,"title":{},"body":{"index.html":{}}}],["console.log('req.user",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(examplerepository",{"_index":436,"title":{},"body":{"injectables/ExampleService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('example",{"_index":393,"title":{},"body":{"controllers/ExampleController.html":{}}}],["controller('users",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":604,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":360,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":397,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["create(createexampledto",{"_index":366,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["create(createuserdto",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":454,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":337,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":340,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createexampledto",{"_index":302,"title":{"classes/CreateExampleDto.html":{}},"body":{"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":168,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":396,"title":{},"body":{"controllers/ExampleController.html":{}}}],["creation",{"_index":697,"title":{},"body":{"index.html":{}}}],["data",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["data.password",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":433,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databases",{"_index":704,"title":{},"body":{"index.html":{}}}],["datasource",{"_index":420,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["datasource(configoptions",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(options",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(user",{"_index":529,"title":{},"body":{"classes/UserSeeder.html":{}}}],["datasourceoptions",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":339,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["db/migrations/*.{js,ts",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":357,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":384,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["delete('/id/:id",{"_index":375,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["deletes",{"_index":472,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployed",{"_index":708,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":305,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"properties.html":{}}}],["details",{"_index":718,"title":{},"body":{"index.html":{}}}],["dev",{"_index":726,"title":{},"body":{"index.html":{}}}],["disable",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["docker",{"_index":723,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":605,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":713,"title":{},"body":{"index.html":{}}}],["don't",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto/auth.dto",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":388,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":390,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["endpoint",{"_index":695,"title":{},"body":{"index.html":{}}}],["entities",{"_index":335,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/example.entity",{"_index":412,"title":{},"body":{"modules/ExampleModule.html":{},"injectables/ExampleService.html":{}}}],["entities/user.entity",{"_index":575,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":264,"title":{"entities/Example.html":{},"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/Example.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["entity{.ts,.js",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfile",{"_index":618,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":395,"title":{},"body":{"controllers/ExampleController.html":{}}}],["errors",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["eslint",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["etc",{"_index":510,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["example",{"_index":334,"title":{"entities/Example.html":{}},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"index.html":{}}}],["example.controller",{"_index":411,"title":{},"body":{"modules/ExampleModule.html":{}}}],["example.description",{"_index":466,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.dto",{"_index":389,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{}}}],["example.dto.ts",{"_index":304,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["example.dto.ts:12",{"_index":313,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:15",{"_index":322,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:18",{"_index":321,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:21",{"_index":318,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:24",{"_index":316,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:27",{"_index":317,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:30",{"_index":311,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.isactive",{"_index":464,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.service",{"_index":387,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["example.testnumber",{"_index":462,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.teststring",{"_index":460,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example/entities/example.entity",{"_index":425,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["example/example.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["examplecontroller",{"_index":358,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"coverage.html":{}}}],["examplefactory",{"_index":426,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplefactory.savemany(numrecords",{"_index":434,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplemodule",{"_index":103,"title":{"modules/ExampleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules.html":{},"overview.html":{}}}],["examplerepository",{"_index":439,"title":{},"body":{"injectables/ExampleService.html":{}}}],["exampleseeder",{"_index":414,"title":{"classes/ExampleSeeder.html":{}},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["exampleservice",{"_index":386,"title":{"injectables/ExampleService.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"overview.html":{}}}],["exist",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["expects",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":574,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":424,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"dependencies.html":{}}}],["extractjwt",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["factories",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory",{"_index":431,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager",{"_index":421,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager.get(example",{"_index":427,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["factorymanager.get(user",{"_index":528,"title":{},"body":{"classes/UserSeeder.html":{}}}],["false",{"_index":521,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@isnotempty()@isstring",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["favors",{"_index":702,"title":{},"body":{"index.html":{}}}],["fields",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":361,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid(@param('id",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid(id",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername(@param('username",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyusername(username",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":362,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findonebyid(@param('id",{"_index":402,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findonebyid(id",{"_index":369,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["folder",{"_index":716,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["forward",{"_index":676,"title":{},"body":{"index.html":{}}}],["function",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":662,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":432,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["generation",{"_index":696,"title":{},"body":{"index.html":{}}}],["get('/id/:id",{"_index":370,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["get('/username/:username",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('logout",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('protected",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/ExampleController.html":{}}}],["get('refresh",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprotected",{"_index":363,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["getting",{"_index":664,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["go",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["hash",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["hash(this.password",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["hashdata",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata(data",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["having",{"_index":684,"title":{},"body":{"index.html":{}}}],["hello",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":709,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hosted",{"_index":711,"title":{},"body":{"index.html":{}}}],["hosting",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/47792808/typeorm",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://www.elvisduru.com/blog/nestjs",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=_l225zpuk0m&list=wl&index=17",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["id",{"_index":306,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["implements",{"_index":416,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["incorrect",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["inject(configservice",{"_index":141,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":446,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(example",{"_index":447,"title":{},"body":{"injectables/ExampleService.html":{}}}],["injectrepository(user",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":685,"title":{},"body":{"index.html":{}}}],["installation",{"_index":721,"title":{},"body":{"index.html":{}}}],["instance",{"_index":707,"title":{},"body":{"index.html":{}}}],["instead",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isactive",{"_index":307,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["isboolean",{"_index":315,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isc",{"_index":740,"title":{},"body":{"properties.html":{}}}],["isemail",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":210,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isnumber",{"_index":320,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isstring",{"_index":211,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty",{"_index":207,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":323,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{}}}],["isuuid()@isnotempty",{"_index":312,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{}}}],["item",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwt",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtfromrequest",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":739,"title":{},"body":{"properties.html":{}}}],["line",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["literal",{"_index":748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":138,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["login(data",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["many",{"_index":687,"title":{},"body":{"index.html":{}}}],["matching",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matt",{"_index":742,"title":{},"body":{"properties.html":{}}}],["mburnett@tutanota.de",{"_index":744,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migration:run",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":725,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":661,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":95,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":717,"title":{},"body":{"index.html":{}}}],["msg",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["nestjs",{"_index":666,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexample",{"_index":451,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newexample.teststring",{"_index":455,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newuser",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.id",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.username",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["notes",{"_index":727,"title":{},"body":{"index.html":{}}}],["null",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":356,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["number",{"_index":319,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["numrecords",{"_index":428,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["object",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["one",{"_index":534,"title":{},"body":{"classes/UserSeeder.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ossp",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":732,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":628,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":688,"title":{},"body":{"index.html":{}}}],["param",{"_index":383,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":404,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["parseuuidpipe",{"_index":385,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":484,"title":{},"body":{"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createexampledto",{"_index":485,"title":{},"body":{"classes/UpdateExampleDto.html":{}}}],["partialtype(createuserdto",{"_index":488,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":480,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":206,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":382,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["patch('/id/:id",{"_index":380,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pg",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["pgadmin",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["points",{"_index":693,"title":{},"body":{"index.html":{}}}],["port",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["post('signup",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":507,"title":{},"body":{"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["primarygeneratedcolumn",{"_index":353,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":355,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid",{"_index":344,"title":{},"body":{"entities/Example.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid()@isnotempty",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["process.env.db_database_name",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":691,"title":{},"body":{"index.html":{}}}],["promise",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":135,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["protected",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExampleService.html":{}}}],["provide",{"_index":674,"title":{},"body":{"index.html":{}}}],["provided",{"_index":714,"title":{},"body":{"index.html":{}}}],["providers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["purpose",{"_index":673,"title":{},"body":{"index.html":{}}}],["query",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["quickly",{"_index":678,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{}}}],["refreshtokenguard",{"_index":174,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(userid",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":216,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["remove",{"_index":364,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":406,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":374,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":669,"title":{},"body":{"index.html":{}}}],["repository",{"_index":437,"title":{},"body":{"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["repository.save(testuser",{"_index":540,"title":{},"body":{"classes/UserSeeder.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":481,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['refreshtoken",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['sub",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":448,"title":{},"body":{"injectables/ExampleService.html":{}}}],["restful",{"_index":681,"title":{},"body":{"index.html":{}}}],["results",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":418,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{}}}],["run(datasource",{"_index":419,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["rxjs",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["save",{"_index":430,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["scaffolded",{"_index":670,"title":{},"body":{"index.html":{}}}],["secret",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["see",{"_index":449,"title":{},"body":{"injectables/ExampleService.html":{}}}],["seedconfig",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["seeder",{"_index":417,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seederfactorymanager",{"_index":422,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seeding",{"_index":698,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["setup",{"_index":722,"title":{},"body":{"index.html":{}}}],["showuser",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["signup",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.module.ts",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cliconfig.ts",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seedconfig.ts",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:15",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":139,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":205,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":209,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:9",{"_index":208,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":475,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:12",{"_index":476,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:21",{"_index":478,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":474,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/config/cliconfig.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/seedconfig.ts",{"_index":619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db/factories/**/*{.ts,.js",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/migrations/**/*{.ts,.js",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/**/*{.ts,.js",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/example.seeder.ts",{"_index":415,"title":{},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/example.seeder.ts:6",{"_index":423,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["src/db/seeds/user.seeder.ts",{"_index":524,"title":{},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/user.seeder.ts:6",{"_index":525,"title":{},"body":{"classes/UserSeeder.html":{}}}],["src/example",{"_index":715,"title":{},"body":{"index.html":{}}}],["src/example/dto/create",{"_index":303,"title":{},"body":{"classes/CreateExampleDto.html":{},"coverage.html":{}}}],["src/example/dto/update",{"_index":483,"title":{},"body":{"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts",{"_index":336,"title":{},"body":{"entities/Example.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts:14",{"_index":345,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:17",{"_index":350,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:20",{"_index":348,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:23",{"_index":347,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:26",{"_index":343,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:29",{"_index":341,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:32",{"_index":352,"title":{},"body":{"entities/Example.html":{}}}],["src/example/example.controller.ts",{"_index":359,"title":{},"body":{"controllers/ExampleController.html":{},"coverage.html":{}}}],["src/example/example.controller.ts:26",{"_index":367,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:33",{"_index":373,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:38",{"_index":368,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:44",{"_index":371,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:49",{"_index":381,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:57",{"_index":376,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.module.ts",{"_index":410,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/example/example.service.ts",{"_index":435,"title":{},"body":{"injectables/ExampleService.html":{},"coverage.html":{}}}],["src/example/example.service.ts:12",{"_index":438,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:20",{"_index":443,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:24",{"_index":440,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:33",{"_index":441,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:37",{"_index":442,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:41",{"_index":445,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:54",{"_index":444,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/main.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/subscriber/**/*.ts",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*{.ts,.js",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":487,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":489,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:45",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":493,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":490,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":573,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":720,"title":{},"body":{"index.html":{}}}],["stand",{"_index":679,"title":{},"body":{"index.html":{}}}],["started",{"_index":665,"title":{"index.html":{}},"body":{}}],["starting",{"_index":692,"title":{},"body":{"index.html":{}}}],["statements",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["straight",{"_index":675,"title":{},"body":{"index.html":{}}}],["strategies/accesstoken.strategy",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["subscribers",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successful",{"_index":450,"title":{},"body":{"injectables/ExampleService.html":{}}}],["super",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":729,"title":{},"body":{"modules.html":{}}}],["supporting",{"_index":672,"title":{},"body":{"index.html":{}}}],["svg",{"_index":730,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["tech",{"_index":719,"title":{},"body":{"index.html":{}}}],["template",{"_index":668,"title":{},"body":{"index.html":{}}}],["test",{"_index":531,"title":{},"body":{"classes/UserSeeder.html":{}}}],["test@one.com",{"_index":539,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testboolean",{"_index":308,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["testing",{"_index":699,"title":{},"body":{"index.html":{}}}],["testnumber",{"_index":309,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testone",{"_index":536,"title":{},"body":{"classes/UserSeeder.html":{}}}],["teststring",{"_index":310,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testuser",{"_index":532,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.email",{"_index":538,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.name",{"_index":533,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.password",{"_index":537,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.username",{"_index":535,"title":{},"body":{"classes/UserSeeder.html":{}}}],["theuser",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(data",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.body",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.examplerepository.create(createexampledto",{"_index":452,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.find",{"_index":457,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.findonebyid(id",{"_index":458,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.remove(todelete",{"_index":473,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(example",{"_index":470,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(newexample",{"_index":456,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.exampleservice.create(createexampledto",{"_index":398,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findall",{"_index":401,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findonebyid(id",{"_index":403,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.getprotected",{"_index":400,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.remove(id",{"_index":407,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.update(id",{"_index":405,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.findbyid(id",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(id",{"_index":459,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.gettokens(newuser.id",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(refreshtoken",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log",{"_index":453,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.logger.log('gethello",{"_index":145,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log(`exampleservice",{"_index":468,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`userservice",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.password",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["this.updaterefreshtoken(newuser.id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(todelete",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userid",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(data.username",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(username",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(userid",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["todelete",{"_index":471,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"entities/User.html":{}}}],["token",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["triggered",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["trim",{"_index":482,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring",{"_index":492,"title":{},"body":{"entities/User.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":745,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":354,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([example",{"_index":413,"title":{},"body":{"modules/ExampleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":577,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["unique",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":680,"title":{},"body":{"index.html":{}}}],["update",{"_index":365,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["update(id",{"_index":377,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":338,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":351,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updateexampledto",{"_index":379,"title":{"classes/UpdateExampleDto.html":{}},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["updateexampledto.description",{"_index":467,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.isactive",{"_index":465,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.testnumber",{"_index":463,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.teststring",{"_index":461,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updaterefreshtoken",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":469,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["updatetestdto",{"_index":378,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updateuserdto",{"_index":486,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":724,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":703,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":689,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('/id/:id",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('protected')@apibearerauth('bearerauth",{"_index":372,"title":{},"body":{"controllers/ExampleController.html":{}}}],["useguards(accesstokenguard)@patch('/id/:id",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(refreshtokenguard",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@get('refresh",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":254,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.refreshtoken",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfactory",{"_index":527,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userfactory.savemany(numrecords",{"_index":541,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["username",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":576,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/user.entity",{"_index":526,"title":{},"body":{"classes/UserSeeder.html":{}}}],["users/users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":542,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userseeder",{"_index":523,"title":{"classes/UserSeeder.html":{}},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":232,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":511,"title":{},"body":{"entities/User.html":{}}}],["uuid_v4",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["validate",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":477,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":212,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{},"dependencies.html":{}}}],["value",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":749,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":737,"title":{},"body":{"properties.html":{}}}],["void",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["way",{"_index":677,"title":{},"body":{"index.html":{}}}],["without",{"_index":683,"title":{},"body":{"index.html":{}}}],["world",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class AccessTokenGuard extends AuthGuard('jwt') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\ntype JwtPayload = {\n  sub: string\n  username: string\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET')\n    })\n  }\n\n  validate(payload: JwtPayload) {\n    return payload\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        // import { Controller, Get, Post, Request, UseGuards } from '@nestjs/common'\nimport { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AppService } from './app.service'\n// import { AuthService } from './auth_prev/auth.service'\n// import { JwtAuthGuard } from './auth_prev/jwr-auth.guard'\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  // constructor(private readonly appService: AppService) { }\n  // constructor(private readonly authService: AuthService, private readonly appService: AppService) { }\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly appService: AppService) { }\n\n  //  auth implementation https://www.youtube.com/watch?v=_L225zpUK0M&list=WL&index=17\n\n  // @Post('login')\n  // login(@Request() req): any {\n  //   return this.authService.login(req.body)\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('protected')\n  // showUser(): object {\n  //   return { msg: 'protected' }\n  // }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExampleModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\n\nimport { ExampleModule } from './example/example.module'\n\nimport { UsersModule } from './users/users.module'\nimport { AuthModule } from './auth/auth.module'\n\nimport dbConfig from './config/dbConfig'\n\nconst ENV = process.env.NODE_ENV\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [dbConfig]\n    }),\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => cfg.get('database')\n    }),\n    ExampleModule,\n    UsersModule,\n    UsersModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class AppService {\n  @Inject(ConfigService)\n  public config: ConfigService\n\n  logger: Logger\n\n  constructor() {\n    this.logger = new Logger()\n  }\n\n  getHello(): string {\n    this.logger.log('getHello is triggered!')\n    return 'Hello World!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Request } from 'express'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthService } from './auth.service'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private authService: AuthService) { }\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto)\n  }\n\n  @Post('login')\n  login(@Body() data: AuthDto) {\n    return this.authService.login(data)\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Get('refresh')\n  refreshTokens(@Req() req: Request) {\n    // console.log('req.user: ', req.user)\n\n    const userId = req.user['sub']\n    const refreshToken = req.user['refreshToken']\n    return this.authService.refreshTokens(userId, refreshToken)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub'])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator'\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\n\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy'\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy'\n\nimport { UsersModule } from '../users/users.module'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  // TODO: JwtModule.register options?\n  imports: [UsersModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                hashData\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashData\n                        \n                    \n                \n            \n            \n                \nhashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable\n} from '@nestjs/common'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { UsersService } from '../users/users.service'\nimport * as argon2 from 'argon2'\nimport { JwtService } from '@nestjs/jwt'\nimport { ConfigService } from '@nestjs/config'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) { }\n  async signUp(createUserDto: CreateUserDto): Promise {\n    // Check if user exists\n    const userExists = await this.usersService.findByUsername(\n      createUserDto.username\n    )\n\n    if (userExists) {\n      throw new BadRequestException('User already exists')\n    }\n\n    // Hash password in the user entity\n    const newUser = await this.usersService.create(createUserDto)\n\n    const tokens = await this.getTokens(newUser.id, newUser.username)\n    await this.updateRefreshToken(newUser.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async login(data: AuthDto) {\n    // Check if user exists\n    const user = await this.usersService.findByUsername(data.username)\n    if (!user) throw new BadRequestException('User does not exist')\n\n    const passwordMatches = await argon2.verify(user.password, data.password)\n    if (!passwordMatches) throw new BadRequestException('Password is incorrect')\n\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async logout(userId: string) {\n    return this.usersService.update(userId, { refreshToken: null })\n  }\n\n  hashData(data: string) {\n    return argon2.hash(data)\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshToken = await this.hashData(refreshToken)\n    await this.usersService.update(userId, {\n      refreshToken: hashedRefreshToken\n    })\n  }\n\n  async getTokens(userId: string, username: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_SECRET'),\n          expiresIn: '15m'\n        }\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '7d'\n        }\n      )\n    ])\n\n    return {\n      accessToken,\n      refreshToken\n    }\n  }\n\n  async refreshTokens(userId: string, refreshToken: string) {\n    const user = await this.usersService.findById(userId)\n    if (!user || !user.refreshToken)\n      throw new ForbiddenException('Access Denied')\n\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken\n    )\n\n    if (!refreshTokenMatches) throw new ForbiddenException('Access Denied')\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n\n    return tokens\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExampleDto.html":{"url":"classes/CreateExampleDto.html","title":"class - CreateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/create-example.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isActive\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                testBoolean\n                            \n                            \n                                    Optional\n                                testNumber\n                            \n                            \n                                    Optional\n                                testString\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsUUID\n} from 'class-validator'\n\nexport class CreateExampleDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  testString?: string\n\n  @IsNumber()\n  testNumber?: number\n\n  @IsBoolean()\n  testBoolean?: boolean\n\n  @IsBoolean()\n  isActive?: boolean\n\n  @IsString()\n  name?: string\n\n  @IsString()\n  description?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\nexport class CreateUserDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  @IsNotEmpty()\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsEmail()\n  email: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n\n  @IsString()\n  refreshToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Example.html":{"url":"entities/Example.html","title":"entity - Example","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Example\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/entities/example.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                testNumber\n                            \n                            \n                                testString\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsUUID } from 'class-validator'\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class Example {\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  id: string\n\n  @Column({ nullable: true })\n  testString: string\n\n  @Column()\n  testNumber: number\n\n  @Column({ default: true })\n  isActive: boolean\n\n  @Column()\n  description: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExampleController.html":{"url":"controllers/ExampleController.html","title":"controller - ExampleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExampleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                example\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('protected')@ApiBearerAuth('bearerAuth')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTestDto: UpdateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTestDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseUUIDPipe,\n  UseGuards\n} from '@nestjs/common'\nimport { ExampleService } from './example.service'\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\n\n@ApiTags('example')\n@Controller('example')\nexport class ExampleController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly exampleService: ExampleService) { }\n\n  @Post()\n  // @ApiBadRequestResponse({ description: 'Error creating new example.' })\n  create(@Body() createExampleDto: CreateExampleDto) {\n    return this.exampleService.create(createExampleDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('protected')\n  @ApiBearerAuth('bearerAuth')\n  getProtected(): string {\n    return this.exampleService.getProtected()\n  }\n\n  @Get()\n  findAll() {\n    return this.exampleService.findAll()\n  }\n\n  @Get('/id/:id')\n  // @ApiBadRequestResponse()\n  findOneById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.findOneById(id)\n  }\n\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateTestDto: UpdateExampleDto\n  ) {\n    return this.exampleService.update(id, updateTestDto)\n  }\n\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExampleModule.html":{"url":"modules/ExampleModule.html","title":"module - ExampleModule","body":"\n                   \n\n\n\n\n    Modules\n    ExampleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\n\nExampleService\n\nExampleService\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/example/example.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExampleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExampleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { ExampleService } from './example.service'\nimport { ExampleController } from './example.controller'\n\nimport { Example } from './entities/example.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Example])],\n  controllers: [ExampleController],\n  providers: [ExampleService]\n})\nexport class ExampleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleSeeder.html":{"url":"classes/ExampleSeeder.html","title":"class - ExampleSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/example.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/example.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { Example } from '../../example/entities/example.entity'\n\nexport default class ExampleSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const exampleFactory = await factoryManager.get(Example)\n    const numRecords = 5\n\n    // save numRecords factory generated entities, to the database\n    await exampleFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExampleService.html":{"url":"injectables/ExampleService.html","title":"injectable - ExampleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExampleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exampleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/example/example.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exampleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateExampleDto: UpdateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExampleDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/example/example.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\n\nimport { Example } from './entities/example.entity'\n\n@Injectable()\nexport class ExampleService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(Example) private exampleRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  getProtected(): string {\n    return 'This is a protected resource. If you see this, authentication was successful.'\n  }\n\n  create(createExampleDto: CreateExampleDto) {\n    const newExample = this.exampleRepository.create(createExampleDto)\n\n    this.logger.log(\n      `ExampleService created a new Example: ${newExample.testString}`\n    )\n    return this.exampleRepository.save(newExample)\n  }\n\n  findAll() {\n    return this.exampleRepository.find()\n  }\n\n  findOneById(id: string) {\n    return this.exampleRepository.findOneById(id)\n  }\n\n  async update(id: string, updateExampleDto: UpdateExampleDto) {\n    const example = await this.findOneById(id)\n\n    example.testString = updateExampleDto.testString\n    example.testNumber = updateExampleDto.testNumber\n    example.isActive = updateExampleDto.isActive\n    example.description = updateExampleDto.description\n\n    this.logger.log(`ExampleService updates an Example: ${id}`)\n\n    return this.exampleRepository.save(example)\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findOneById(id)\n\n    this.logger.log(`ExampleService deletes an Example: ${id}`)\n\n    return this.exampleRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { Request } from 'express'\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true\n    })\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim()\n    return { ...payload, refreshToken }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExampleDto.html":{"url":"classes/UpdateExampleDto.html","title":"class - UpdateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/update-example.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateExampleDto } from './create-example.dto'\n\nexport class UpdateExampleDto extends PartialType(CreateExampleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateUserDto } from './create-user.dto'\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  BeforeInsert,\n  BeforeUpdate\n} from 'typeorm'\n\nimport { hash } from 'argon2'\nimport { IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\n//  if there are errors about uuid_v4, go into Postgres cmd line / pgAdmin / etc. and run\n//    create extension \"uuid-ossp\";\n//  like a query\n@Entity()\nexport class User {\n  // hash the password before insert / update\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    // TODO: this needs a salt\n    this.password = await hash(this.password)\n  }\n\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  name: string\n\n  @Column({ unique: true, nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  username: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  password: string\n\n  @Column({ unique: true, nullable: true })\n  @IsString()\n  email: string\n\n  @Column({ nullable: true })\n  refreshToken: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSeeder.html":{"url":"classes/UserSeeder.html","title":"class - UserSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/user.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/user.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { User } from '../../users/entities/user.entity'\n\nexport default class UserSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const userFactory = await factoryManager.get(User)\n    const repository = dataSource.getRepository(User)\n\n    const numRecords = 3\n\n    //  create test user\n    const testUser = new User()\n\n    testUser.name = 'Test One'\n    testUser.username = 'testOne'\n    testUser.password = 'testOne'\n    testUser.email = 'test@one.com'\n\n    await repository.save(testUser)\n\n    // save numRecords factory generated entities, to the database\n    await userFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/username/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ParseUUIDPipe\n} from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { ApiBadRequestResponse, ApiTags } from '@nestjs/swagger'\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly usersService: UsersService) { }\n\n  @ApiBadRequestResponse()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto)\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll()\n  }\n\n  @Get('/id/:id')\n  findById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.findById(id)\n  }\n\n  @Get('/username/:username')\n  findByUsername(@Param('username') username: string) {\n    return this.usersService.findByUsername(username)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.usersService.update(id, updateUserDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { User } from './entities/user.entity'\nimport { UsersService } from './users.service'\nimport { UsersController } from './users.controller'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\n\nimport { User } from './entities/user.entity'\n\n@Injectable()\nexport class UsersService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(User) private userRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = this.userRepository.create(createUserDto)\n\n    this.logger.log(`UserService created new user: ${newUser.id}`)\n    return this.userRepository.save(newUser)\n  }\n\n  async findAll(): Promise {\n    this.logger.log(`UserService findAll`)\n    return this.userRepository.find()\n  }\n\n  async findById(id: string): Promise {\n    this.logger.log(`UserService findById: ${id}`)\n    return this.userRepository.findOne({ where: { id } })\n  }\n\n  async findByUsername(username: string): Promise {\n    this.logger.log(`UserService findByUsername: ${username}`)\n    return this.userRepository.findOne({ where: { username } })\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const theUser = await this.findById(id)\n\n    this.logger.log(`UserService updates User: ${id}`)\n\n    // https://stackoverflow.com/questions/47792808/typeorm-update-item-and-return-it\n    return this.userRepository.save({\n      ...theUser, // existing fields\n      ...updateUserDto // updated fields\n    })\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findById(id)\n\n    this.logger.log(`ExampleService deletes a User: ${id}`)\n\n    return this.userRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            cliConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            configOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            seedConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/seeds/example.seeder.ts\n            \n            class\n            ExampleSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/db/seeds/user.seeder.ts\n            \n            class\n            UserSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/example/dto/create-example.dto.ts\n            \n            class\n            CreateExampleDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/example/dto/update-example.dto.ts\n            \n            class\n            UpdateExampleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/entities/example.entity.ts\n            \n            entity\n            Example\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/example.controller.ts\n            \n            controller\n            ExampleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/example/example.service.ts\n            \n            injectable\n            ExampleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            argon2 : ^0.30.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            express-basic-auth : ^1.2.1\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.12\n        \n            typeorm-extension : ^2.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS API Template\n\n\n\nThis repo is a scaffolded / boilerplate implementation of NestJS and supporting modules.\nThe purpose of this repo is to provide a straight-forward way to quickly stand up a RESTful API NestJS app, without having to install / configure the many packages that are useful for an average project.\n\nStarting points for database connectivity, API endpoint generation, entity creation, data seeding, testing, authentication, etc. are available.\n\nThis repo is not database-agnostic and favors Postgres. However, it can be used with other databases, with some adjustments to the code.\nAn instance of this repo is deployed here, where it connects to a database hosted at another domain.\nExample code is provided in the src/example folder.\nMore details\n\nTech stack\nInstallation and setup\nDocker\nHow to use\nMigrations / Seeding\nTesting\nDocumentation\nDev notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExampleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : ISC\n        \n            Author : Matt Burnett mburnett@tutanota.de\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cliConfig   (src/.../cliConfig.ts)\n                        \n                        \n                            configOptions   (src/.../cliConfig.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            ENV   (src/.../cliConfig.ts)\n                        \n                        \n                            ENV   (src/.../seedConfig.ts)\n                        \n                        \n                            envFile   (src/.../cliConfig.ts)\n                        \n                        \n                            envFile   (src/.../seedConfig.ts)\n                        \n                        \n                            options   (src/.../seedConfig.ts)\n                        \n                        \n                            seedConfig   (src/.../seedConfig.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cliConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(configOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: true,\n  // don't update database here. use migration:run instead.\n  synchronize: false,\n  migrationsRun: false,\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  migrations: [__dirname + '/../db/migrations/*.{js,ts}'],\n  migrationsTableName: 'migrations',\n  // Postgres database hosting expects SSL, but localhost doesn't.\n  ssl: process.env.NODE_ENV === 'deployed' ? true : false\n  // subscribers: ['src/subscriber/**/*.ts']\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : !ENV ? '.env' : `.env.${ENV}`\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/seedConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : !ENV ? '.env' : `.env.${ENV}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  migrationsTableName: 'migrations',\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: false,\n  // don't update database here. use migration:run instead.\n  synchronize: false,\n  // name: 'default',\n  entities: ['src/**/**.entity{.ts,.js}'],\n  migrations: ['src/db/migrations/**/*{.ts,.js}'],\n  subscribers: ['src/subscriber/**/*{.ts,.js}'],\n  seeds: ['src/db/seeds/**/*{.ts,.js}'],\n  factories: ['src/db/factories/**/*{.ts,.js}'],\n  // Postgres database hosting expects SSL, but localhost doesn't.\n  ssl: process.env.NODE_ENV === 'deployed' ? true : false\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
