var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.717,1,1.741]],["body/injectables/AccessTokenGuard.html",[0,1.196,1,2.904,2,1.85,3,0.449,4,0.449,5,0.395,6,3.744,7,0.546,8,0.03,9,0.983,10,3.744,11,2.626,12,1.85,13,1.85,14,1.85,15,1.708,16,1.85,17,0.449,18,0.02,19,2.389,20,3.744,21,0.025,22,0.025]],["title/injectables/AccessTokenStrategy.html",[0,0.717,23,1.914]],["body/injectables/AccessTokenStrategy.html",[0,1.016,2,1.432,3,0.348,4,0.348,5,0.306,7,0.557,8,0.03,9,0.761,11,2.033,17,0.348,18,0.015,19,1.849,21,0.021,22,0.021,23,2.711,24,2.529,25,0.535,26,1.509,27,3.867,28,1.849,29,2.899,30,3.488,31,1.016,32,3.46,33,1.764,34,1.291,35,0.964,36,1.631,37,4.615,38,4.836,39,3.46,40,3.867,41,1.131,42,1.849,43,2.899,44,2.899,45,2.529,46,2.253,47,2.257,48,2.899,49,1.396,50,1.554,51,3.46,52,1.849,53,2.033,54,2.899,55,2.899,56,2.899,57,2.899,58,3.46,59,1.322]],["title/controllers/AppController.html",[60,1.349,61,2.122]],["body/controllers/AppController.html",[3,0.31,4,0.31,5,0.272,7,0.577,8,0.031,9,0.939,12,1.277,13,1.277,14,1.277,15,1.179,16,1.277,17,0.31,18,0.014,21,0.02,22,0.02,25,0.477,26,1.395,31,0.679,41,1.008,49,1.291,52,2.616,53,3.104,59,1.871,60,2.027,61,2.78,62,1.277,63,2.584,64,4.426,65,1.179,66,3.084,67,2.009,68,2.009,69,2.009,70,2.009,71,1.508,72,3.144,73,2.584,74,2.394,75,3.084,76,3.084,77,3.084,78,3.084,79,3.084,80,2.009,81,2.584,82,2.584,83,3.084,84,2.584,85,3.084,86,2.255,87,3.084,88,3.084,89,2.584,90,3.084,91,3.084,92,3.084,93,2.584,94,3.084]],["title/modules/AppModule.html",[95,1.464,96,2.122]],["body/modules/AppModule.html",[3,0.288,4,0.288,5,0.253,7,0.602,8,0.03,9,0.63,12,1.185,13,1.185,14,1.185,15,1.094,16,1.185,17,0.288,18,0.013,21,0.019,22,0.019,30,2.763,42,1.53,61,3.062,62,1.677,72,2.995,73,2.398,95,1.82,96,4.097,97,1.286,98,1.981,99,2.398,100,2.398,101,2.398,102,3.292,103,3.292,104,3.199,105,2.38,106,1.682,107,1.53,108,2.093,109,2.639,110,2.639,111,2.863,112,2.093,113,1.53,114,2.863,115,2.863,116,2.398,117,2.863,118,2.863,119,1.185,120,2.398,121,2.863,122,2.863,123,2.398,124,2.863,125,4.052,126,2.863,127,1.286,128,3.438,129,2.398,130,2.863,131,2.863,132,1.682,133,2.863,134,2.398,135,2.863,136,2.863,137,2.398,138,2.863,139,2.863,140,2.863]],["title/injectables/AppService.html",[0,0.717,72,1.741]],["body/injectables/AppService.html",[0,1.047,2,1.5,3,0.364,4,0.364,5,0.32,7,0.478,8,0.03,9,0.797,17,0.364,18,0.016,21,0.022,22,0.022,25,0.561,26,1.555,28,2.84,30,3.122,31,1.242,35,0.884,41,1.184,42,1.937,49,1.439,59,1.385,64,4.727,65,1.385,72,2.543,137,3.036,141,3.036,142,1.819,143,3.884,144,5.313,145,4.481,146,4.759,147,3.623,148,4.759,149,3.623,150,2.649,151,1.5,152,3.623,153,3.623,154,3.623,155,3.623]],["title/controllers/AuthController.html",[60,1.349,156,2.122]],["body/controllers/AuthController.html",[1,1.358,3,0.255,4,0.255,5,0.224,7,0.573,8,0.031,9,0.559,12,1.052,13,1.052,14,1.052,15,0.971,16,1.052,17,0.255,18,0.011,21,0.017,22,0.017,25,0.393,26,1.216,31,1.065,33,1.85,34,1.354,35,0.899,36,1.71,41,1.582,47,1.243,52,1.358,59,1.681,60,1.052,62,1.052,65,1.85,67,1.655,68,3.62,69,1.655,70,1.655,71,1.243,74,2.151,81,2.129,84,3.116,86,3.765,127,1.671,156,2.422,157,2.129,158,1.858,159,3.116,160,3.116,161,3.116,162,3.116,163,2.129,164,2.844,165,2.541,166,2.718,167,2.541,168,2.541,169,2.541,170,2.541,171,2.541,172,2.541,173,2.541,174,2.129,175,2.418,176,3.719,177,2.541,178,1.858,179,1.858,180,1.858,181,1.655,182,2.541,183,2.129,184,1.493,185,2.129,186,2.129,187,1.858,188,1.655,189,1.493,190,1.858,191,2.541,192,2.541,193,2.541,194,2.541,195,2.541,196,2.541,197,2.541,198,2.541,199,2.541,200,2.541,201,2.541,202,2.129,203,2.541,204,2.185,205,2.541,206,2.541,207,1.858,208,2.541,209,2.541,210,2.541]],["title/classes/AuthDto.html",[18,0.014,164,1.914]],["body/classes/AuthDto.html",[3,0.414,4,0.414,5,0.364,7,0.414,8,0.03,17,0.414,18,0.023,21,0.024,22,0.024,25,0.637,31,1.137,35,0.959,49,1.79,50,2.536,65,1.975,142,1.975,164,3.035,211,1.85,212,3.45,213,3.316,214,4.328,215,4.118,216,4.118,217,3.676,218,3.676,219,2.014]],["title/modules/AuthModule.html",[95,1.464,102,1.914]],["body/modules/AuthModule.html",[3,0.318,4,0.318,5,0.279,7,0.595,8,0.03,9,0.696,12,1.309,13,1.309,14,1.309,15,1.209,16,1.309,17,0.318,18,0.014,21,0.02,22,0.02,23,3.397,47,2.124,62,1.798,74,2.828,95,1.952,97,1.421,98,2.124,102,3.704,104,3.09,105,2.552,106,1.858,107,1.69,109,2.828,110,2.828,116,2.65,156,3.23,185,2.65,187,3.175,188,2.828,189,2.552,190,3.175,220,2.65,221,3.163,222,2.65,223,3.397,224,3.163,225,3.163,226,2.312,227,3.163,228,3.163,229,3.163,230,2.312,231,4.343,232,2.312]],["title/injectables/AuthService.html",[0,0.717,74,1.593]],["body/injectables/AuthService.html",[0,0.568,2,0.657,3,0.159,4,0.159,5,0.14,7,0.47,8,0.03,9,0.349,17,0.159,18,0.007,21,0.012,22,0.012,25,0.245,26,0.844,28,1.38,30,2.748,31,1.073,33,1.864,34,1.364,35,0.905,36,1.723,41,1.529,42,0.848,47,0.776,48,2.162,49,1.838,50,1.86,59,1.696,74,1.262,80,2.125,127,2.383,151,1.714,159,2.162,160,2.162,161,2.162,162,2.162,163,2.162,164,2.21,166,1.887,174,2.162,175,1.86,183,1.329,184,0.932,186,1.329,187,1.159,188,1.033,189,0.932,190,1.159,202,3.718,204,3.117,213,0.932,226,1.159,233,1.329,234,3.12,235,2.581,236,2.581,237,2.581,238,1.586,239,2.17,240,4.678,241,1.586,242,2.581,243,1.586,244,2.749,245,2.581,246,1.586,247,1.586,248,2.581,249,1.586,250,2.581,251,1.586,252,1.586,253,1.681,254,2.581,255,1.586,256,1.586,257,1.586,258,1.586,259,1.681,260,2.581,261,2.288,262,3.264,263,2.581,264,3.024,265,1.586,266,1.586,267,4.14,268,2.581,269,1.586,270,1.329,271,0.776,272,1.329,273,1.329,274,4.438,275,1.586,276,1.586,277,1.586,278,3.264,279,1.586,280,1.586,281,2.581,282,1.586,283,1.586,284,1.586,285,1.586,286,2.581,287,2.581,288,2.581,289,2.581,290,1.586,291,1.586,292,2.581,293,1.586,294,2.581,295,1.586,296,2.581,297,2.581,298,1.586,299,2.581,300,1.586,301,1.586,302,1.586,303,1.586,304,2.581,305,2.581,306,2.581,307,2.581,308,1.586]],["title/classes/CreateExampleDto.html",[18,0.014,309,1.741]],["body/classes/CreateExampleDto.html",[3,0.304,4,0.304,5,0.267,7,0.304,8,0.03,17,0.304,18,0.019,21,0.019,22,0.019,25,0.468,31,1.288,34,1.356,35,1.087,36,2.211,49,1.805,65,2.237,142,1.611,211,1.361,217,2.745,218,3.811,219,1.481,309,2.253,310,5.001,311,2.214,312,3.157,313,2.178,314,4.062,315,4.848,316,4.062,317,4.062,318,3.028,319,2.537,320,3.028,321,4.391,322,5.51,323,3.028,324,3.028,325,3.028,326,3.531,327,4.848,328,3.028,329,3.028,330,2.745]],["title/classes/CreateUserDto.html",[18,0.014,175,1.464]],["body/classes/CreateUserDto.html",[3,0.328,4,0.328,5,0.289,7,0.328,8,0.03,17,0.328,18,0.02,21,0.02,22,0.02,25,0.505,31,1.285,34,1.411,35,1.084,49,1.917,50,2.266,65,2.232,142,1.697,175,1.995,204,2.964,211,1.468,213,2.964,214,4.226,217,3.686,218,3.802,219,1.598,313,2.266,319,2.737,330,2.892,331,5.004,332,2.388,333,4.226,334,5.044,335,3.267,336,3.267,337,3.267,338,3.267,339,3.267,340,3.267]],["title/entities/Example.html",[271,1.593,341,1.464]],["body/entities/Example.html",[3,0.31,4,0.31,5,0.272,7,0.429,8,0.03,17,0.31,18,0.019,21,0.02,22,0.02,25,0.477,31,1.294,35,1.092,49,1.735,65,2.248,119,1.277,132,3.104,142,1.632,219,1.508,271,2.088,312,3.188,313,2.2,314,4.102,316,4.102,317,4.102,321,3.577,326,3.577,330,2.78,341,1.918,342,1.649,343,2.584,344,4.102,345,4.102,346,4.426,347,4.102,348,3.084,349,4.928,350,3.084,351,3.084,352,3.084,353,3.084,354,3.084,355,3.084,356,2.584,357,3.084,358,4.102,359,3.084,360,2.584,361,2.584,362,2.584,363,2.009]],["title/controllers/ExampleController.html",[60,1.349,364,2.122]],["body/controllers/ExampleController.html",[1,1.253,3,0.236,4,0.236,5,0.207,7,0.525,8,0.03,9,0.516,12,0.97,13,0.97,14,0.97,15,0.896,16,0.97,17,0.236,18,0.01,21,0.016,22,0.016,25,0.363,26,1.145,31,1.15,33,1.779,34,1.302,35,0.864,36,1.644,41,1.708,49,1.779,52,1.253,53,1.377,59,1.997,60,0.97,62,0.97,65,1.997,67,2.731,69,1.526,70,1.526,71,1.146,89,1.964,151,1.927,158,1.713,178,2.561,180,1.713,207,1.713,309,2.793,312,1.526,313,2.348,341,1.574,364,2.281,365,1.964,366,1.574,367,3.03,368,2.935,369,3.899,370,2.281,371,2.242,372,1.964,373,2.344,374,2.344,375,1.964,376,2.935,377,2.344,378,2.344,379,2.344,380,1.526,381,2.935,382,2.344,383,1.526,384,4.653,385,2.734,386,2.935,387,2.344,388,1.964,389,1.964,390,1.964,391,3.899,392,2.242,393,1.964,394,1.526,395,2.561,396,1.526,397,2.344,398,2.344,399,2.935,400,2.344,401,2.344,402,1.964,403,2.344,404,2.344,405,2.344,406,2.344,407,2.344,408,1.964,409,2.344,410,1.964,411,2.344]],["title/modules/ExampleModule.html",[95,1.464,103,1.914]],["body/modules/ExampleModule.html",[3,0.391,4,0.391,5,0.344,7,0.603,8,0.03,9,0.857,17,0.391,18,0.017,21,0.023,22,0.023,62,2.064,95,2.24,97,1.749,98,2.438,103,3.603,105,2.929,106,2.287,107,2.08,109,3.246,110,2.535,112,2.845,113,2.08,341,1.749,364,3.581,392,3.278,393,3.261,412,3.261,413,3.261,414,3.892,415,3.892,416,3.261,417,3.892]],["title/classes/ExampleSeeder.html",[18,0.014,418,2.382]],["body/classes/ExampleSeeder.html",[3,0.355,4,0.355,5,0.312,7,0.528,8,0.03,17,0.355,18,0.016,21,0.021,22,0.021,25,0.547,26,1.53,31,0.778,33,1.351,34,0.988,35,0.656,36,1.248,41,1.155,119,1.938,127,2.103,143,3.836,211,1.588,234,2.805,253,3.048,264,2.501,341,1.588,342,1.888,363,2.301,418,3.421,419,2.96,420,3.921,421,4.397,422,3.836,423,2.96,424,5.004,425,4.397,426,4.681,427,3.533,428,2.301,429,3.533,430,3.533,431,3.533,432,3.921,433,3.533,434,2.96,435,2.96,436,2.96,437,2.301,438,3.533]],["title/injectables/ExampleService.html",[0,0.717,392,1.741]],["body/injectables/ExampleService.html",[0,0.733,2,0.908,3,0.221,4,0.221,5,0.194,7,0.512,8,0.03,9,0.483,17,0.221,18,0.01,21,0.015,22,0.015,25,0.339,26,1.089,28,1.781,31,1.201,33,1.85,34,1.354,35,0.946,36,1.71,41,1.666,49,1.752,59,1.948,80,1.429,93,1.838,113,1.173,119,0.908,127,1.811,142,1.274,145,3.872,150,1.604,151,1.38,230,1.604,234,2.724,244,2.436,264,1.781,309,2.587,313,2.175,341,2.175,366,1.497,367,2.931,368,2.792,369,3.771,370,2.17,371,1.781,372,2.792,375,2.792,380,2.17,383,2.17,385,3.112,392,2.154,394,1.429,395,2.436,396,1.429,416,1.838,439,1.838,440,2.194,441,3.29,442,3.333,443,3.333,444,2.194,445,2.194,446,2.194,447,2.194,448,2.194,449,2.194,450,1.838,451,2.194,452,2.194,453,2.194,454,2.194,455,2.194,456,1.838,457,2.194,458,2.194,459,2.194,460,2.194,461,3.333,462,2.194,463,2.194,464,1.838,465,2.194,466,2.194,467,2.194,468,2.194,469,2.194,470,2.194,471,2.194,472,2.194,473,2.194,474,2.194,475,2.194,476,2.194,477,2.792,478,1.838,479,2.194,480,1.838,481,1.838,482,2.194]],["title/injectables/RefreshTokenGuard.html",[0,0.717,181,2.122]],["body/injectables/RefreshTokenGuard.html",[0,1.192,2,1.842,3,0.447,4,0.447,5,0.393,7,0.545,8,0.03,9,0.979,10,3.728,11,2.614,12,1.842,13,1.842,14,1.842,15,1.701,16,1.842,17,0.447,18,0.02,19,2.378,20,3.728,21,0.025,22,0.025,181,3.529,189,2.614,483,3.728]],["title/injectables/RefreshTokenStrategy.html",[0,0.717,223,1.914]],["body/injectables/RefreshTokenStrategy.html",[0,0.99,2,1.38,3,0.335,4,0.335,5,0.294,7,0.573,8,0.03,9,0.733,11,1.958,17,0.335,18,0.015,19,1.781,21,0.021,22,0.021,25,0.516,26,1.471,27,3.771,28,1.781,29,2.792,30,3.45,31,0.99,33,1.72,34,1.259,35,0.836,36,1.59,40,4.572,41,1.089,42,1.781,43,3.771,44,2.792,45,3.29,46,2.17,47,2.201,52,1.781,53,1.958,54,2.792,55,2.792,56,2.792,57,2.792,59,1.274,68,3.554,86,2.436,127,1.497,132,1.958,179,2.436,189,1.958,204,2.644,223,2.644,484,2.792,485,3.332,486,4.5,487,3.332,488,3.332,489,3.332,490,3.332,491,3.332]],["title/classes/UpdateExampleDto.html",[18,0.014,385,1.914]],["body/classes/UpdateExampleDto.html",[3,0.462,4,0.462,5,0.406,7,0.555,8,0.03,17,0.462,18,0.02,19,2.455,21,0.025,22,0.025,71,2.246,211,2.064,309,2.455,311,3.357,366,2.064,385,3.246,395,3.357,492,3.848,493,3.848,494,4.593]],["title/classes/UpdateUserDto.html",[18,0.014,495,1.914]],["body/classes/UpdateUserDto.html",[3,0.462,4,0.462,5,0.406,7,0.555,8,0.03,17,0.462,18,0.02,19,2.455,21,0.025,22,0.025,71,2.246,175,2.064,184,2.698,211,2.064,332,3.357,366,2.064,493,3.848,495,3.246,496,3.848,497,4.593]],["title/entities/User.html",[261,1.593,271,1.593]],["body/entities/User.html",[3,0.242,4,0.242,5,0.213,7,0.429,8,0.03,15,0.922,17,0.242,18,0.016,21,0.016,22,0.016,25,0.373,31,1.236,34,1.193,35,1.043,49,1.813,50,1.917,65,2.146,119,0.999,132,3.212,142,1.368,204,2.506,213,2.773,217,3.283,218,3.283,219,1.18,230,1.763,234,1.289,259,1.571,261,1.75,264,1.289,270,2.998,271,1.75,313,1.917,330,2.33,333,3.574,342,1.289,344,3.574,345,3.574,346,3.954,347,3.574,349,4.425,356,3.574,358,3.574,360,2.021,361,2.021,362,4.58,366,1.084,371,1.289,422,1.763,428,1.571,498,2.021,499,2.412,500,3.578,501,2.412,502,2.412,503,2.412,504,2.412,505,4.266,506,2.412,507,2.412,508,2.412,509,2.412,510,2.412,511,3.578,512,3.578,513,2.412,514,2.412,515,2.412,516,1.763,517,2.412,518,2.412,519,2.021,520,2.021,521,2.021,522,2.412,523,2.412,524,2.412,525,2.412,526,2.412,527,2.412,528,2.412,529,2.412,530,3.574,531,3.578]],["title/classes/UserSeeder.html",[18,0.014,532,2.382]],["body/classes/UserSeeder.html",[3,0.323,4,0.323,5,0.284,7,0.503,8,0.03,17,0.323,18,0.014,21,0.02,22,0.02,25,0.497,26,1.435,31,0.707,33,1.228,34,0.899,35,0.597,36,1.136,41,1.051,119,1.818,120,2.693,127,2.415,143,3.656,151,1.331,211,1.444,234,2.673,253,2.86,261,2.446,264,2.673,342,1.718,363,2.093,366,1.444,420,3.679,421,4.191,422,3.656,423,2.693,424,4.868,425,4.191,426,4.504,428,2.093,432,3.679,434,2.693,435,2.693,436,2.693,437,2.093,441,2.349,532,3.21,533,2.693,534,3.214,535,3.214,536,3.214,537,3.214,538,3.214,539,3.214,540,4.391,541,3.214,542,3.214,543,3.214,544,4.391,545,3.214,546,3.214,547,3.214,548,3.214,549,3.214]],["title/controllers/UsersController.html",[60,1.349,550,2.122]],["body/controllers/UsersController.html",[1,1.25,3,0.235,4,0.235,5,0.207,7,0.525,8,0.03,9,0.515,12,0.968,13,0.968,14,0.968,15,0.894,16,0.968,17,0.235,18,0.01,21,0.016,22,0.016,25,0.362,26,1.143,31,1.149,33,1.902,34,1.392,35,0.924,36,1.758,41,1.707,49,1.801,50,1.571,52,1.25,53,1.374,59,1.996,60,0.968,62,0.968,65,1.996,67,2.277,69,1.523,70,1.523,71,1.144,151,1.734,158,1.709,175,2.346,178,2.556,180,1.709,184,2.054,207,2.556,239,2.048,273,1.959,313,2.346,366,1.571,367,3.027,370,2.277,371,2.239,376,2.93,380,1.523,381,1.959,383,1.523,386,1.959,388,1.959,389,1.959,390,1.959,391,3.894,394,1.523,396,1.523,399,2.93,402,1.959,408,1.959,410,1.959,495,3.269,550,2.277,551,1.959,552,2.338,553,2.93,554,2.93,555,1.959,556,2.338,557,2.338,558,2.338,559,1.959,560,2.338,561,1.959,562,3.497,563,2.338,564,2.338,565,2.338,566,2.338,567,2.338,568,1.959,569,2.338,570,2.338,571,2.338,572,2.338,573,2.338,574,2.338,575,2.338,576,2.338,577,2.338]],["title/modules/UsersModule.html",[95,1.464,104,1.741]],["body/modules/UsersModule.html",[3,0.366,4,0.366,5,0.321,7,0.59,8,0.03,9,0.8,12,1.506,13,1.506,14,1.506,15,1.39,16,1.506,17,0.366,18,0.016,21,0.022,22,0.022,62,1.975,95,2.143,97,1.634,98,2.333,104,3.28,105,2.802,106,2.137,107,1.944,109,3.106,110,2.368,112,2.658,113,1.944,239,3.151,261,1.778,550,3.466,568,3.047,578,3.047,579,3.047,580,3.047,581,3.637,582,4.77,583,3.047,584,3.637,585,3.637]],["title/injectables/UsersService.html",[0,0.717,239,1.593]],["body/injectables/UsersService.html",[0,0.698,2,0.852,3,0.207,4,0.207,5,0.182,7,0.5,8,0.03,9,0.453,17,0.207,18,0.009,21,0.014,22,0.014,25,0.318,26,1.037,28,1.696,31,1.177,33,1.899,34,1.39,35,0.962,36,1.756,41,1.624,49,1.751,50,1.74,59,1.979,80,1.34,113,1.1,119,0.852,127,1.74,142,1.213,145,3.785,150,1.504,151,1.314,175,2.113,184,1.864,234,3.273,239,1.552,244,2.32,253,3.482,261,2.129,264,1.696,272,1.724,313,2.327,366,1.426,367,3.063,370,2.067,371,2.07,380,2.067,383,2.067,394,1.34,396,1.34,441,3.182,450,1.724,456,1.724,477,1.724,478,1.724,480,1.724,481,1.724,495,3.142,553,3.245,554,3.245,555,2.659,559,2.659,561,2.659,583,1.724,586,1.724,587,2.058,588,3.173,589,3.173,590,2.058,591,2.058,592,2.058,593,2.058,594,2.058,595,2.058,596,2.058,597,2.058,598,4.703,599,2.058,600,2.058,601,2.058,602,3.173,603,3.173,604,3.173,605,2.058,606,2.058,607,2.058,608,2.058,609,3.173,610,2.058,611,2.058]],["title/coverage.html",[612,3.713]],["body/coverage.html",[0,1.254,1,1.358,5,0.224,6,2.129,8,0.03,18,0.025,21,0.017,22,0.017,23,1.493,24,1.858,35,0.472,60,2.004,61,1.655,63,2.129,72,1.358,74,1.243,108,1.858,128,3.215,141,2.129,151,1.052,156,1.655,157,2.129,164,1.493,175,1.142,181,1.655,212,2.129,223,1.493,232,1.858,233,2.129,239,1.243,261,1.243,271,1.819,309,1.358,310,2.129,311,2.718,331,2.129,332,2.718,341,1.142,343,2.129,364,1.655,365,2.129,385,1.493,392,1.358,418,1.858,419,2.129,439,2.129,483,2.129,484,2.129,492,2.129,495,1.493,496,2.129,498,2.129,532,1.858,533,2.129,550,1.655,551,2.129,586,2.129,612,2.129,613,2.129,614,2.541,615,2.541,616,6.564,617,4.398,618,5.814,619,6.255,620,3.719,621,4.398,622,4.398,623,4.055,624,2.129,625,2.129,626,3.116,627,4.055,628,2.129,629,2.541,630,4.398,631,2.129,632,2.541,633,2.129,634,2.541,635,2.541]],["title/dependencies.html",[98,1.914,636,2.285]],["body/dependencies.html",[8,0.031,9,0.827,11,2.209,18,0.022,21,0.022,22,0.022,42,2.01,46,3.175,47,1.839,71,1.839,98,1.839,113,2.01,119,2.018,179,3.564,219,1.839,226,2.749,259,2.449,428,2.449,637,5.41,638,3.76,639,3.76,640,3.76,641,3.76,642,3.76,643,3.76,644,3.76,645,3.76,646,3.76,647,3.76,648,3.76,649,3.15,650,3.15,651,3.76,652,3.76,653,3.76,654,3.15,655,3.76,656,3.76,657,3.76,658,3.15,659,3.76,660,3.76,661,3.76,662,3.76,663,3.76,664,3.76,665,3.76,666,3.76]],["title/miscellaneous/functions.html",[667,1.458,668,3.28]],["body/miscellaneous/functions.html",[8,0.026,21,0.026,22,0.026,25,0.767,631,4.155,633,5.127,667,2.65,668,4.155,669,4.959]],["title/index.html",[25,0.422,670,2.728,671,2.285]],["body/index.html",[8,0.027,18,0.014,21,0.02,22,0.02,45,2.255,46,2.009,47,1.508,68,2.009,82,2.584,97,1.386,107,1.649,119,1.767,123,4.426,166,2.255,188,2.009,219,1.508,259,2.009,271,1.508,341,1.386,437,2.009,464,3.577,516,3.121,519,2.584,520,3.577,521,2.584,613,2.584,649,2.584,650,2.584,654,2.584,658,2.584,671,2.584,672,5.283,673,3.084,674,4.269,675,3.084,676,3.084,677,3.084,678,3.084,679,3.084,680,3.084,681,3.084,682,3.084,683,3.084,684,4.269,685,3.084,686,3.084,687,3.084,688,3.084,689,3.084,690,3.084,691,3.084,692,3.084,693,3.084,694,4.269,695,3.084,696,3.084,697,3.084,698,3.084,699,3.084,700,3.084,701,3.084,702,3.084,703,4.269,704,4.269,705,3.084,706,3.084,707,4.269,708,5.738,709,3.084,710,3.084,711,3.084,712,3.084,713,3.084,714,3.084,715,3.084,716,3.084,717,3.084,718,3.084,719,3.084,720,3.084,721,3.084,722,2.584,723,3.084,724,3.084,725,3.084,726,3.084,727,3.084,728,4.269,729,3.084,730,3.084,731,3.084,732,2.584,733,3.084,734,3.084,735,3.084,736,3.084,737,3.084,738,3.084,739,3.084,740,3.084,741,3.084,742,3.084,743,2.584,744,2.584,745,3.084,746,3.084]],["title/modules.html",[97,1.991]],["body/modules.html",[8,0.025,21,0.025,22,0.025,96,3.033,97,2.093,102,2.736,103,2.736,104,2.489,732,5.175,747,6.176,748,6.176,749,6.176]],["title/overview.html",[750,3.713]],["body/overview.html",[2,1.422,8,0.03,21,0.021,22,0.021,23,3.041,62,1.422,72,2.766,74,2.531,96,4.16,97,1.544,98,2.247,99,2.879,100,2.879,101,2.879,102,3.727,103,3.383,104,3.286,105,2.699,106,2.019,107,1.836,211,1.544,220,2.879,222,2.879,223,3.041,239,2.959,342,1.836,392,2.766,412,2.879,413,2.879,578,2.879,579,2.879,580,2.879,750,2.879,751,4.594,752,3.436,753,3.436,754,3.436]],["title/properties.html",[142,1.496,636,2.285]],["body/properties.html",[8,0.029,21,0.026,22,0.026,142,1.84,312,3.136,755,4.815,756,4.815,757,4.815,758,4.815,759,4.815,760,4.815,761,4.815,762,4.815]],["title/miscellaneous/typealiases.html",[667,1.458,763,3.915]],["body/miscellaneous/typealiases.html",[8,0.026,21,0.026,22,0.026,24,3.589,25,0.76,35,1.067,38,4.815,667,2.624,764,4.91,765,4.91,766,4.91]],["title/miscellaneous/variables.html",[667,1.458,767,3.28]],["body/miscellaneous/variables.html",[8,0.03,21,0.017,22,0.017,25,0.398,34,0.72,35,0.823,50,1.687,108,1.882,128,4.333,129,4.338,132,2.603,134,3.145,151,1.554,213,2.205,232,2.744,342,2.006,363,3.86,371,2.006,437,3.52,516,3.56,530,4.529,623,2.157,624,3.145,625,3.145,626,4.08,627,2.157,628,3.145,667,1.376,722,3.145,743,3.145,744,4.08,767,2.157,768,4.87,769,2.574,770,4.87,771,5.833,772,2.574,773,2.574,774,3.754,775,3.754,776,3.754,777,3.754,778,3.754,779,3.754,780,3.754,781,3.754,782,3.754,783,3.754,784,3.754,785,3.754,786,2.574,787,3.754,788,2.574,789,2.574,790,3.754,791,3.754,792,3.754,793,4.87,794,3.754,795,3.754,796,3.754,797,3.754,798,2.574,799,2.574,800,2.574,801,2.574,802,2.574,803,2.574,804,2.574,805,2.574,806,2.574]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":756,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["1.17.3",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["15m",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":752,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["2.5.0",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":539,"title":{},"body":{"classes/UserSeeder.html":{}}}],["4",{"_index":751,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":433,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["6.0.1",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":754,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":753,"title":{},"body":{"overview.html":{}}}],["8.9.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":23,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["additional",{"_index":727,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":764,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":672,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":399,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apibadrequestresponse()@post",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('example",{"_index":397,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags('root",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":688,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":61,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":72,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["argon2.hash(data",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify(user.password",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["auth.controller",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.service",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_prev/auth.service",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["auth_prev/jwr",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":156,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":164,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authentication",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":102,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":759,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":74,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":709,"title":{},"body":{"index.html":{}}}],["average",{"_index":696,"title":{},"body":{"index.html":{}}}],["await",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('password",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["basic",{"_index":721,"title":{},"body":{"index.html":{}}}],["before",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":511,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":676,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":321,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["bootstrap",{"_index":633,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":710,"title":{},"body":{"index.html":{}}}],["browse",{"_index":749,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":747,"title":{},"body":{"modules.html":{}}}],["burnett",{"_index":761,"title":{},"body":{"properties.html":{}}}],["cfg",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.get('database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["check",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":18,"title":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":211,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{},"overview.html":{}}}],["cleaner",{"_index":463,"title":{},"body":{"injectables/ExampleService.html":{}}}],["cli",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["cliconfig",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_examplemodule",{"_index":412,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_providers",{"_index":413,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":578,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":580,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":579,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["code",{"_index":711,"title":{},"body":{"index.html":{}}}],["column",{"_index":349,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({default",{"_index":353,"title":{},"body":{"entities/Example.html":{}}}],["column({nullable",{"_index":356,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({unique",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["common/guards/accesstoken.guard",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["compodoc",{"_index":723,"title":{},"body":{"index.html":{}}}],["config",{"_index":144,"title":{},"body":{"injectables/AppService.html":{}}}],["config/dbconfig",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["configoptions",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":488,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configuration",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":692,"title":{},"body":{"index.html":{}}}],["connectivity",{"_index":703,"title":{},"body":{"index.html":{}}}],["console.log('req.user",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(examplerepository",{"_index":440,"title":{},"body":{"injectables/ExampleService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('example",{"_index":398,"title":{},"body":{"controllers/ExampleController.html":{}}}],["controller('users",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":649,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["coverage",{"_index":612,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":366,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":402,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["create(createexampledto",{"_index":372,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["create(createuserdto",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":456,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":344,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":347,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createexampledto",{"_index":309,"title":{"classes/CreateExampleDto.html":{}},"body":{"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":175,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":401,"title":{},"body":{"controllers/ExampleController.html":{}}}],["creation",{"_index":706,"title":{},"body":{"index.html":{}}}],["data",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["data.password",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":437,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":424,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["datasource(configoptions",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(options",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(user",{"_index":538,"title":{},"body":{"classes/UserSeeder.html":{}}}],["datasourceoptions",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":346,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["db/migrations/*.{js,ts",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":363,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":390,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["delete('/id/:id",{"_index":381,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":715,"title":{},"body":{"index.html":{}}}],["deletes",{"_index":481,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployed",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description",{"_index":312,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"properties.html":{}}}],["details",{"_index":740,"title":{},"body":{"index.html":{}}}],["dev",{"_index":745,"title":{},"body":{"index.html":{}}}],["disable",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["documentation",{"_index":613,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["driver",{"_index":729,"title":{},"body":{"index.html":{}}}],["dto/auth.dto",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":394,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":396,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":726,"title":{},"body":{"index.html":{}}}],["email",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enable",{"_index":731,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":704,"title":{},"body":{"index.html":{}}}],["entities",{"_index":342,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/example.entity",{"_index":416,"title":{},"body":{"modules/ExampleModule.html":{},"injectables/ExampleService.html":{}}}],["entities/user.entity",{"_index":583,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":271,"title":{"entities/Example.html":{},"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/Example.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["entity{.ts,.js",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfile",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":400,"title":{},"body":{"controllers/ExampleController.html":{}}}],["errors",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["eslint",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["etc",{"_index":519,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["example",{"_index":341,"title":{"entities/Example.html":{}},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"index.html":{}}}],["example.controller",{"_index":415,"title":{},"body":{"modules/ExampleModule.html":{}}}],["example.description",{"_index":475,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.dto",{"_index":395,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{}}}],["example.dto.ts",{"_index":311,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["example.dto.ts:12",{"_index":320,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:15",{"_index":329,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:18",{"_index":328,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:21",{"_index":325,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:24",{"_index":323,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:27",{"_index":324,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:30",{"_index":318,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.isactive",{"_index":473,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.service",{"_index":393,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["example.testnumber",{"_index":471,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.teststring",{"_index":469,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example/entities/example.entity",{"_index":429,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["example/example.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["examplecontroller",{"_index":364,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"coverage.html":{}}}],["examplefactory",{"_index":430,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplefactory.savemany(numrecords",{"_index":438,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplemodule",{"_index":103,"title":{"modules/ExampleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules.html":{},"overview.html":{}}}],["examplerepository",{"_index":443,"title":{},"body":{"injectables/ExampleService.html":{}}}],["exampleseeder",{"_index":418,"title":{"classes/ExampleSeeder.html":{}},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["exampleservice",{"_index":392,"title":{"injectables/ExampleService.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"overview.html":{}}}],["exist",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["expects",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":582,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":428,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"dependencies.html":{}}}],["extention",{"_index":728,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["factories",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory",{"_index":435,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager",{"_index":425,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager.get(example",{"_index":431,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["factorymanager.get(user",{"_index":537,"title":{},"body":{"classes/UserSeeder.html":{}}}],["false",{"_index":530,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@isnotempty()@isstring",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["fields",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":462,"title":{},"body":{"injectables/ExampleService.html":{}}}],["findall",{"_index":367,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid(@param('id",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid(id",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername(@param('username",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyusername(username",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":368,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findonebyid(@param('id",{"_index":406,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findonebyid(id",{"_index":375,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["folder",{"_index":714,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["forward",{"_index":683,"title":{},"body":{"index.html":{}}}],["function",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":668,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":436,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["generation",{"_index":705,"title":{},"body":{"index.html":{}}}],["get('/id/:id",{"_index":376,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["get('/username/:username",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('logout",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('protected",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/ExampleController.html":{}}}],["get('refresh",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprotected",{"_index":369,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["getting",{"_index":670,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["go",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["hash",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["hash(this.password",{"_index":529,"title":{},"body":{"entities/User.html":{}}}],["hashdata",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata(data",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":525,"title":{},"body":{"entities/User.html":{}}}],["having",{"_index":690,"title":{},"body":{"index.html":{}}}],["hello",{"_index":154,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":654,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hosting",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/47792808/typeorm",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://stackoverflow.com/questions/59913475/configure",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["https://www.elvisduru.com/blog/nestjs",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=_l225zpuk0m&list=wl&index=17",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["id",{"_index":313,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["implements",{"_index":420,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["includes",{"_index":718,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["inject(configservice",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":450,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(example",{"_index":451,"title":{},"body":{"injectables/ExampleService.html":{}}}],["injectrepository(user",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":691,"title":{},"body":{"index.html":{}}}],["installation",{"_index":741,"title":{},"body":{"index.html":{}}}],["instead",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isactive",{"_index":314,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["isboolean",{"_index":322,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isc",{"_index":758,"title":{},"body":{"properties.html":{}}}],["isemail",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":217,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isnumber",{"_index":327,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isstring",{"_index":218,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty",{"_index":214,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":330,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{}}}],["isuuid()@isnotempty",{"_index":319,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{}}}],["item",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["jest",{"_index":733,"title":{},"body":{"index.html":{}}}],["js",{"_index":724,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtauthguard",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtfromrequest",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["key",{"_index":699,"title":{},"body":{"index.html":{}}}],["license",{"_index":757,"title":{},"body":{"properties.html":{}}}],["line",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["links",{"_index":738,"title":{},"body":{"index.html":{}}}],["literal",{"_index":766,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":722,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["login(data",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["many",{"_index":693,"title":{},"body":{"index.html":{}}}],["matching",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matt",{"_index":760,"title":{},"body":{"properties.html":{}}}],["maybe",{"_index":467,"title":{},"body":{"injectables/ExampleService.html":{}}}],["mburnett@tutanota.de",{"_index":762,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migration:run",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":744,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":667,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock/express",{"_index":734,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":735,"title":{},"body":{"index.html":{}}}],["module",{"_index":95,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":739,"title":{},"body":{"index.html":{}}}],["msg",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["nestjs",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":151,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexample",{"_index":453,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newexample.teststring",{"_index":457,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newuser",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.id",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.username",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["notes",{"_index":746,"title":{},"body":{"index.html":{}}}],["null",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":362,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["number",{"_index":326,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["numrecords",{"_index":432,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["object",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["objects",{"_index":737,"title":{},"body":{"index.html":{}}}],["once",{"_index":716,"title":{},"body":{"index.html":{}}}],["one",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"classes/UserSeeder.html":{}}}],["openapi",{"_index":720,"title":{},"body":{"index.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ossp",{"_index":521,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overkill",{"_index":466,"title":{},"body":{"injectables/ExampleService.html":{}}}],["overview",{"_index":750,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":636,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":694,"title":{},"body":{"index.html":{}}}],["param",{"_index":389,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":408,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":650,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":391,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":493,"title":{},"body":{"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createexampledto",{"_index":494,"title":{},"body":{"classes/UpdateExampleDto.html":{}}}],["partialtype(createuserdto",{"_index":497,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":489,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":213,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":388,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["patch('/id/:id",{"_index":386,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pg",{"_index":658,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["pgadmin",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["points",{"_index":702,"title":{},"body":{"index.html":{}}}],["port",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["post('signup",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["postges",{"_index":730,"title":{},"body":{"index.html":{}}}],["postgres",{"_index":516,"title":{},"body":{"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["primarygeneratedcolumn",{"_index":360,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":361,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid",{"_index":351,"title":{},"body":{"entities/Example.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid()@isnotempty",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["probably",{"_index":465,"title":{},"body":{"injectables/ExampleService.html":{}}}],["process.env.db_database_name",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":679,"title":{},"body":{"index.html":{}}}],["project",{"_index":697,"title":{},"body":{"index.html":{}}}],["promise",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":142,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["protected",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExampleService.html":{}}}],["provide",{"_index":681,"title":{},"body":{"index.html":{}}}],["provided",{"_index":712,"title":{},"body":{"index.html":{}}}],["providers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["purpose",{"_index":680,"title":{},"body":{"index.html":{}}}],["query",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["quickly",{"_index":684,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{}}}],["refreshtokenguard",{"_index":181,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(userid",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":223,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["remove",{"_index":370,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":410,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":380,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":674,"title":{},"body":{"index.html":{}}}],["repository",{"_index":441,"title":{},"body":{"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["repository.save(testuser",{"_index":548,"title":{},"body":{"classes/UserSeeder.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":490,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['refreshtoken",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['sub",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":452,"title":{},"body":{"injectables/ExampleService.html":{}}}],["restful",{"_index":687,"title":{},"body":{"index.html":{}}}],["result",{"_index":736,"title":{},"body":{"index.html":{}}}],["results",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":422,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{}}}],["run(datasource",{"_index":423,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["rxjs",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["save",{"_index":434,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["scaffolded",{"_index":675,"title":{},"body":{"index.html":{}}}],["secret",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["seedconfig",{"_index":628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["seeder",{"_index":421,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seederfactorymanager",{"_index":426,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seeding",{"_index":707,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["setup",{"_index":742,"title":{},"body":{"index.html":{}}}],["showuser",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["signup",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["solution",{"_index":700,"title":{},"body":{"index.html":{}}}],["somehow",{"_index":468,"title":{},"body":{"injectables/ExampleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.module.ts",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cliconfig.ts",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":669,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seedconfig.ts",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:15",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":212,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":216,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:9",{"_index":215,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":484,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:12",{"_index":485,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:21",{"_index":487,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":483,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/config/cliconfig.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/seedconfig.ts",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db/factories/**/*{.ts,.js",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/migrations/**/*{.ts,.js",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/**/*{.ts,.js",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/example.seeder.ts",{"_index":419,"title":{},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/example.seeder.ts:6",{"_index":427,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["src/db/seeds/user.seeder.ts",{"_index":533,"title":{},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/user.seeder.ts:6",{"_index":534,"title":{},"body":{"classes/UserSeeder.html":{}}}],["src/example",{"_index":713,"title":{},"body":{"index.html":{}}}],["src/example/dto/create",{"_index":310,"title":{},"body":{"classes/CreateExampleDto.html":{},"coverage.html":{}}}],["src/example/dto/update",{"_index":492,"title":{},"body":{"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts",{"_index":343,"title":{},"body":{"entities/Example.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts:14",{"_index":352,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:17",{"_index":357,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:20",{"_index":355,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:23",{"_index":354,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:26",{"_index":350,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:29",{"_index":348,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:32",{"_index":359,"title":{},"body":{"entities/Example.html":{}}}],["src/example/example.controller.ts",{"_index":365,"title":{},"body":{"controllers/ExampleController.html":{},"coverage.html":{}}}],["src/example/example.controller.ts:26",{"_index":373,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:32",{"_index":379,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:37",{"_index":374,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:43",{"_index":377,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:48",{"_index":387,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:56",{"_index":382,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.module.ts",{"_index":414,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/example/example.service.ts",{"_index":439,"title":{},"body":{"injectables/ExampleService.html":{},"coverage.html":{}}}],["src/example/example.service.ts:12",{"_index":442,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:20",{"_index":447,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:24",{"_index":444,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:33",{"_index":445,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:37",{"_index":446,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:41",{"_index":449,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:56",{"_index":448,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/main.ts",{"_index":631,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/subscriber/**/*.ts",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*{.ts,.js",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":496,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":498,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:45",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":581,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stand",{"_index":685,"title":{},"body":{"index.html":{}}}],["started",{"_index":671,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":701,"title":{},"body":{"index.html":{}}}],["statements",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["straight",{"_index":682,"title":{},"body":{"index.html":{}}}],["strategies/accesstoken.strategy",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["string",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["subscribers",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":732,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":677,"title":{},"body":{"index.html":{}}}],["svg",{"_index":748,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":719,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":673,"title":{},"body":{"index.html":{}}}],["test",{"_index":540,"title":{},"body":{"classes/UserSeeder.html":{}}}],["test@one.com",{"_index":547,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testboolean",{"_index":315,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["testing",{"_index":708,"title":{},"body":{"index.html":{}}}],["testnumber",{"_index":316,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testone",{"_index":544,"title":{},"body":{"classes/UserSeeder.html":{}}}],["teststring",{"_index":317,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testuser",{"_index":541,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.email",{"_index":546,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.name",{"_index":542,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.password",{"_index":545,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.username",{"_index":543,"title":{},"body":{"classes/UserSeeder.html":{}}}],["theuser",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(data",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.body",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.examplerepository.create(createexampledto",{"_index":454,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.find",{"_index":459,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.findonebyid(id",{"_index":460,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.remove(todelete",{"_index":482,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(example",{"_index":479,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(newexample",{"_index":458,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.exampleservice.create(createexampledto",{"_index":403,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findall",{"_index":405,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findonebyid(id",{"_index":407,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.getprotected",{"_index":404,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.remove(id",{"_index":411,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.update(id",{"_index":409,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.findbyid(id",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(id",{"_index":461,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.gettokens(newuser.id",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(refreshtoken",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log",{"_index":455,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.logger.log('gethello",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log(`exampleservice",{"_index":477,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`userservice",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.password",{"_index":528,"title":{},"body":{"entities/User.html":{}}}],["this.updaterefreshtoken(newuser.id",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(todelete",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userid",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(data.username",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(username",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(userid",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["todelete",{"_index":480,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/ExampleService.html":{},"entities/User.html":{}}}],["token",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["triggered",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["trim",{"_index":491,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["turn",{"_index":698,"title":{},"body":{"index.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":763,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([example",{"_index":417,"title":{},"body":{"modules/ExampleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":585,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["underway",{"_index":717,"title":{},"body":{"index.html":{}}}],["unique",{"_index":531,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":725,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":686,"title":{},"body":{"index.html":{}}}],["update",{"_index":371,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["update(id",{"_index":383,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":345,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":358,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updateexampledto",{"_index":385,"title":{"classes/UpdateExampleDto.html":{}},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["updateexampledto.description",{"_index":476,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.isactive",{"_index":474,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.testnumber",{"_index":472,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.teststring",{"_index":470,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updaterefreshtoken",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":478,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["updatetestdto",{"_index":384,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updateuserdto",{"_index":495,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":743,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":695,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('/id/:id",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('protected",{"_index":378,"title":{},"body":{"controllers/ExampleController.html":{}}}],["useguards(accesstokenguard)@patch('/id/:id",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(refreshtokenguard",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@get('refresh",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":261,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.refreshtoken",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfactory",{"_index":536,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userfactory.savemany(numrecords",{"_index":549,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userid",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["username",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":584,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/user.entity",{"_index":535,"title":{},"body":{"classes/UserSeeder.html":{}}}],["users/users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":550,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userseeder",{"_index":532,"title":{"classes/UserSeeder.html":{}},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":239,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":520,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["uuid_v4",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["validate",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":486,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":219,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":767,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":755,"title":{},"body":{"properties.html":{}}}],["void",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["way",{"_index":464,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["without",{"_index":689,"title":{},"body":{"index.html":{}}}],["work",{"_index":678,"title":{},"body":{"index.html":{}}}],["world",{"_index":155,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class AccessTokenGuard extends AuthGuard('jwt') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\ntype JwtPayload = {\n  sub: string\n  username: string\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET')\n    })\n  }\n\n  validate(payload: JwtPayload) {\n    return payload\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        // import { Controller, Get, Post, Request, UseGuards } from '@nestjs/common'\nimport { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AppService } from './app.service'\n// import { AuthService } from './auth_prev/auth.service'\n// import { JwtAuthGuard } from './auth_prev/jwr-auth.guard'\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  // constructor(private readonly appService: AppService) { }\n  // constructor(private readonly authService: AuthService, private readonly appService: AppService) { }\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly appService: AppService) { }\n\n  //  auth implementation https://www.youtube.com/watch?v=_L225zpUK0M&list=WL&index=17\n\n  // @Post('login')\n  // login(@Request() req): any {\n  //   return this.authService.login(req.body)\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('protected')\n  // showUser(): object {\n  //   return { msg: 'protected' }\n  // }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExampleModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\n\nimport { ExampleModule } from './example/example.module'\n\nimport { UsersModule } from './users/users.module'\nimport { AuthModule } from './auth/auth.module'\n\n// https://stackoverflow.com/questions/59913475/configure-typeorm-with-one-configuration-for-cli-and-nestjs-application\nimport dbConfig from './config/dbConfig'\n\nconst ENV = process.env.NODE_ENV\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [dbConfig]\n    }),\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => cfg.get('database')\n    }),\n    ExampleModule,\n    UsersModule,\n    UsersModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class AppService {\n  @Inject(ConfigService)\n  public config: ConfigService\n\n  logger: Logger\n\n  constructor() {\n    this.logger = new Logger()\n  }\n\n  getHello(): string {\n    this.logger.log('getHello is triggered!')\n    return 'Hello World!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Request } from 'express'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthService } from './auth.service'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private authService: AuthService) { }\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto)\n  }\n\n  @Post('login')\n  login(@Body() data: AuthDto) {\n    return this.authService.login(data)\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Get('refresh')\n  refreshTokens(@Req() req: Request) {\n    // console.log('req.user: ', req.user)\n\n    const userId = req.user['sub']\n    const refreshToken = req.user['refreshToken']\n    return this.authService.refreshTokens(userId, refreshToken)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub'])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator'\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\n\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy'\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy'\n\nimport { UsersModule } from '../users/users.module'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  // TODO: JwtModule.register options?\n  imports: [UsersModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                hashData\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashData\n                        \n                    \n                \n            \n            \n                \nhashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable\n} from '@nestjs/common'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { UsersService } from '../users/users.service'\nimport * as argon2 from 'argon2'\nimport { JwtService } from '@nestjs/jwt'\nimport { ConfigService } from '@nestjs/config'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) { }\n  async signUp(createUserDto: CreateUserDto): Promise {\n    // Check if user exists\n    const userExists = await this.usersService.findByUsername(\n      createUserDto.username\n    )\n\n    if (userExists) {\n      throw new BadRequestException('User already exists')\n    }\n\n    // Hash password in the user entity\n    const newUser = await this.usersService.create(createUserDto)\n\n    const tokens = await this.getTokens(newUser.id, newUser.username)\n    await this.updateRefreshToken(newUser.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async login(data: AuthDto) {\n    // Check if user exists\n    const user = await this.usersService.findByUsername(data.username)\n    if (!user) throw new BadRequestException('User does not exist')\n\n    const passwordMatches = await argon2.verify(user.password, data.password)\n    if (!passwordMatches) throw new BadRequestException('Password is incorrect')\n\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async logout(userId: string) {\n    return this.usersService.update(userId, { refreshToken: null })\n  }\n\n  hashData(data: string) {\n    return argon2.hash(data)\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshToken = await this.hashData(refreshToken)\n    await this.usersService.update(userId, {\n      refreshToken: hashedRefreshToken\n    })\n  }\n\n  async getTokens(userId: string, username: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_SECRET'),\n          expiresIn: '15m'\n        }\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '7d'\n        }\n      )\n    ])\n\n    return {\n      accessToken,\n      refreshToken\n    }\n  }\n\n  async refreshTokens(userId: string, refreshToken: string) {\n    const user = await this.usersService.findById(userId)\n    if (!user || !user.refreshToken)\n      throw new ForbiddenException('Access Denied')\n\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken\n    )\n\n    if (!refreshTokenMatches) throw new ForbiddenException('Access Denied')\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n\n    return tokens\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExampleDto.html":{"url":"classes/CreateExampleDto.html","title":"class - CreateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/create-example.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isActive\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                testBoolean\n                            \n                            \n                                    Optional\n                                testNumber\n                            \n                            \n                                    Optional\n                                testString\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsUUID\n} from 'class-validator'\n\nexport class CreateExampleDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  testString?: string\n\n  @IsNumber()\n  testNumber?: number\n\n  @IsBoolean()\n  testBoolean?: boolean\n\n  @IsBoolean()\n  isActive?: boolean\n\n  @IsString()\n  name?: string\n\n  @IsString()\n  description?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\nexport class CreateUserDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  @IsNotEmpty()\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsEmail()\n  email: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n\n  @IsString()\n  refreshToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Example.html":{"url":"entities/Example.html","title":"entity - Example","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Example\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/entities/example.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                testNumber\n                            \n                            \n                                testString\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsUUID } from 'class-validator'\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class Example {\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  id: string\n\n  @Column({ nullable: true })\n  testString: string\n\n  @Column()\n  testNumber: number\n\n  @Column({ default: true })\n  isActive: boolean\n\n  @Column()\n  description: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExampleController.html":{"url":"controllers/ExampleController.html","title":"controller - ExampleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExampleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                example\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('protected')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTestDto: UpdateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTestDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseUUIDPipe,\n  UseGuards\n} from '@nestjs/common'\nimport { ExampleService } from './example.service'\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\n\n@ApiTags('example')\n@Controller('example')\nexport class ExampleController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly exampleService: ExampleService) { }\n\n  @Post()\n  // @ApiBadRequestResponse({ description: 'Error creating new example.' })\n  create(@Body() createExampleDto: CreateExampleDto) {\n    return this.exampleService.create(createExampleDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('protected')\n  getProtected(): string {\n    return this.exampleService.getProtected()\n  }\n\n  @Get()\n  findAll() {\n    return this.exampleService.findAll()\n  }\n\n  @Get('/id/:id')\n  // @ApiBadRequestResponse()\n  findOneById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.findOneById(id)\n  }\n\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateTestDto: UpdateExampleDto\n  ) {\n    return this.exampleService.update(id, updateTestDto)\n  }\n\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExampleModule.html":{"url":"modules/ExampleModule.html","title":"module - ExampleModule","body":"\n                   \n\n\n\n\n    Modules\n    ExampleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\n\nExampleService\n\nExampleService\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/example/example.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExampleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExampleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { ExampleService } from './example.service'\nimport { ExampleController } from './example.controller'\n\nimport { Example } from './entities/example.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Example])],\n  controllers: [ExampleController],\n  providers: [ExampleService]\n})\nexport class ExampleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleSeeder.html":{"url":"classes/ExampleSeeder.html","title":"class - ExampleSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/example.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/example.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { Example } from '../../example/entities/example.entity'\n\nexport default class ExampleSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const exampleFactory = await factoryManager.get(Example)\n    const numRecords = 5\n\n    // save numRecords factory generated entities, to the database\n    await exampleFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExampleService.html":{"url":"injectables/ExampleService.html","title":"injectable - ExampleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExampleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exampleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/example/example.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exampleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateExampleDto: UpdateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExampleDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/example/example.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\n\nimport { Example } from './entities/example.entity'\n\n@Injectable()\nexport class ExampleService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(Example) private exampleRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  getProtected(): string {\n    return 'This is a protected resource'\n  }\n\n  create(createExampleDto: CreateExampleDto) {\n    const newExample = this.exampleRepository.create(createExampleDto)\n\n    this.logger.log(\n      `ExampleService created a new Example: ${newExample.testString}`\n    )\n    return this.exampleRepository.save(newExample)\n  }\n\n  findAll() {\n    return this.exampleRepository.find()\n  }\n\n  findOneById(id: string) {\n    return this.exampleRepository.findOneById(id)\n  }\n\n  async update(id: string, updateExampleDto: UpdateExampleDto) {\n    const example = await this.findOneById(id)\n\n    // TODO: find a cleaner way to do this. This is probably overkill\n    //    maybe ? or ... somehow\n    example.testString = updateExampleDto.testString\n    example.testNumber = updateExampleDto.testNumber\n    example.isActive = updateExampleDto.isActive\n    example.description = updateExampleDto.description\n\n    this.logger.log(`ExampleService updates an Example: ${id}`)\n\n    return this.exampleRepository.save(example)\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findOneById(id)\n\n    this.logger.log(`ExampleService deletes an Example: ${id}`)\n\n    return this.exampleRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { Request } from 'express'\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true\n    })\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim()\n    return { ...payload, refreshToken }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExampleDto.html":{"url":"classes/UpdateExampleDto.html","title":"class - UpdateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/update-example.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateExampleDto } from './create-example.dto'\n\nexport class UpdateExampleDto extends PartialType(CreateExampleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateUserDto } from './create-user.dto'\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  BeforeInsert,\n  BeforeUpdate\n} from 'typeorm'\n\nimport { hash } from 'argon2'\nimport { IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\n//  if there are errors about uuid_v4, go into Postgres cmd line / pgAdmin / etc. and run\n//    create extension \"uuid-ossp\";\n//  like a query\n@Entity()\nexport class User {\n  // hash the password before insert / update\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    // TODO: this needs a salt\n    this.password = await hash(this.password)\n  }\n\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  name: string\n\n  @Column({ unique: true, nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  username: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  password: string\n\n  @Column({ unique: true, nullable: true })\n  @IsString()\n  email: string\n\n  @Column({ nullable: true })\n  refreshToken: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSeeder.html":{"url":"classes/UserSeeder.html","title":"class - UserSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/user.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/user.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { User } from '../../users/entities/user.entity'\n\nexport default class UserSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const userFactory = await factoryManager.get(User)\n    const repository = dataSource.getRepository(User)\n\n    const numRecords = 3\n\n    //  create test user\n    const testUser = new User()\n\n    testUser.name = 'Test One'\n    testUser.username = 'testOne'\n    testUser.password = 'testOne'\n    testUser.email = 'test@one.com'\n\n    await repository.save(testUser)\n\n    // save numRecords factory generated entities, to the database\n    await userFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/username/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ParseUUIDPipe\n} from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { ApiBadRequestResponse, ApiTags } from '@nestjs/swagger'\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly usersService: UsersService) { }\n\n  @ApiBadRequestResponse()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto)\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll()\n  }\n\n  @Get('/id/:id')\n  findById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.findById(id)\n  }\n\n  @Get('/username/:username')\n  findByUsername(@Param('username') username: string) {\n    return this.usersService.findByUsername(username)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.usersService.update(id, updateUserDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { User } from './entities/user.entity'\nimport { UsersService } from './users.service'\nimport { UsersController } from './users.controller'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\n\nimport { User } from './entities/user.entity'\n\n@Injectable()\nexport class UsersService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(User) private userRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = this.userRepository.create(createUserDto)\n\n    this.logger.log(`UserService created new user: ${newUser.id}`)\n    return this.userRepository.save(newUser)\n  }\n\n  async findAll(): Promise {\n    this.logger.log(`UserService findAll`)\n    return this.userRepository.find()\n  }\n\n  async findById(id: string): Promise {\n    this.logger.log(`UserService findById: ${id}`)\n    return this.userRepository.findOne({ where: { id } })\n  }\n\n  async findByUsername(username: string): Promise {\n    this.logger.log(`UserService findByUsername: ${username}`)\n    return this.userRepository.findOne({ where: { username } })\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const theUser = await this.findById(id)\n\n    this.logger.log(`UserService updates User: ${id}`)\n\n    // https://stackoverflow.com/questions/47792808/typeorm-update-item-and-return-it\n    return this.userRepository.save({\n      ...theUser, // existing fields\n      ...updateUserDto // updated fields\n    })\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findById(id)\n\n    this.logger.log(`ExampleService deletes a User: ${id}`)\n\n    return this.userRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            cliConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            configOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            seedConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/seeds/example.seeder.ts\n            \n            class\n            ExampleSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/db/seeds/user.seeder.ts\n            \n            class\n            UserSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/example/dto/create-example.dto.ts\n            \n            class\n            CreateExampleDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/example/dto/update-example.dto.ts\n            \n            class\n            UpdateExampleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/entities/example.entity.ts\n            \n            entity\n            Example\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/example.controller.ts\n            \n            controller\n            ExampleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/example/example.service.ts\n            \n            injectable\n            ExampleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            argon2 : ^0.30.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.12\n        \n            typeorm-extension : ^2.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS API Template\n\n\n\nThis repo is a scaffolded / boilerplate implementation of NestJS and supporting modules.\nIt is a work-in-progress.\nThe purpose of this repo is to provide a straight-forward way to quickly stand up a RESTful API NestJS app, without having to install / configure the many packages that are useful for an average project.\nThis is not a turn-key API solution, but rather just a way to get started, quickly.\nStarting points for database connectivity, API endpoint generation, entity creation, data seeding, testing, authentication, etc. are available 'out-of-the-box'.\nExample code is provided in the src/example folder, which can be deleted once you are underway.\nIncludes\n\nNestJS\nSwagger / OpenAPI\nBasic logging\nCompodoc\n\n\nTypeORM\nPassport JS\nJWT Strategy\n\n\nPostgres connectivity\nTesting\nUnit testing\nE2E / endpoint testing\n\n\nAdditional packages\nargon2\ntypeorm-extention\nclass-validator\ncookie-parser\nhelmet\npg (postgres driver)\nuuid-ossp (postges extention to enable uuid support)\n@jest-mock/express (for testing. mocks request and result objects)\n\n\n\nLinks to more details\n\nInstallation and setup\nHow to use\nMigrations / Seeding\nTesting\nDocumentation\nDev notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExampleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : ISC\n        \n            Author : Matt Burnett mburnett@tutanota.de\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cliConfig   (src/.../cliConfig.ts)\n                        \n                        \n                            configOptions   (src/.../cliConfig.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            ENV   (src/.../cliConfig.ts)\n                        \n                        \n                            ENV   (src/.../seedConfig.ts)\n                        \n                        \n                            envFile   (src/.../cliConfig.ts)\n                        \n                        \n                            envFile   (src/.../seedConfig.ts)\n                        \n                        \n                            options   (src/.../seedConfig.ts)\n                        \n                        \n                            seedConfig   (src/.../seedConfig.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cliConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(configOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: true,\n  // don't update database here. use migration:run instead.\n  synchronize: false,\n  migrationsRun: false,\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  migrations: [__dirname + '/../db/migrations/*.{js,ts}'],\n  migrationsTableName: 'migrations',\n  // Postgres database hosting expects SSL, but localhost doesn't.\n  ssl: process.env.NODE_ENV === 'deployed' ? true : false\n  // subscribers: ['src/subscriber/**/*.ts']\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : !ENV ? '.env' : `.env.${ENV}`\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/seedConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : !ENV ? '.env' : `.env.${ENV}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  migrationsTableName: 'migrations',\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: false,\n  // don't update database here. use migration:run instead.\n  synchronize: false,\n  // name: 'default',\n  entities: ['src/**/**.entity{.ts,.js}'],\n  migrations: ['src/db/migrations/**/*{.ts,.js}'],\n  subscribers: ['src/subscriber/**/*{.ts,.js}'],\n  seeds: ['src/db/seeds/**/*{.ts,.js}'],\n  factories: ['src/db/factories/**/*{.ts,.js}'],\n  // Postgres database hosting expects SSL, but localhost doesn't.\n  ssl: process.env.NODE_ENV === 'deployed' ? true : false\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
