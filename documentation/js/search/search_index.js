var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.717,1,1.741]],["body/injectables/AccessTokenGuard.html",[0,1.211,1,2.942,2,1.89,3,0.403,4,0.459,5,0.35,6,3.825,7,0.553,8,0.03,9,1.005,10,3.825,11,2.683,12,1.745,13,1.745,14,1.745,15,1.613,16,1.745,17,0.459,18,0.02,19,2.44,20,3.825,21,0.025,22,0.025]],["title/injectables/AccessTokenStrategy.html",[0,0.717,23,1.914]],["body/injectables/AccessTokenStrategy.html",[0,1.048,2,1.501,3,0.32,4,0.365,5,0.278,7,0.567,8,0.03,9,0.798,11,2.131,17,0.365,18,0.016,19,1.938,21,0.022,22,0.022,23,2.797,24,2.651,25,0.561,26,1.556,27,3.989,28,1.938,29,3.038,30,3.535,31,1.048,32,3.627,33,1.82,34,1.231,35,0.903,36,1.682,37,4.761,38,4.911,39,3.627,40,3.989,41,1.185,42,1.938,43,3.038,44,3.038,45,2.651,46,2.362,47,2.139,48,3.038,49,1.332,50,1.629,51,3.627,52,1.938,53,2.131,54,3.038,55,3.038,56,3.038,57,3.038,58,3.627,59,1.386]],["title/controllers/AppController.html",[60,1.245,61,2.122]],["body/controllers/AppController.html",[3,0.288,4,0.328,5,0.25,7,0.587,8,0.031,9,0.977,12,1.248,13,1.248,14,1.248,15,1.154,16,1.248,17,0.328,18,0.014,21,0.02,22,0.02,25,0.505,26,1.451,31,0.718,41,1.067,49,1.242,52,2.695,53,3.179,59,1.928,60,1.928,61,2.891,62,1.352,63,2.735,64,4.534,65,1.154,66,3.265,67,2.126,68,2.126,69,2.126,70,2.126,71,1.467,72,3.192,73,2.735,74,2.466,75,3.265,76,3.265,77,3.265,78,3.265,79,3.265,80,2.126,81,2.387,82,2.735,83,3.265,84,2.735,85,3.265,86,2.126,87,3.265,88,3.265,89,2.735,90,3.265,91,2.735,92,3.265,93,2.387,94,3.265]],["title/modules/AppModule.html",[95,1.349,96,2.122]],["body/modules/AppModule.html",[3,0.27,4,0.307,5,0.234,7,0.611,8,0.031,9,0.672,12,1.168,13,1.168,14,1.168,15,1.08,16,1.168,17,0.307,18,0.014,21,0.019,22,0.019,30,3.092,42,1.633,47,1.373,61,3.172,62,1.756,72,3.058,73,2.56,95,1.756,96,4.138,97,1.495,98,1.906,99,2.56,100,2.56,101,2.56,102,3.361,103,3.361,104,3.247,105,2.492,106,1.795,107,1.633,108,3.056,109,2.762,110,2.492,111,3.056,112,2.234,113,1.633,114,3.056,115,3.056,116,2.56,117,3.056,118,3.056,119,1.265,120,2.56,121,2.56,122,2.234,123,2.56,124,2.56,125,3.554,126,3.056,127,1.99,128,1.795,129,1.495,130,1.99,131,3.056,132,2.56,133,3.056,134,1.495,135,3.056,136,3.056,137,3.056,138,1.795,139,3.056]],["title/injectables/AppService.html",[0,0.717,72,1.741]],["body/injectables/AppService.html",[0,1.077,2,1.566,3,0.334,4,0.38,5,0.29,7,0.492,8,0.03,9,0.832,17,0.38,18,0.017,21,0.022,22,0.022,25,0.585,26,1.6,28,2.9,30,3.187,31,1.262,35,0.831,41,1.236,42,2.022,49,1.369,59,1.446,64,4.806,65,1.336,72,2.616,132,3.169,140,3.169,141,1.87,142,3.966,143,4.545,144,4.033,145,4.894,146,3.782,147,4.894,148,3.782,149,2.765,150,1.566,151,3.782,152,3.782,153,3.169,154,3.169]],["title/controllers/AuthController.html",[60,1.245,155,2.122]],["body/controllers/AuthController.html",[1,1.458,3,0.241,4,0.274,5,0.209,7,0.584,8,0.031,9,0.6,12,1.043,13,1.043,14,1.043,15,0.964,16,1.043,17,0.274,18,0.012,21,0.018,22,0.018,25,0.422,26,1.28,31,1.101,33,1.913,34,1.294,35,0.85,36,1.768,41,1.636,47,1.226,52,1.458,59,1.75,60,1.043,62,1.13,65,1.768,67,1.777,68,3.699,69,1.777,70,1.777,71,1.226,74,2.24,81,1.995,84,3.28,86,3.45,127,1.777,128,1.603,129,1.334,130,1.777,155,2.55,156,2.286,157,1.995,158,3.28,159,2.862,160,3.28,161,3.28,162,2.286,163,2.94,164,2.729,165,2.862,166,2.729,167,2.729,168,2.729,169,2.729,170,2.729,171,2.729,172,2.729,173,2.286,174,2.478,175,3.915,176,2.729,177,1.995,178,1.995,179,1.995,180,1.777,181,2.729,182,2.286,183,1.603,184,2.286,185,2.286,186,2.729,187,2.729,188,2.729,189,2.729,190,2.729,191,2.729,192,2.729,193,2.729,194,2.729,195,2.729,196,2.286,197,1.915,198,2.286,199,2.729,200,2.3,201,2.729,202,2.729,203,1.995,204,2.729,205,2.729,206,2.729]],["title/classes/AuthDto.html",[18,0.014,163,1.914]],["body/classes/AuthDto.html",[3,0.375,4,0.427,5,0.325,7,0.427,8,0.03,17,0.427,18,0.023,21,0.024,22,0.024,25,0.657,31,1.158,35,0.894,49,1.674,50,2.571,65,1.86,141,2.012,163,3.093,207,1.907,208,3.556,209,3.362,210,4.411,211,4.245,212,4.245,213,3.362,214,3.727,215,2.076]],["title/modules/AuthModule.html",[95,1.349,102,1.914]],["body/modules/AuthModule.html",[3,0.295,4,0.336,5,0.256,7,0.604,8,0.03,9,0.735,12,1.277,13,1.277,14,1.277,15,1.181,16,1.277,17,0.336,18,0.015,21,0.021,22,0.021,23,3.453,47,2.026,62,1.867,74,2.874,95,1.867,97,1.634,98,2.026,102,3.737,104,3.141,105,2.649,106,1.963,107,1.786,109,2.936,110,2.649,116,2.799,127,2.936,128,2.649,129,2.205,130,2.936,155,3.323,184,2.799,216,2.799,217,3.341,218,2.799,219,3.453,220,3.341,221,3.341,222,2.442,223,3.341,224,3.341,225,3.341,226,2.442,227,4.509,228,2.442]],["title/injectables/AuthService.html",[0,0.717,74,1.593]],["body/injectables/AuthService.html",[0,0.614,2,0.723,3,0.154,4,0.176,5,0.134,7,0.489,8,0.031,9,0.384,17,0.176,18,0.008,21,0.013,22,0.013,25,0.27,26,0.912,28,1.491,30,2.859,31,1.112,33,1.932,34,1.307,35,0.858,36,1.786,41,1.591,42,0.934,47,0.785,48,2.338,49,1.725,50,1.954,59,1.772,74,1.365,80,2.269,127,1.138,128,1.026,129,0.854,130,1.138,134,2.909,150,1.801,158,2.338,159,2.04,160,2.338,161,2.338,162,2.338,163,2.338,165,2.04,173,2.338,174,1.954,182,1.464,183,1.026,185,1.464,197,2.669,198,3.885,200,3.206,209,1.026,222,1.277,229,1.464,230,2.79,231,2.79,232,2.79,233,1.747,234,2.268,235,4.867,236,1.747,237,2.79,238,1.747,239,2.908,240,2.79,241,1.747,242,1.747,243,2.79,244,1.747,245,2.79,246,1.747,247,1.747,248,1.817,249,2.79,250,1.747,251,1.747,252,1.747,253,1.747,254,1.817,255,2.79,256,2.187,257,3.484,258,2.79,259,3.092,260,1.747,261,1.747,262,4.349,263,2.79,264,1.747,265,1.464,266,0.854,267,1.464,268,1.464,269,4.637,270,1.747,271,1.747,272,1.747,273,3.484,274,1.747,275,1.747,276,2.79,277,1.747,278,1.747,279,1.747,280,1.747,281,2.79,282,2.79,283,2.79,284,2.79,285,1.747,286,1.747,287,2.79,288,1.747,289,2.79,290,1.747,291,2.79,292,2.338,293,1.747,294,2.79,295,1.747,296,1.747,297,1.747,298,1.747,299,2.79,300,2.79,301,2.79,302,2.79,303,1.747]],["title/classes/CreateExampleDto.html",[18,0.014,304,1.741]],["body/classes/CreateExampleDto.html",[3,0.284,4,0.323,5,0.246,7,0.323,8,0.03,17,0.323,18,0.019,21,0.02,22,0.02,25,0.497,31,1.308,34,1.293,35,1.01,36,2.233,49,1.693,65,2.101,141,1.677,207,1.442,213,2.578,214,3.872,215,1.57,304,2.345,305,5.071,306,2.347,307,3.255,308,2.246,309,4.188,310,4.999,311,4.188,312,4.188,313,3.21,314,2.69,315,3.21,316,4.502,317,5.626,318,3.21,319,3.21,320,3.21,321,3.207,322,4.999,323,3.21,324,3.21,325,2.578]],["title/classes/CreateUserDto.html",[18,0.014,174,1.464]],["body/classes/CreateUserDto.html",[3,0.304,4,0.346,5,0.263,7,0.346,8,0.03,17,0.346,18,0.02,21,0.021,22,0.021,25,0.532,31,1.305,34,1.339,35,1.007,49,1.788,50,2.327,65,2.095,141,1.758,174,2.066,200,3.043,207,1.546,209,3.043,210,4.34,213,3.385,214,3.861,215,1.683,308,2.327,314,2.883,325,2.702,326,5.072,327,2.516,328,4.34,329,5.18,330,3.441,331,3.441,332,3.441,333,3.441,334,3.441,335,3.441]],["title/entities/Example.html",[266,1.593,336,1.464]],["body/entities/Example.html",[3,0.288,4,0.328,5,0.25,7,0.446,8,0.03,17,0.328,18,0.02,21,0.02,22,0.02,25,0.505,31,1.314,35,1.014,49,1.633,65,2.11,119,1.352,138,3.179,141,1.697,215,1.597,266,2.171,307,3.284,308,2.266,309,4.225,311,4.225,312,4.225,316,3.719,321,3.245,325,2.608,336,1.994,337,1.597,338,2.735,339,4.225,340,4.225,341,3.956,342,4.225,343,3.265,344,5.004,345,3.265,346,3.265,347,3.265,348,3.265,349,3.265,350,3.265,351,2.735,352,3.265,353,4.225,354,3.265,355,2.735,356,2.735,357,2.735,358,1.918]],["title/controllers/ExampleController.html",[60,1.245,359,2.122]],["body/controllers/ExampleController.html",[1,1.352,3,0.223,4,0.254,5,0.194,7,0.54,8,0.031,9,0.557,12,0.967,13,0.967,14,0.967,15,0.894,16,0.967,17,0.254,18,0.011,21,0.017,22,0.017,25,0.391,26,1.212,31,1.182,33,1.846,34,1.249,35,0.82,36,1.707,41,1.756,49,1.674,52,1.352,53,1.486,59,2.053,60,0.967,62,1.047,65,1.898,67,2.857,69,1.647,70,1.647,71,1.137,89,2.12,150,1.999,157,1.849,177,2.709,179,1.849,203,1.849,304,2.871,307,1.647,308,2.414,336,1.665,359,2.414,360,2.12,361,1.665,362,3.145,363,3.105,364,4.046,365,2.414,366,2.577,367,2.12,368,2.53,369,2.53,370,2.12,371,3.105,372,2.53,373,2.53,374,2.53,375,1.647,376,3.105,377,2.53,378,1.647,379,4.83,380,2.838,381,3.105,382,2.53,383,2.12,384,2.12,385,1.849,386,4.046,387,2.345,388,2.12,389,1.647,390,2.709,391,1.647,392,2.53,393,2.53,394,3.105,395,2.53,396,2.12,397,2.12,398,2.53,399,2.53,400,2.53,401,2.53,402,2.53,403,2.12,404,2.53,405,2.12,406,2.53]],["title/modules/ExampleModule.html",[95,1.349,103,1.914]],["body/modules/ExampleModule.html",[3,0.356,4,0.406,5,0.309,7,0.609,8,0.03,9,0.888,17,0.406,18,0.018,21,0.023,22,0.023,62,2.112,95,2.112,97,1.973,98,2.292,103,3.637,105,2.997,106,2.371,107,2.157,109,3.322,110,2.371,112,2.95,113,2.157,336,1.813,359,3.642,387,3.308,388,3.381,407,3.381,408,3.381,409,4.035,410,4.035,411,3.381,412,4.035]],["title/classes/ExampleSeeder.html",[18,0.014,413,2.382]],["body/classes/ExampleSeeder.html",[3,0.327,4,0.372,5,0.283,7,0.539,8,0.03,17,0.372,18,0.016,21,0.022,22,0.022,25,0.572,26,1.576,31,0.814,33,1.413,34,0.956,35,0.628,36,1.306,41,1.208,119,1.996,134,2.624,142,3.922,197,2.358,207,1.661,248,3.14,259,2.577,336,1.661,337,1.808,358,2.172,413,3.525,414,3.097,415,4.04,416,4.495,417,3.494,418,3.097,419,4.421,420,4.495,421,4.764,422,3.697,423,2.172,424,3.697,425,3.697,426,3.697,427,4.04,428,3.697,429,3.097,430,3.097,431,3.097,432,2.407,433,3.697]],["title/injectables/ExampleService.html",[0,0.717,387,1.741]],["body/injectables/ExampleService.html",[0,0.779,2,0.984,3,0.21,4,0.239,5,0.182,7,0.528,8,0.031,9,0.523,17,0.239,18,0.011,21,0.016,22,0.016,25,0.368,26,1.157,28,1.892,31,1.23,33,1.915,34,1.296,35,0.892,36,1.771,41,1.717,49,1.651,59,2.008,80,1.548,93,1.738,113,1.271,119,0.984,134,2.569,141,1.353,144,3.544,149,1.738,150,1.466,197,2.069,226,1.738,239,2.588,259,1.892,304,2.678,308,2.251,336,2.251,361,1.591,362,3.052,363,2.966,364,3.926,365,2.306,366,2.08,367,2.966,370,2.966,375,2.306,378,2.306,380,3.197,387,2.261,389,1.548,390,2.588,391,1.548,411,1.992,434,1.992,435,2.378,436,3.926,437,3.54,438,3.54,439,2.378,440,2.378,441,2.378,442,2.378,443,2.378,444,2.378,445,1.992,446,2.378,447,1.992,448,2.378,449,2.378,450,2.378,451,1.738,452,2.378,453,2.378,454,2.378,455,2.378,456,3.54,457,1.992,458,2.378,459,1.992,460,2.378,461,2.378,462,2.378,463,2.378,464,2.378,465,2.378,466,2.378,467,2.378,468,2.378,469,2.378,470,2.378,471,2.378,472,2.966,473,1.992,474,2.378,475,1.992,476,1.992,477,2.378]],["title/injectables/RefreshTokenGuard.html",[0,0.717,180,2.122]],["body/injectables/RefreshTokenGuard.html",[0,1.208,2,1.883,3,0.402,4,0.457,5,0.348,7,0.552,8,0.03,9,1.001,10,3.81,11,2.672,12,1.738,13,1.738,14,1.738,15,1.607,16,1.738,17,0.457,18,0.02,19,2.431,20,3.81,21,0.025,22,0.025,129,2.224,180,3.576,478,3.81]],["title/injectables/RefreshTokenStrategy.html",[0,0.717,219,1.914]],["body/injectables/RefreshTokenStrategy.html",[0,1.024,2,1.451,3,0.31,4,0.352,5,0.268,7,0.583,8,0.031,9,0.771,11,2.059,17,0.352,18,0.016,19,1.873,21,0.021,22,0.021,25,0.542,26,1.522,27,3.9,28,1.873,29,2.936,30,3.501,31,1.024,33,1.779,34,1.204,35,0.791,36,1.645,40,4.666,41,1.146,42,1.873,43,3.9,44,2.936,45,3.403,46,2.282,47,2.092,52,1.873,53,2.059,54,2.936,55,2.936,56,2.936,57,2.936,59,1.34,68,3.627,86,2.282,129,1.714,138,2.059,178,2.562,197,1.714,200,2.735,219,2.735,479,2.936,480,3.505,481,4.655,482,3.505,483,3.505,484,3.505,485,3.505,486,3.505]],["title/classes/UpdateExampleDto.html",[18,0.014,380,1.914]],["body/classes/UpdateExampleDto.html",[3,0.413,4,0.47,5,0.358,7,0.562,8,0.03,17,0.47,18,0.021,19,2.5,21,0.026,22,0.026,71,2.102,207,2.102,304,2.5,306,3.419,361,2.102,380,3.281,390,3.419,487,3.919,488,3.919,489,4.678]],["title/classes/UpdateUserDto.html",[18,0.014,490,1.914]],["body/classes/UpdateUserDto.html",[3,0.413,4,0.47,5,0.358,7,0.562,8,0.03,17,0.47,18,0.021,19,2.5,21,0.026,22,0.026,71,2.102,174,2.102,183,2.748,207,2.102,327,3.419,361,2.102,488,3.919,490,3.281,491,3.919,492,4.678]],["title/entities/User.html",[256,1.464,266,1.593]],["body/entities/User.html",[3,0.23,4,0.261,5,0.199,7,0.448,8,0.03,15,0.918,17,0.261,18,0.017,21,0.017,22,0.017,25,0.402,31,1.262,34,1.152,35,0.974,49,1.702,50,2.002,65,2.026,119,1.076,134,1.271,138,3.288,141,1.445,200,2.617,209,2.874,213,3.053,214,3.385,215,1.271,226,1.9,254,1.692,256,1.698,259,1.389,265,3.167,266,1.849,308,2.002,325,2.221,328,3.732,337,1.271,339,3.732,340,3.732,341,3.576,342,3.732,344,4.544,351,3.732,353,3.732,355,2.177,356,2.177,357,4.689,361,1.168,366,1.527,417,1.692,423,1.527,493,2.177,494,2.599,495,3.78,496,2.599,497,2.599,498,2.599,499,2.599,500,4.455,501,2.599,502,2.599,503,2.599,504,2.599,505,2.599,506,3.78,507,3.78,508,2.177,509,2.177,510,2.177,511,1.9,512,2.599,513,2.177,514,2.177,515,2.177,516,2.599,517,2.599,518,2.177,519,2.599,520,2.599,521,2.177,522,2.599,523,2.599,524,2.599,525,3.732,526,3.78]],["title/classes/UserSeeder.html",[18,0.014,527,2.382]],["body/classes/UserSeeder.html",[3,0.327,4,0.372,5,0.283,7,0.539,8,0.03,17,0.372,18,0.016,21,0.022,22,0.022,25,0.572,26,1.576,31,0.814,33,1.413,34,0.956,35,0.628,36,1.306,41,1.208,119,1.996,134,2.624,142,3.922,197,2.358,207,1.661,248,3.14,256,1.661,259,2.577,337,1.808,358,2.172,415,4.04,416,4.495,417,3.494,418,3.097,419,4.421,420,4.495,421,4.764,423,2.172,427,4.04,429,3.097,430,3.097,431,3.097,432,2.407,527,3.525,528,3.097,529,3.697,530,3.697,531,3.697,532,3.697,533,3.697,534,3.697]],["title/controllers/UsersController.html",[60,1.245,535,2.122]],["body/controllers/UsersController.html",[1,1.349,3,0.223,4,0.254,5,0.193,7,0.54,8,0.031,9,0.555,12,0.965,13,0.965,14,0.965,15,0.892,16,0.965,17,0.254,18,0.011,21,0.017,22,0.017,25,0.39,26,1.21,31,1.181,33,1.963,34,1.328,35,0.872,36,1.815,41,1.755,49,1.692,50,1.663,52,1.349,53,1.483,59,2.052,60,0.965,62,1.045,65,1.897,67,2.41,69,1.644,70,1.644,71,1.134,150,1.814,157,1.845,174,2.412,177,2.705,179,1.845,183,2.174,203,2.705,234,2.143,268,2.115,308,2.412,361,1.663,362,3.142,365,2.41,366,2.574,371,3.1,375,1.644,376,2.115,378,1.644,381,2.115,383,2.115,384,2.115,385,1.845,386,4.042,389,1.644,391,1.644,394,3.1,397,2.115,403,2.115,405,2.115,490,3.342,535,2.41,536,2.115,537,2.115,538,3.1,539,3.1,540,2.115,541,2.524,542,2.524,543,2.524,544,2.115,545,2.524,546,2.115,547,3.7,548,2.524,549,2.524,550,2.524,551,2.524,552,2.524,553,2.115,554,2.524,555,2.524,556,2.524,557,2.524,558,2.524,559,2.524,560,2.524,561,2.524,562,2.524]],["title/modules/UsersModule.html",[95,1.349,104,1.741]],["body/modules/UsersModule.html",[3,0.335,4,0.382,5,0.291,7,0.598,8,0.03,9,0.835,12,1.45,13,1.45,14,1.45,15,1.341,16,1.45,17,0.382,18,0.017,21,0.022,22,0.022,62,2.03,95,2.03,97,1.856,98,2.203,104,3.313,105,2.881,106,2.229,107,2.028,109,3.194,110,2.229,112,2.774,113,2.028,234,3.171,256,1.705,535,3.538,553,3.179,563,3.179,564,3.179,565,3.179,566,3.795,567,4.904,568,3.179,569,3.795,570,3.795]],["title/injectables/UsersService.html",[0,0.717,234,1.593]],["body/injectables/UsersService.html",[0,0.745,2,0.927,3,0.198,4,0.225,5,0.171,7,0.516,8,0.031,9,0.493,17,0.225,18,0.01,21,0.015,22,0.015,25,0.346,26,1.106,28,1.808,31,1.208,33,1.963,34,1.328,35,0.906,36,1.815,41,1.679,49,1.65,50,1.833,59,2.038,80,1.458,113,1.196,119,0.927,134,3.035,141,1.293,144,3.473,149,1.636,150,1.401,174,2.194,183,1.988,197,1.995,234,1.655,239,2.473,248,3.576,256,2.043,259,1.808,267,1.875,308,2.396,361,1.52,362,3.18,365,2.203,366,2.397,375,2.203,378,2.203,389,1.458,391,1.458,436,3.81,445,1.875,451,1.636,472,1.875,473,1.875,475,1.875,476,1.875,490,3.226,538,3.418,539,3.418,540,2.835,544,2.835,546,2.835,568,1.875,571,1.875,572,2.238,573,3.384,574,3.384,575,2.238,576,2.238,577,2.238,578,2.238,579,2.238,580,2.238,581,2.238,582,2.238,583,4.883,584,2.238,585,2.238,586,2.238,587,3.384,588,3.384,589,3.384,590,2.238,591,2.238,592,2.238,593,1.875,594,3.384,595,2.238,596,2.238]],["title/coverage.html",[597,3.713]],["body/coverage.html",[0,1.309,1,1.595,5,0.228,6,2.5,8,0.03,18,0.026,21,0.019,22,0.019,23,1.753,24,2.182,35,0.507,60,1.991,61,1.943,63,2.5,72,1.595,74,1.459,140,2.5,150,1.236,155,1.943,156,2.5,163,1.753,174,1.341,180,1.943,208,2.5,219,1.753,228,2.182,229,2.5,234,1.459,256,1.341,266,2.04,304,1.595,305,2.5,306,3.05,326,2.5,327,3.05,336,1.341,338,2.5,359,1.943,360,2.5,380,1.753,387,1.595,413,2.182,414,2.5,434,2.5,478,2.5,479,2.5,487,2.5,490,1.753,491,2.5,493,2.5,527,2.182,528,2.5,535,1.943,536,2.5,571,2.5,597,2.5,598,2.5,599,2.984,600,2.984,601,6.582,602,4.81,603,4.172,604,4.81,605,4.81,606,6.121,607,2.5,608,4.81,609,2.5,610,3.495,611,2.182,612,2.984,613,4.81,614,2.5,615,2.984,616,2.5,617,2.984,618,2.984]],["title/dependencies.html",[98,1.759,619,1.994]],["body/dependencies.html",[8,0.031,9,0.861,11,2.298,18,0.022,21,0.023,22,0.023,42,2.091,46,3.256,47,1.757,71,1.757,98,1.757,113,2.091,119,2.07,178,3.655,215,1.913,222,2.859,254,2.547,423,2.298,620,5.512,621,3.911,622,3.911,623,3.911,624,3.911,625,3.911,626,3.911,627,3.911,628,3.911,629,3.911,630,3.911,631,3.911,632,3.277,633,3.277,634,3.911,635,3.911,636,3.911,637,3.277,638,3.911,639,3.911,640,3.911,641,3.277,642,3.911,643,3.911,644,3.911,645,3.911,646,3.911,647,3.911,648,3.911,649,3.911]],["title/miscellaneous/functions.html",[650,1.458,651,3.28]],["body/miscellaneous/functions.html",[8,0.027,21,0.027,22,0.027,25,0.774,614,4.193,616,5.146,650,2.675,651,4.193,652,5.005]],["title/index.html",[25,0.422,653,2.285,654,2.285]],["body/index.html",[3,0.207,5,0.179,8,0.028,12,0.385,13,0.385,14,0.385,15,0.621,16,0.385,18,0.01,21,0.008,22,0.008,34,0.26,35,0.476,45,1.284,46,1.523,47,1.26,49,0.281,60,0.385,65,0.827,68,0.655,71,0.452,81,2.326,82,2.349,86,0.655,91,1.472,93,0.735,95,0.727,98,1.051,107,1.701,110,1.032,119,1.975,120,0.843,121,0.843,122,2.049,123,3.51,124,0.843,125,1.472,128,1.032,129,0.492,143,1.96,144,0.655,150,1.317,153,0.843,154,0.843,159,0.735,165,1.71,196,1.96,213,0.591,215,1.144,254,0.655,256,1.43,266,1.371,292,1.472,321,0.735,325,0.591,336,1.882,337,0.492,341,0.735,358,1.032,361,1.691,385,0.735,396,0.843,417,2.728,423,1.374,432,3.027,447,2.349,451,1.284,457,1.96,459,1.96,508,0.843,509,1.472,510,0.843,511,2.557,513,0.843,514,1.96,515,0.843,518,0.843,521,1.472,537,0.843,593,0.843,598,1.96,611,1.284,619,0.735,632,0.843,633,0.843,637,0.843,641,0.843,653,0.843,654,1.472,655,2.803,656,2.339,657,3.498,658,1.006,659,1.006,660,1.006,661,1.006,662,1.757,663,1.006,664,1.006,665,1.757,666,1.006,667,2.803,668,1.006,669,3.182,670,1.006,671,1.006,672,2.339,673,1.006,674,1.006,675,1.757,676,1.006,677,1.006,678,3.498,679,1.757,680,2.339,681,1.757,682,1.757,683,1.006,684,1.757,685,2.803,686,1.006,687,1.006,688,2.803,689,4.362,690,2.803,691,1.757,692,3.992,693,3.182,694,1.757,695,3.498,696,1.006,697,2.339,698,1.757,699,1.006,700,2.803,701,2.339,702,2.803,703,2.349,704,2.339,705,1.006,706,1.006,707,1.006,708,1.757,709,1.006,710,1.757,711,1.006,712,1.006,713,1.006,714,1.006,715,1.006,716,1.006,717,1.006,718,1.006,719,1.757,720,1.006,721,1.006,722,1.757,723,1.006,724,1.006,725,1.757,726,2.339,727,1.006,728,4.362,729,1.006,730,1.757,731,1.757,732,1.006,733,1.006,734,2.803,735,1.006,736,1.757,737,1.006,738,1.006,739,1.757,740,1.006,741,1.006,742,1.006,743,1.006,744,3.498,745,3.498,746,1.006,747,1.472,748,1.006,749,1.006,750,1.006,751,1.006,752,1.006,753,1.006,754,1.006,755,1.006,756,1.006,757,1.006,758,1.006,759,3.764,760,1.006,761,1.006,762,2.349,763,2.339,764,1.006,765,1.006,766,0.843,767,1.006,768,4.189,769,2.803,770,2.803,771,3.764,772,1.006,773,2.339,774,2.339,775,2.339,776,1.006,777,2.339,778,1.006,779,1.757,780,1.006,781,1.006,782,2.339,783,1.757,784,2.803,785,1.006,786,1.757,787,1.006,788,1.006,789,1.006,790,1.006,791,2.803,792,2.339,793,0.843,794,2.803,795,1.006,796,1.006,797,1.006,798,1.006,799,1.006,800,1.006,801,1.757,802,1.006,803,1.006,804,1.006,805,1.006,806,0.735,807,1.757,808,1.757,809,1.006,810,1.006,811,1.006,812,2.339,813,1.757,814,1.006,815,2.803,816,1.006,817,2.666,818,1.006,819,1.006,820,1.757,821,1.006,822,1.006,823,1.006,824,1.006,825,1.006,826,1.006,827,3.764,828,1.757,829,1.006,830,1.006,831,2.339,832,0.843,833,1.757,834,1.006,835,1.006,836,2.803,837,0.843,838,2.339,839,1.006,840,2.666,841,1.757,842,1.757,843,1.006,844,3.992,845,1.757,846,1.006,847,1.006,848,1.006,849,1.006,850,1.96,851,2.339,852,1.006,853,1.006,854,2.803,855,1.006,856,0.843,857,1.006,858,1.006,859,1.006,860,1.006,861,1.006,862,1.006,863,1.006,864,1.006,865,0.843,866,2.339,867,1.006,868,1.006,869,1.757,870,1.006,871,1.757,872,2.339,873,1.006,874,1.006,875,2.803,876,1.006,877,1.006,878,2.339,879,1.757,880,1.006,881,1.006,882,1.006,883,1.006,884,1.006,885,1.006,886,1.006,887,1.006,888,1.757,889,1.006,890,1.006,891,1.006,892,1.006,893,1.006,894,1.006,895,1.006,896,1.006,897,1.757,898,1.006,899,1.006,900,1.006,901,1.006,902,1.006,903,1.006,904,1.757,905,1.006,906,1.006,907,1.006,908,1.006,909,1.757,910,1.757,911,1.006,912,1.006,913,1.757,914,1.006,915,1.006,916,1.006,917,1.006,918,1.006,919,1.006,920,1.006,921,1.757,922,1.006,923,1.006,924,1.006,925,1.006,926,1.006,927,1.006,928,1.006,929,1.006,930,1.006,931,1.006,932,1.006,933,1.006,934,1.006,935,1.006,936,1.006,937,1.006,938,1.006,939,1.006,940,1.006,941,1.006,942,1.006,943,1.006,944,1.006,945,1.006,946,1.006,947,1.006,948,1.006,949,1.006,950,1.757,951,1.006,952,1.006,953,1.006,954,2.339,955,1.006,956,1.006,957,1.006,958,1.757,959,0.843,960,2.803,961,3.182,962,1.006,963,1.006,964,1.006,965,1.006,966,1.006,967,1.006,968,1.006,969,1.006,970,1.006,971,1.006,972,1.006,973,1.006,974,1.757,975,1.757,976,2.803,977,1.472,978,2.339,979,1.006,980,1.006,981,1.006,982,1.006,983,1.006,984,1.006,985,1.006,986,1.006,987,1.006,988,1.006,989,1.006,990,1.006,991,1.006,992,1.006,993,1.006,994,1.006,995,1.006,996,1.006,997,1.006,998,1.006,999,1.006,1000,1.006,1001,1.006,1002,1.006,1003,1.006,1004,1.006,1005,1.006,1006,1.006,1007,1.006,1008,1.006,1009,1.006,1010,1.757,1011,1.006,1012,1.006,1013,1.006,1014,1.006,1015,1.006,1016,1.006,1017,1.006,1018,1.757,1019,1.757,1020,1.006,1021,1.006,1022,1.006,1023,1.006,1024,1.757,1025,1.757,1026,1.006,1027,1.006,1028,1.006,1029,1.006,1030,1.006,1031,1.006,1032,1.006,1033,1.006,1034,1.006,1035,1.006,1036,1.006,1037,1.006]],["title/modules.html",[97,2.168]],["body/modules.html",[8,0.026,21,0.026,22,0.026,96,3.084,97,2.316,102,2.782,103,2.782,104,2.531,1038,6.21,1039,6.21,1040,6.21,1041,6.21]],["title/overview.html",[806,3.24]],["body/overview.html",[2,1.492,8,0.03,21,0.022,22,0.022,23,3.114,62,1.492,72,2.832,74,2.592,96,4.191,97,1.762,98,2.131,99,3.019,100,3.019,101,3.019,102,3.756,103,3.437,104,3.321,105,2.786,106,2.117,107,1.926,207,1.619,216,3.019,218,3.019,219,3.114,234,2.994,337,1.762,387,2.832,407,3.019,408,3.019,563,3.019,564,3.019,565,3.019,806,2.634,1042,4.742,1043,3.604,1044,3.604,1045,3.604]],["title/properties.html",[141,1.496,619,1.994]],["body/properties.html",[8,0.03,21,0.026,22,0.026,141,1.864,307,3.176,837,4.086,1046,4.877,1047,4.877,1048,4.877,1049,4.877,1050,4.877,1051,4.877,1052,4.877]],["title/miscellaneous/typealiases.html",[650,1.458,1053,3.915]],["body/miscellaneous/typealiases.html",[8,0.026,21,0.026,22,0.026,24,3.627,25,0.768,35,0.982,38,4.845,650,2.652,1054,4.961,1055,4.961,1056,4.961]],["title/miscellaneous/variables.html",[650,1.458,1057,3.28]],["body/miscellaneous/variables.html",[8,0.03,21,0.02,22,0.02,25,0.498,34,1.137,35,0.747,50,1.975,122,2.353,138,1.891,150,1.82,209,2.583,228,3.214,337,2.631,358,3.161,419,2.353,432,3.503,511,3.214,525,4.507,607,2.697,609,3.683,610,2.697,611,3.214,650,1.721,703,3.683,747,2.697,762,4.194,766,2.697,793,2.697,817,2.697,832,3.683,840,2.697,850,4.507,856,2.697,865,2.697,959,2.697,977,2.697,1057,2.697,1058,4.396,1059,3.219,1060,3.219,1061,3.219,1062,4.396,1063,4.396,1064,4.396,1065,3.219,1066,3.219,1067,3.219,1068,3.219,1069,4.396,1070,3.219,1071,3.219,1072,3.219,1073,3.219,1074,4.396,1075,3.219,1076,3.219,1077,3.219,1078,3.219,1079,3.219,1080,3.219,1081,3.219,1082,3.219,1083,3.219,1084,5.006,1085,3.219,1086,3.219,1087,3.219,1088,3.219,1089,3.219,1090,3.219,1091,3.219,1092,3.219,1093,3.219,1094,3.219,1095,3.219,1096,3.219,1097,3.219]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1046,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["0.3.x",{"_index":838,"title":{},"body":{"index.html":{}}}],["0.3.xyarn",{"_index":943,"title":{},"body":{"index.html":{}}}],["0.30.3",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["1.17.3",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.2",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["15m",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":1043,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["2.5.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":533,"title":{},"body":{"classes/UserSeeder.html":{}}}],["4",{"_index":1042,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":428,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["6.0.1",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1045,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":1044,"title":{},"body":{"overview.html":{}}}],["8.9.0",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":833,"title":{},"body":{"index.html":{}}}],["__dirname",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":914,"title":{},"body":{"index.html":{}}}],["absolute",{"_index":892,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":23,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accurate",{"_index":849,"title":{},"body":{"index.html":{}}}],["actual",{"_index":985,"title":{},"body":{"index.html":{}}}],["add",{"_index":1013,"title":{},"body":{"index.html":{}}}],["adding",{"_index":913,"title":{},"body":{"index.html":{}}}],["additional",{"_index":708,"title":{},"body":{"index.html":{}}}],["admin",{"_index":1027,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1054,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["always",{"_index":996,"title":{},"body":{"index.html":{}}}],["amigrationnamereturns",{"_index":946,"title":{},"body":{"index.html":{}}}],["api",{"_index":655,"title":{},"body":{"index.html":{}}}],["api_port",{"_index":748,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":394,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apibadrequestresponse()@post",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('example",{"_index":392,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags('root",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":669,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app.e2e",{"_index":960,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":61,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":906,"title":{},"body":{"index.html":{}}}],["application",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":72,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["argon2.hash(data",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify(user.password",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["attach",{"_index":1000,"title":{},"body":{"index.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.e2e",{"_index":998,"title":{},"body":{"index.html":{}}}],["auth.guard",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.service",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_prev/auth.service",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["auth_prev/jwr",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":155,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":163,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authentication",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":102,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1049,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":74,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automock",{"_index":1034,"title":{},"body":{"index.html":{}}}],["available",{"_index":690,"title":{},"body":{"index.html":{}}}],["average",{"_index":677,"title":{},"body":{"index.html":{}}}],["await",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["aware",{"_index":1012,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('password",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":908,"title":{},"body":{"index.html":{}}}],["basic",{"_index":702,"title":{},"body":{"index.html":{}}}],["basically",{"_index":924,"title":{},"body":{"index.html":{}}}],["basis",{"_index":886,"title":{},"body":{"index.html":{}}}],["before",{"_index":518,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["beforeeach",{"_index":981,"title":{},"body":{"index.html":{}}}],["beforeinsert",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["being",{"_index":935,"title":{},"body":{"index.html":{}}}],["below",{"_index":776,"title":{},"body":{"index.html":{}}}],["better",{"_index":875,"title":{},"body":{"index.html":{}}}],["block",{"_index":905,"title":{},"body":{"index.html":{}}}],["body",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":316,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["bootstrap",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bottom",{"_index":789,"title":{},"body":{"index.html":{}}}],["box",{"_index":691,"title":{},"body":{"index.html":{}}}],["breaks",{"_index":839,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1041,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1038,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":856,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["build",{"_index":790,"title":{},"body":{"index.html":{}}}],["burnett",{"_index":1051,"title":{},"body":{"properties.html":{}}}],["cache",{"_index":1032,"title":{},"body":{"index.html":{}}}],["called",{"_index":802,"title":{},"body":{"index.html":{}}}],["can't",{"_index":1004,"title":{},"body":{"index.html":{}}}],["cant",{"_index":965,"title":{},"body":{"index.html":{}}}],["case",{"_index":995,"title":{},"body":{"index.html":{}}}],["casl",{"_index":1015,"title":{},"body":{"index.html":{}}}],["cat",{"_index":973,"title":{},"body":{"index.html":{}}}],["cd",{"_index":721,"title":{},"body":{"index.html":{}}}],["change",{"_index":719,"title":{},"body":{"index.html":{}}}],["changes",{"_index":769,"title":{},"body":{"index.html":{}}}],["check",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":18,"title":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":207,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{},"overview.html":{}}}],["clean",{"_index":1017,"title":{},"body":{"index.html":{}}}],["cleaner",{"_index":458,"title":{},"body":{"injectables/ExampleService.html":{}}}],["cli",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cliconfig",{"_index":611,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":722,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_examplemodule",{"_index":407,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_providers",{"_index":408,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":563,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":565,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":564,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["code",{"_index":692,"title":{},"body":{"index.html":{}}}],["column",{"_index":344,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({default",{"_index":348,"title":{},"body":{"entities/Example.html":{}}}],["column({nullable",{"_index":351,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({unique",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["comm_test",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["command",{"_index":879,"title":{},"body":{"index.html":{}}}],["commit",{"_index":1026,"title":{},"body":{"index.html":{}}}],["common/guards/accesstoken.guard",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["compodoc",{"_index":704,"title":{},"body":{"index.html":{}}}],["concepts",{"_index":874,"title":{},"body":{"index.html":{}}}],["config",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["config/dbconfig",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('database",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":483,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configuration",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["configure",{"_index":673,"title":{},"body":{"index.html":{}}}],["confusing",{"_index":869,"title":{},"body":{"index.html":{}}}],["connect",{"_index":735,"title":{},"body":{"index.html":{}}}],["connection",{"_index":740,"title":{},"body":{"index.html":{}}}],["connectionsource",{"_index":609,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["connectivity",{"_index":684,"title":{},"body":{"index.html":{}}}],["console.log('req.user",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(require('crypto').randombytes(64).tostring('base64'));\"if",{"_index":767,"title":{},"body":{"index.html":{}}}],["const",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(examplerepository",{"_index":435,"title":{},"body":{"injectables/ExampleService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('example",{"_index":393,"title":{},"body":{"controllers/ExampleController.html":{}}}],["controller('users",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":632,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["coverage",{"_index":597,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":732,"title":{},"body":{"index.html":{}}}],["create",{"_index":361,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(@body",{"_index":397,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["create(createexampledto",{"_index":367,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["create(createuserdto",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":451,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["created_at",{"_index":339,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":342,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createexampledto",{"_index":304,"title":{"classes/CreateExampleDto.html":{}},"body":{"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["creates",{"_index":883,"title":{},"body":{"index.html":{}}}],["createuserdto",{"_index":174,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":396,"title":{},"body":{"controllers/ExampleController.html":{},"index.html":{}}}],["creation",{"_index":687,"title":{},"body":{"index.html":{}}}],["currently",{"_index":835,"title":{},"body":{"index.html":{}}}],["d",{"_index":944,"title":{},"body":{"index.html":{}}}],["data",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["data.password",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["data/database",{"_index":931,"title":{},"body":{"index.html":{}}}],["database",{"_index":432,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":419,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/variables.html":{}}}],["datasource(options",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":341,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{},"index.html":{}}}],["dateyarn",{"_index":846,"title":{},"body":{"index.html":{}}}],["db_database_name",{"_index":754,"title":{},"body":{"index.html":{}}}],["db_host",{"_index":750,"title":{},"body":{"index.html":{}}}],["db_passord",{"_index":753,"title":{},"body":{"index.html":{}}}],["db_port",{"_index":751,"title":{},"body":{"index.html":{}}}],["db_type",{"_index":749,"title":{},"body":{"index.html":{}}}],["db_user_name",{"_index":752,"title":{},"body":{"index.html":{}}}],["dbconfig",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["decoupling",{"_index":867,"title":{},"body":{"index.html":{}}}],["default",{"_index":358,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":901,"title":{},"body":{"index.html":{}}}],["delete",{"_index":385,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete('/id/:id",{"_index":376,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":696,"title":{},"body":{"index.html":{}}}],["deletes",{"_index":476,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depending",{"_index":919,"title":{},"body":{"index.html":{}}}],["depends",{"_index":866,"title":{},"body":{"index.html":{}}}],["description",{"_index":307,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"properties.html":{}}}],["detailed",{"_index":993,"title":{},"body":{"index.html":{}}}],["dev",{"_index":745,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["displayed",{"_index":788,"title":{},"body":{"index.html":{}}}],["dist/src/migrations/*.{js,ts",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":987,"title":{},"body":{"index.html":{}}}],["docs",{"_index":784,"title":{},"body":{"index.html":{}}}],["docs:create",{"_index":847,"title":{},"body":{"index.html":{}}}],["docs:createand",{"_index":880,"title":{},"body":{"index.html":{}}}],["document",{"_index":775,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":598,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":854,"title":{},"body":{"index.html":{}}}],["don't",{"_index":723,"title":{},"body":{"index.html":{}}}],["done",{"_index":816,"title":{},"body":{"index.html":{}}}],["driver",{"_index":710,"title":{},"body":{"index.html":{}}}],["dropping",{"_index":934,"title":{},"body":{"index.html":{}}}],["dto",{"_index":842,"title":{},"body":{"index.html":{}}}],["dto/auth.dto",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":389,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":391,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["due",{"_index":966,"title":{},"body":{"index.html":{}}}],["during",{"_index":896,"title":{},"body":{"index.html":{}}}],["e",{"_index":766,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":707,"title":{},"body":{"index.html":{}}}],["edge",{"_index":994,"title":{},"body":{"index.html":{}}}],["elastic",{"_index":1036,"title":{},"body":{"index.html":{}}}],["email",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["empty",{"_index":904,"title":{},"body":{"index.html":{}}}],["end",{"_index":725,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":685,"title":{},"body":{"index.html":{}}}],["entities",{"_index":337,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/**/*.ts",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/*.entity.{js,ts",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/example.entity",{"_index":411,"title":{},"body":{"modules/ExampleModule.html":{},"injectables/ExampleService.html":{}}}],["entities/user.entity",{"_index":568,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entitiesdir",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":266,"title":{"entities/Example.html":{},"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/Example.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["env",{"_index":731,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1011,"title":{},"body":{"index.html":{}}}],["envyou",{"_index":733,"title":{},"body":{"index.html":{}}}],["equal",{"_index":978,"title":{},"body":{"index.html":{}}}],["error",{"_index":395,"title":{},"body":{"controllers/ExampleController.html":{}}}],["errors",{"_index":508,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["esc",{"_index":1024,"title":{},"body":{"index.html":{}}}],["eslint",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["especially",{"_index":1007,"title":{},"body":{"index.html":{}}}],["etc",{"_index":514,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["example",{"_index":336,"title":{"entities/Example.html":{}},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"index.html":{}}}],["example.controller",{"_index":410,"title":{},"body":{"modules/ExampleModule.html":{}}}],["example.description",{"_index":470,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.dto",{"_index":390,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{}}}],["example.dto.ts",{"_index":306,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["example.dto.ts:12",{"_index":315,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:15",{"_index":324,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:18",{"_index":323,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:21",{"_index":320,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:24",{"_index":318,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:27",{"_index":319,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:30",{"_index":313,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.isactive",{"_index":468,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.service",{"_index":388,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["example.testnumber",{"_index":466,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.teststring",{"_index":464,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example/entities/example.entity",{"_index":424,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["example/example.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["example/protected",{"_index":957,"title":{},"body":{"index.html":{}}}],["examplecontroller",{"_index":359,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"coverage.html":{}}}],["examplefactory",{"_index":425,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplefactory.savemany(numrecords",{"_index":433,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplemodule",{"_index":103,"title":{"modules/ExampleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules.html":{},"overview.html":{}}}],["examplerepository",{"_index":438,"title":{},"body":{"injectables/ExampleService.html":{}}}],["examples",{"_index":794,"title":{},"body":{"index.html":{}}}],["exampleseeder",{"_index":413,"title":{"classes/ExampleSeeder.html":{}},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["exampleservice",{"_index":387,"title":{"injectables/ExampleService.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"overview.html":{}}}],["exist",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["exists",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["expects",{"_index":1003,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["explaining",{"_index":873,"title":{},"body":{"index.html":{}}}],["export",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":567,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["ext:seed",{"_index":860,"title":{},"body":{"index.html":{}}}],["ext:seedlook",{"_index":803,"title":{},"body":{"index.html":{}}}],["extends",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":423,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"dependencies.html":{},"index.html":{}}}],["extention",{"_index":709,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["factories",{"_index":793,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":430,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager",{"_index":420,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager.get(example",{"_index":426,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["factorymanager.get(user",{"_index":532,"title":{},"body":{"classes/UserSeeder.html":{}}}],["fail",{"_index":963,"title":{},"body":{"index.html":{}}}],["false",{"_index":525,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@isnotempty()@isstring",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["fields",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["figure",{"_index":999,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":770,"title":{},"body":{"index.html":{}}}],["fill",{"_index":823,"title":{},"body":{"index.html":{}}}],["find",{"_index":457,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["findall",{"_index":362,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid(@param('id",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid(id",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername(@param('username",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyusername(username",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":363,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findonebyid(@param('id",{"_index":401,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findonebyid(id",{"_index":370,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["first",{"_index":870,"title":{},"body":{"index.html":{}}}],["fixme",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":695,"title":{},"body":{"index.html":{}}}],["folders",{"_index":795,"title":{},"body":{"index.html":{}}}],["follow",{"_index":814,"title":{},"body":{"index.html":{}}}],["following",{"_index":937,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["forget",{"_index":724,"title":{},"body":{"index.html":{}}}],["formatter",{"_index":910,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":899,"title":{},"body":{"index.html":{}}}],["forward",{"_index":664,"title":{},"body":{"index.html":{}}}],["found",{"_index":921,"title":{},"body":{"index.html":{}}}],["function",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":841,"title":{},"body":{"index.html":{}}}],["functions",{"_index":651,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":821,"title":{},"body":{"index.html":{}}}],["g",{"_index":813,"title":{},"body":{"index.html":{}}}],["general",{"_index":818,"title":{},"body":{"index.html":{}}}],["generate",{"_index":878,"title":{},"body":{"index.html":{}}}],["generated",{"_index":431,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["generates",{"_index":974,"title":{},"body":{"index.html":{}}}],["generation",{"_index":686,"title":{},"body":{"index.html":{}}}],["get('/id/:id",{"_index":371,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["get('/username/:username",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('logout",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('protected",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/ExampleController.html":{}}}],["get('refresh",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprotected",{"_index":364,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["getting",{"_index":653,"title":{"index.html":{}},"body":{"index.html":{}}}],["gettokens",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":726,"title":{},"body":{"index.html":{}}}],["github",{"_index":1021,"title":{},"body":{"index.html":{}}}],["go",{"_index":510,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["good",{"_index":807,"title":{},"body":{"index.html":{}}}],["guidance",{"_index":822,"title":{},"body":{"index.html":{}}}],["guide",{"_index":819,"title":{},"body":{"index.html":{}}}],["handle",{"_index":929,"title":{},"body":{"index.html":{}}}],["happens",{"_index":811,"title":{},"body":{"index.html":{}}}],["hash",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["hash(this.password",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["hashdata",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata(data",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["having",{"_index":671,"title":{},"body":{"index.html":{}}}],["hello",{"_index":153,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["helmet",{"_index":637,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helpful",{"_index":872,"title":{},"body":{"index.html":{}}}],["here",{"_index":817,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/47792808/typeorm",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://stackoverflow.com/questions/59913475/configure",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["https://www.elvisduru.com/blog/nestjs",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=_l225zpuk0m&list=wl&index=17",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["husky",{"_index":1014,"title":{},"body":{"index.html":{}}}],["id",{"_index":308,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["ie",{"_index":827,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["implemented",{"_index":954,"title":{},"body":{"index.html":{}}}],["implements",{"_index":415,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":863,"title":{},"body":{"index.html":{}}}],["imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["includes",{"_index":699,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["information",{"_index":953,"title":{},"body":{"index.html":{}}}],["inject",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["inject(configservice",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":868,"title":{},"body":{"index.html":{}}}],["injectrepository",{"_index":445,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(example",{"_index":446,"title":{},"body":{"injectables/ExampleService.html":{}}}],["injectrepository(user",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":672,"title":{},"body":{"index.html":{}}}],["installation",{"_index":716,"title":{},"body":{"index.html":{}}}],["installcopy",{"_index":729,"title":{},"body":{"index.html":{}}}],["installed",{"_index":718,"title":{},"body":{"index.html":{}}}],["instead",{"_index":891,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":930,"title":{},"body":{"index.html":{}}}],["interations",{"_index":932,"title":{},"body":{"index.html":{}}}],["isactive",{"_index":309,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["isboolean",{"_index":317,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isc",{"_index":1048,"title":{},"body":{"properties.html":{}}}],["isemail",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":213,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["isnumber",{"_index":322,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isstring",{"_index":214,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty",{"_index":210,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["issue",{"_index":836,"title":{},"body":{"index.html":{}}}],["isuuid",{"_index":325,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{},"index.html":{}}}],["isuuid()@isnotempty",{"_index":314,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{}}}],["item",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["iterations",{"_index":979,"title":{},"body":{"index.html":{}}}],["jest",{"_index":711,"title":{},"body":{"index.html":{}}}],["js",{"_index":705,"title":{},"body":{"index.html":{}}}],["jump",{"_index":810,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwt_refresh_secret",{"_index":756,"title":{},"body":{"index.html":{}}}],["jwt_secret",{"_index":755,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtfromrequest",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["keep",{"_index":845,"title":{},"body":{"index.html":{}}}],["key",{"_index":680,"title":{},"body":{"index.html":{}}}],["kind",{"_index":855,"title":{},"body":{"index.html":{}}}],["know",{"_index":865,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["known",{"_index":949,"title":{},"body":{"index.html":{}}}],["larger",{"_index":760,"title":{},"body":{"index.html":{}}}],["license",{"_index":1047,"title":{},"body":{"properties.html":{}}}],["limited",{"_index":933,"title":{},"body":{"index.html":{}}}],["line",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["linter",{"_index":909,"title":{},"body":{"index.html":{}}}],["linting",{"_index":898,"title":{},"body":{"index.html":{}}}],["listed",{"_index":989,"title":{},"body":{"index.html":{}}}],["literal",{"_index":1056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:4000",{"_index":781,"title":{},"body":{"index.html":{}}}],["localhost:4000/api",{"_index":785,"title":{},"body":{"index.html":{}}}],["localhost:8080",{"_index":882,"title":{},"body":{"index.html":{}}}],["located",{"_index":959,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":975,"title":{},"body":{"index.html":{}}}],["logger",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["logging",{"_index":703,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["login(data",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["logout(@req",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["longer",{"_index":764,"title":{},"body":{"index.html":{}}}],["look",{"_index":820,"title":{},"body":{"index.html":{}}}],["looks",{"_index":950,"title":{},"body":{"index.html":{}}}],["lot",{"_index":858,"title":{},"body":{"index.html":{}}}],["make",{"_index":763,"title":{},"body":{"index.html":{}}}],["making",{"_index":1009,"title":{},"body":{"index.html":{}}}],["management",{"_index":1010,"title":{},"body":{"index.html":{}}}],["many",{"_index":674,"title":{},"body":{"index.html":{}}}],["matching",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matt",{"_index":1050,"title":{},"body":{"properties.html":{}}}],["maybe",{"_index":462,"title":{},"body":{"injectables/ExampleService.html":{}}}],["mburnett@tutanota.de",{"_index":1052,"title":{},"body":{"properties.html":{}}}],["message",{"_index":783,"title":{},"body":{"index.html":{}}}],["messageno",{"_index":947,"title":{},"body":{"index.html":{}}}],["messages",{"_index":964,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":982,"title":{},"body":{"index.html":{}}}],["methods",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migration",{"_index":840,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migration:create",{"_index":851,"title":{},"body":{"index.html":{}}}],["migration:generate",{"_index":831,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":850,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrations:generate",{"_index":1008,"title":{},"body":{"index.html":{}}}],["migrationsdir",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":650,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkdir",{"_index":720,"title":{},"body":{"index.html":{}}}],["mock",{"_index":1001,"title":{},"body":{"index.html":{}}}],["mock/express",{"_index":712,"title":{},"body":{"index.html":{}}}],["mocking",{"_index":970,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":713,"title":{},"body":{"index.html":{}}}],["mode",{"_index":779,"title":{},"body":{"index.html":{}}}],["module",{"_index":95,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["module/s",{"_index":1028,"title":{},"body":{"index.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mondules",{"_index":967,"title":{},"body":{"index.html":{}}}],["more",{"_index":771,"title":{},"body":{"index.html":{}}}],["mounted",{"_index":884,"title":{},"body":{"index.html":{}}}],["msg",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["much",{"_index":828,"title":{},"body":{"index.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":826,"title":{},"body":{"index.html":{}}}],["need",{"_index":734,"title":{},"body":{"index.html":{}}}],["needed",{"_index":824,"title":{},"body":{"index.html":{}}}],["needs",{"_index":521,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["nest",{"_index":812,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/typeorm",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newexample",{"_index":448,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newexample.teststring",{"_index":452,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newuser",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.id",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.username",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["nice",{"_index":1029,"title":{},"body":{"index.html":{}}}],["node",{"_index":765,"title":{},"body":{"index.html":{}}}],["node_dev",{"_index":742,"title":{},"body":{"index.html":{}}}],["node_modules",{"_index":727,"title":{},"body":{"index.html":{}}}],["note",{"_index":834,"title":{},"body":{"index.html":{}}}],["notes",{"_index":773,"title":{},"body":{"index.html":{}}}],["now",{"_index":912,"title":{},"body":{"index.html":{}}}],["null",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":357,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["number",{"_index":321,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{},"index.html":{}}}],["numrecords",{"_index":427,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["object",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["objects",{"_index":715,"title":{},"body":{"index.html":{}}}],["occurs",{"_index":903,"title":{},"body":{"index.html":{}}}],["odd",{"_index":897,"title":{},"body":{"index.html":{}}}],["offending",{"_index":915,"title":{},"body":{"index.html":{}}}],["once",{"_index":697,"title":{},"body":{"index.html":{}}}],["one",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["openapi",{"_index":701,"title":{},"body":{"index.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ossp",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["ossp\";this",{"_index":941,"title":{},"body":{"index.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":976,"title":{},"body":{"index.html":{}}}],["over",{"_index":804,"title":{},"body":{"index.html":{}}}],["overkill",{"_index":461,"title":{},"body":{"injectables/ExampleService.html":{}}}],["overview",{"_index":806,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":619,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["packages",{"_index":675,"title":{},"body":{"index.html":{}}}],["page",{"_index":786,"title":{},"body":{"index.html":{}}}],["paragraph",{"_index":772,"title":{},"body":{"index.html":{}}}],["param",{"_index":384,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":403,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseint(process.env.db_port",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parser",{"_index":633,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":386,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":488,"title":{},"body":{"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createexampledto",{"_index":489,"title":{},"body":{"classes/UpdateExampleDto.html":{}}}],["partialtype(createuserdto",{"_index":492,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":484,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":209,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":383,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["patch('/id/:id",{"_index":381,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["perhaps",{"_index":917,"title":{},"body":{"index.html":{}}}],["pg",{"_index":641,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["pgadmin",{"_index":513,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["place",{"_index":808,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":877,"title":{},"body":{"index.html":{}}}],["point",{"_index":956,"title":{},"body":{"index.html":{}}}],["points",{"_index":683,"title":{},"body":{"index.html":{}}}],["port",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":829,"title":{},"body":{"index.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["post('signup",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":511,"title":{},"body":{"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["pqsql",{"_index":936,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["prevent",{"_index":894,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":355,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":356,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid",{"_index":346,"title":{},"body":{"entities/Example.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid()@isnotempty",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["probably",{"_index":460,"title":{},"body":{"injectables/ExampleService.html":{}}}],["problem",{"_index":911,"title":{},"body":{"index.html":{}}}],["problems",{"_index":895,"title":{},"body":{"index.html":{}}}],["process",{"_index":799,"title":{},"body":{"index.html":{}}}],["process.env.db_database",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_database_name",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_passord",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_type",{"_index":927,"title":{},"body":{"index.html":{}}}],["process.env.db_user_name",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":977,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["prod",{"_index":746,"title":{},"body":{"index.html":{}}}],["production",{"_index":747,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":678,"title":{},"body":{"index.html":{}}}],["project's",{"_index":738,"title":{},"body":{"index.html":{}}}],["promise",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["properly",{"_index":1006,"title":{},"body":{"index.html":{}}}],["properties",{"_index":141,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["protected",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExampleService.html":{},"index.html":{}}}],["provide",{"_index":662,"title":{},"body":{"index.html":{}}}],["provided",{"_index":693,"title":{},"body":{"index.html":{}}}],["providers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["purpose",{"_index":661,"title":{},"body":{"index.html":{}}}],["pushing",{"_index":1020,"title":{},"body":{"index.html":{}}}],["query",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["questions",{"_index":805,"title":{},"body":{"index.html":{}}}],["quick",{"_index":757,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":665,"title":{},"body":{"index.html":{}}}],["randombytes",{"_index":761,"title":{},"body":{"index.html":{}}}],["rbac",{"_index":1016,"title":{},"body":{"index.html":{}}}],["readme.md",{"_index":848,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["rebase",{"_index":1018,"title":{},"body":{"index.html":{}}}],["redis",{"_index":1035,"title":{},"body":{"index.html":{}}}],["refer",{"_index":952,"title":{},"body":{"index.html":{}}}],["reference",{"_index":986,"title":{},"body":{"index.html":{}}}],["referring",{"_index":825,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{}}}],["refreshtokenguard",{"_index":180,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(userid",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":219,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["regular",{"_index":938,"title":{},"body":{"index.html":{}}}],["relative",{"_index":889,"title":{},"body":{"index.html":{}}}],["reliably",{"_index":997,"title":{},"body":{"index.html":{}}}],["remove",{"_index":365,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":405,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":375,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":657,"title":{},"body":{"index.html":{}}}],["repository",{"_index":436,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["req.get('authorization').replace('bearer",{"_index":485,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["req.user['refreshtoken",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['sub",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolution",{"_index":951,"title":{},"body":{"index.html":{}}}],["resolved",{"_index":969,"title":{},"body":{"index.html":{}}}],["resource",{"_index":447,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["resources",{"_index":955,"title":{},"body":{"index.html":{}}}],["restful",{"_index":668,"title":{},"body":{"index.html":{}}}],["result",{"_index":714,"title":{},"body":{"index.html":{}}}],["results",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reword",{"_index":1023,"title":{},"body":{"index.html":{}}}],["right",{"_index":991,"title":{},"body":{"index.html":{}}}],["robust",{"_index":992,"title":{},"body":{"index.html":{}}}],["root",{"_index":885,"title":{},"body":{"index.html":{}}}],["route",{"_index":958,"title":{},"body":{"index.html":{}}}],["router",{"_index":1033,"title":{},"body":{"index.html":{}}}],["rule",{"_index":907,"title":{},"body":{"index.html":{}}}],["run",{"_index":417,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"index.html":{}}}],["run(datasource",{"_index":418,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["runs",{"_index":887,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["sample.env",{"_index":730,"title":{},"body":{"index.html":{}}}],["save",{"_index":429,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["scaffolded",{"_index":658,"title":{},"body":{"index.html":{}}}],["schema",{"_index":948,"title":{},"body":{"index.html":{}}}],["schemas",{"_index":787,"title":{},"body":{"index.html":{}}}],["search",{"_index":1037,"title":{},"body":{"index.html":{}}}],["secret",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secretorkey",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secrets",{"_index":741,"title":{},"body":{"index.html":{}}}],["section",{"_index":774,"title":{},"body":{"index.html":{}}}],["see",{"_index":782,"title":{},"body":{"index.html":{}}}],["seedconfig",{"_index":922,"title":{},"body":{"index.html":{}}}],["seeder",{"_index":416,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seederfactorymanager",{"_index":421,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seeders",{"_index":791,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":688,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seems",{"_index":916,"title":{},"body":{"index.html":{}}}],["sense",{"_index":798,"title":{},"body":{"index.html":{}}}],["senseseed",{"_index":859,"title":{},"body":{"index.html":{}}}],["service",{"_index":843,"title":{},"body":{"index.html":{}}}],["session",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["set",{"_index":736,"title":{},"body":{"index.html":{}}}],["setting",{"_index":972,"title":{},"body":{"index.html":{}}}],["setup",{"_index":717,"title":{},"body":{"index.html":{}}}],["shft",{"_index":1022,"title":{},"body":{"index.html":{}}}],["showuser",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["sidebar",{"_index":990,"title":{},"body":{"index.html":{}}}],["signup",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["solution",{"_index":681,"title":{},"body":{"index.html":{}}}],["some/path",{"_index":890,"title":{},"body":{"index.html":{}}}],["somehow",{"_index":463,"title":{},"body":{"injectables/ExampleService.html":{}}}],["soon",{"_index":962,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["sparsely",{"_index":984,"title":{},"body":{"index.html":{}}}],["spec.ts",{"_index":961,"title":{},"body":{"index.html":{}}}],["specific",{"_index":739,"title":{},"body":{"index.html":{}}}],["specifically",{"_index":900,"title":{},"body":{"index.html":{}}}],["sql",{"_index":939,"title":{},"body":{"index.html":{}}}],["squash",{"_index":1019,"title":{},"body":{"index.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":1055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cliconfig.ts",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":652,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seedconfig.ts",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":140,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:15",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":145,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":208,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":212,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:9",{"_index":211,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":479,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:12",{"_index":480,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:21",{"_index":482,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":478,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/config/cliconfig",{"_index":945,"title":{},"body":{"index.html":{}}}],["src/config/cliconfig.ts",{"_index":607,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/seedconfig.ts",{"_index":610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db",{"_index":797,"title":{},"body":{"index.html":{}}}],["src/db/factories/**/*{.ts,.js",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/migrations/**/*{.ts,.js",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/migrations/name.of.migration",{"_index":853,"title":{},"body":{"index.html":{}}}],["src/db/migrations/name.of.migration.here",{"_index":942,"title":{},"body":{"index.html":{}}}],["src/db/migrations/name.of.migrationgenerate",{"_index":852,"title":{},"body":{"index.html":{}}}],["src/db/seeds/**/*{.ts,.js",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/example.seeder.ts",{"_index":414,"title":{},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/example.seeder.ts:6",{"_index":422,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["src/db/seeds/user.seeder.ts",{"_index":528,"title":{},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/user.seeder.ts:6",{"_index":529,"title":{},"body":{"classes/UserSeeder.html":{}}}],["src/entity",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/entity/**/*.ts",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/example",{"_index":694,"title":{},"body":{"index.html":{}}}],["src/example/dto/create",{"_index":305,"title":{},"body":{"classes/CreateExampleDto.html":{},"coverage.html":{}}}],["src/example/dto/update",{"_index":487,"title":{},"body":{"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts",{"_index":338,"title":{},"body":{"entities/Example.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts:14",{"_index":347,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:17",{"_index":352,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:20",{"_index":350,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:23",{"_index":349,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:26",{"_index":345,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:29",{"_index":343,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:32",{"_index":354,"title":{},"body":{"entities/Example.html":{}}}],["src/example/example.controller.ts",{"_index":360,"title":{},"body":{"controllers/ExampleController.html":{},"coverage.html":{}}}],["src/example/example.controller.ts:26",{"_index":368,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:32",{"_index":374,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:37",{"_index":369,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:43",{"_index":372,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:48",{"_index":382,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:56",{"_index":377,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.module.ts",{"_index":409,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/example/example.service.ts",{"_index":434,"title":{},"body":{"injectables/ExampleService.html":{},"coverage.html":{}}}],["src/example/example.service.ts:12",{"_index":437,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:20",{"_index":442,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:24",{"_index":439,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:33",{"_index":440,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:37",{"_index":441,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:41",{"_index":444,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:56",{"_index":443,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/main.ts",{"_index":614,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migration",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/migration/**/*.ts",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/some/path",{"_index":893,"title":{},"body":{"index.html":{}}}],["src/subscriber",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*.ts",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*{.ts,.js",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":491,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":493,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":566,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["stand",{"_index":666,"title":{},"body":{"index.html":{}}}],["start",{"_index":777,"title":{},"body":{"index.html":{}}}],["start:devfind",{"_index":780,"title":{},"body":{"index.html":{}}}],["started",{"_index":654,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":682,"title":{},"body":{"index.html":{}}}],["statementcreate",{"_index":940,"title":{},"body":{"index.html":{}}}],["statements",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["straight",{"_index":663,"title":{},"body":{"index.html":{}}}],["strategies/accesstoken.strategy",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["streaming",{"_index":1030,"title":{},"body":{"index.html":{}}}],["strict",{"_index":888,"title":{},"body":{"index.html":{}}}],["string",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sub",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["subject's",{"_index":971,"title":{},"body":{"index.html":{}}}],["subscribers",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribersdir",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suggestions",{"_index":918,"title":{},"body":{"index.html":{}}}],["super",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":1039,"title":{},"body":{"modules.html":{}}}],["supporting",{"_index":659,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1040,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":700,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":832,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":801,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":926,"title":{},"body":{"index.html":{}}}],["tech",{"_index":660,"title":{},"body":{"index.html":{}}}],["template",{"_index":656,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":758,"title":{},"body":{"index.html":{}}}],["test",{"_index":744,"title":{},"body":{"index.html":{}}}],["test/s",{"_index":983,"title":{},"body":{"index.html":{}}}],["test:e2ean",{"_index":862,"title":{},"body":{"index.html":{}}}],["testboolean",{"_index":310,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["testend",{"_index":861,"title":{},"body":{"index.html":{}}}],["testing",{"_index":689,"title":{},"body":{"index.html":{}}}],["testnumber",{"_index":311,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["tests",{"_index":844,"title":{},"body":{"index.html":{}}}],["teststring",{"_index":312,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["theuser",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["thing",{"_index":864,"title":{},"body":{"index.html":{}}}],["things",{"_index":988,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(data",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.body",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.examplerepository.create(createexampledto",{"_index":449,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.find",{"_index":454,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.findonebyid(id",{"_index":455,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.remove(todelete",{"_index":477,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(example",{"_index":474,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(newexample",{"_index":453,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.exampleservice.create(createexampledto",{"_index":398,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findall",{"_index":400,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findonebyid(id",{"_index":402,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.getprotected",{"_index":399,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.remove(id",{"_index":406,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.update(id",{"_index":404,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.findbyid(id",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(id",{"_index":456,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.gettokens(newuser.id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(refreshtoken",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":149,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log",{"_index":450,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.logger.log('gethello",{"_index":151,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log(`exampleservice",{"_index":472,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`userservice",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.password",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["this.updaterefreshtoken(newuser.id",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(todelete",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userid",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(data.username",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(username",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(userid",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["times",{"_index":980,"title":{},"body":{"index.html":{}}}],["todelete",{"_index":475,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/ExampleService.html":{},"entities/User.html":{}}}],["token",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["triggered",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["trim",{"_index":486,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["turn",{"_index":679,"title":{},"body":{"index.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1053,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([example",{"_index":412,"title":{},"body":{"modules/ExampleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":570,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["typing",{"_index":923,"title":{},"body":{"index.html":{}}}],["under",{"_index":796,"title":{},"body":{"index.html":{}}}],["underlying",{"_index":1002,"title":{},"body":{"index.html":{}}}],["understanding",{"_index":876,"title":{},"body":{"index.html":{}}}],["underway",{"_index":698,"title":{},"body":{"index.html":{}}}],["unique",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":706,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":667,"title":{},"body":{"index.html":{}}}],["update",{"_index":366,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":378,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":340,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":353,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updateexampledto",{"_index":380,"title":{"classes/UpdateExampleDto.html":{}},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["updateexampledto.description",{"_index":471,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.isactive",{"_index":469,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.testnumber",{"_index":467,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.teststring",{"_index":465,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updaterefreshtoken",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":473,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["updatetestdto",{"_index":379,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updateuserdto",{"_index":490,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upload",{"_index":1031,"title":{},"body":{"index.html":{}}}],["use",{"_index":759,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":676,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('/id/:id",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('protected",{"_index":373,"title":{},"body":{"controllers/ExampleController.html":{}}}],["useguards(accesstokenguard)@patch('/id/:id",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(refreshtokenguard",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@get('refresh",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":256,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["user.dto",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.refreshtoken",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfactory",{"_index":531,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userfactory.savemany(numrecords",{"_index":534,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userid",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["username",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["users.controller",{"_index":569,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/user.entity",{"_index":530,"title":{},"body":{"classes/UserSeeder.html":{}}}],["users/users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":535,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userseeder",{"_index":527,"title":{"classes/UserSeeder.html":{}},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":234,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":792,"title":{},"body":{"index.html":{}}}],["using",{"_index":768,"title":{},"body":{"index.html":{}}}],["usually",{"_index":968,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":515,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["uuid_v4",{"_index":509,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["v",{"_index":857,"title":{},"body":{"index.html":{}}}],["valid",{"_index":743,"title":{},"body":{"index.html":{}}}],["validate",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":481,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":215,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":762,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1057,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":737,"title":{},"body":{"index.html":{}}}],["version",{"_index":837,"title":{},"body":{"index.html":{},"properties.html":{}}}],["video",{"_index":871,"title":{},"body":{"index.html":{}}}],["view",{"_index":881,"title":{},"body":{"index.html":{}}}],["void",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["want",{"_index":809,"title":{},"body":{"index.html":{}}}],["warning",{"_index":902,"title":{},"body":{"index.html":{}}}],["watch",{"_index":778,"title":{},"body":{"index.html":{}}}],["way",{"_index":459,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["whatever",{"_index":928,"title":{},"body":{"index.html":{}}}],["without",{"_index":670,"title":{},"body":{"index.html":{}}}],["witout",{"_index":1005,"title":{},"body":{"index.html":{}}}],["won't",{"_index":925,"title":{},"body":{"index.html":{}}}],["work",{"_index":815,"title":{},"body":{"index.html":{}}}],["works",{"_index":800,"title":{},"body":{"index.html":{}}}],["world",{"_index":154,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["x",{"_index":1025,"title":{},"body":{"index.html":{}}}],["xxx.entity.ts",{"_index":830,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":728,"title":{},"body":{"index.html":{}}}],["you're",{"_index":920,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class AccessTokenGuard extends AuthGuard('jwt') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\ntype JwtPayload = {\n  sub: string\n  username: string\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET')\n    })\n  }\n\n  validate(payload: JwtPayload) {\n    return payload\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        // import { Controller, Get, Post, Request, UseGuards } from '@nestjs/common'\nimport { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AppService } from './app.service'\n// import { AuthService } from './auth_prev/auth.service'\n// import { JwtAuthGuard } from './auth_prev/jwr-auth.guard'\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  // constructor(private readonly appService: AppService) { }\n  // constructor(private readonly authService: AuthService, private readonly appService: AppService) { }\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly appService: AppService) { }\n\n  //  auth implementation https://www.youtube.com/watch?v=_L225zpUK0M&list=WL&index=17\n\n  // @Post('login')\n  // login(@Request() req): any {\n  //   return this.authService.login(req.body)\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('protected')\n  // showUser(): object {\n  //   return { msg: 'protected' }\n  // }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExampleModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\n\nimport { ExampleModule } from './example/example.module'\n\nimport { UsersModule } from './users/users.module'\nimport { AuthModule } from './auth/auth.module'\n\n// https://stackoverflow.com/questions/59913475/configure-typeorm-with-one-configuration-for-cli-and-nestjs-application\nimport dbConfig from './config/dbConfig'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  imports: [\n    ExampleModule,\n    UsersModule,\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('database')\n      })\n    }),\n    ConfigModule.forRoot({ isGlobal: true, load: [dbConfig] }),\n    UsersModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class AppService {\n  @Inject(ConfigService)\n  public config: ConfigService\n\n  logger: Logger\n\n  constructor() {\n    this.logger = new Logger()\n  }\n\n  getHello(): string {\n    this.logger.log('getHello is triggered!')\n    return 'Hello World!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Request } from 'express'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthService } from './auth.service'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private authService: AuthService) { }\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto)\n  }\n\n  @Post('login')\n  login(@Body() data: AuthDto) {\n    return this.authService.login(data)\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Get('refresh')\n  refreshTokens(@Req() req: Request) {\n    // console.log('req.user: ', req.user)\n\n    const userId = req.user['sub']\n    const refreshToken = req.user['refreshToken']\n    return this.authService.refreshTokens(userId, refreshToken)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub'])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator'\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\n\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy'\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy'\n\nimport { UsersModule } from '../users/users.module'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  // TODO: JwtModule.register options?\n  imports: [UsersModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                hashData\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashData\n                        \n                    \n                \n            \n            \n                \nhashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable\n} from '@nestjs/common'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { UsersService } from '../users/users.service'\nimport * as argon2 from 'argon2'\nimport { JwtService } from '@nestjs/jwt'\nimport { ConfigService } from '@nestjs/config'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) { }\n  async signUp(createUserDto: CreateUserDto): Promise {\n    // Check if user exists\n    const userExists = await this.usersService.findByUsername(\n      createUserDto.username\n    )\n\n    if (userExists) {\n      throw new BadRequestException('User already exists')\n    }\n\n    // Hash password in the user entity\n    const newUser = await this.usersService.create(createUserDto)\n\n    const tokens = await this.getTokens(newUser.id, newUser.username)\n    await this.updateRefreshToken(newUser.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async login(data: AuthDto) {\n    // Check if user exists\n    const user = await this.usersService.findByUsername(data.username)\n    if (!user) throw new BadRequestException('User does not exist')\n\n    const passwordMatches = await argon2.verify(user.password, data.password)\n    if (!passwordMatches) throw new BadRequestException('Password is incorrect')\n\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async logout(userId: string) {\n    return this.usersService.update(userId, { refreshToken: null })\n  }\n\n  hashData(data: string) {\n    return argon2.hash(data)\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshToken = await this.hashData(refreshToken)\n    await this.usersService.update(userId, {\n      refreshToken: hashedRefreshToken\n    })\n  }\n\n  async getTokens(userId: string, username: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_SECRET'),\n          expiresIn: '15m'\n        }\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '7d'\n        }\n      )\n    ])\n\n    return {\n      accessToken,\n      refreshToken\n    }\n  }\n\n  async refreshTokens(userId: string, refreshToken: string) {\n    const user = await this.usersService.findById(userId)\n    if (!user || !user.refreshToken)\n      throw new ForbiddenException('Access Denied')\n\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken\n    )\n\n    if (!refreshTokenMatches) throw new ForbiddenException('Access Denied')\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n\n    return tokens\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExampleDto.html":{"url":"classes/CreateExampleDto.html","title":"class - CreateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/create-example.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isActive\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                testBoolean\n                            \n                            \n                                    Optional\n                                testNumber\n                            \n                            \n                                    Optional\n                                testString\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsUUID\n} from 'class-validator'\n\nexport class CreateExampleDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  testString?: string\n\n  @IsNumber()\n  testNumber?: number\n\n  @IsBoolean()\n  testBoolean?: boolean\n\n  @IsBoolean()\n  isActive?: boolean\n\n  @IsString()\n  name?: string\n\n  @IsString()\n  description?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\nexport class CreateUserDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  @IsNotEmpty()\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsEmail()\n  email: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n\n  @IsString()\n  refreshToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Example.html":{"url":"entities/Example.html","title":"entity - Example","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Example\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/entities/example.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                testNumber\n                            \n                            \n                                testString\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsUUID } from 'class-validator'\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class Example {\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  id: string\n\n  @Column({ nullable: true })\n  testString: string\n\n  @Column()\n  testNumber: number\n\n  @Column({ default: true })\n  isActive: boolean\n\n  @Column()\n  description: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExampleController.html":{"url":"controllers/ExampleController.html","title":"controller - ExampleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExampleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                example\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('protected')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTestDto: UpdateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTestDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseUUIDPipe,\n  UseGuards\n} from '@nestjs/common'\nimport { ExampleService } from './example.service'\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\n\n@ApiTags('example')\n@Controller('example')\nexport class ExampleController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly exampleService: ExampleService) { }\n\n  @Post()\n  // @ApiBadRequestResponse({ description: 'Error creating new example.' })\n  create(@Body() createExampleDto: CreateExampleDto) {\n    return this.exampleService.create(createExampleDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('protected')\n  getProtected(): string {\n    return this.exampleService.getProtected()\n  }\n\n  @Get()\n  findAll() {\n    return this.exampleService.findAll()\n  }\n\n  @Get('/id/:id')\n  // @ApiBadRequestResponse()\n  findOneById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.findOneById(id)\n  }\n\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateTestDto: UpdateExampleDto\n  ) {\n    return this.exampleService.update(id, updateTestDto)\n  }\n\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExampleModule.html":{"url":"modules/ExampleModule.html","title":"module - ExampleModule","body":"\n                   \n\n\n\n\n    Modules\n    ExampleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\n\nExampleService\n\nExampleService\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/example/example.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExampleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExampleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { ExampleService } from './example.service'\nimport { ExampleController } from './example.controller'\n\nimport { Example } from './entities/example.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Example])],\n  controllers: [ExampleController],\n  providers: [ExampleService]\n})\nexport class ExampleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleSeeder.html":{"url":"classes/ExampleSeeder.html","title":"class - ExampleSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/example.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/example.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { Example } from '../../example/entities/example.entity'\n\nexport default class ExampleSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const exampleFactory = await factoryManager.get(Example)\n    const numRecords = 5\n\n    // save numRecords factory generated entities, to the database\n    await exampleFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExampleService.html":{"url":"injectables/ExampleService.html","title":"injectable - ExampleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExampleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exampleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/example/example.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exampleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateExampleDto: UpdateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExampleDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/example/example.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\n\nimport { Example } from './entities/example.entity'\n\n@Injectable()\nexport class ExampleService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(Example) private exampleRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  getProtected(): string {\n    return 'This is a protected resource'\n  }\n\n  create(createExampleDto: CreateExampleDto) {\n    const newExample = this.exampleRepository.create(createExampleDto)\n\n    this.logger.log(\n      `ExampleService created a new Example: ${newExample.testString}`\n    )\n    return this.exampleRepository.save(newExample)\n  }\n\n  findAll() {\n    return this.exampleRepository.find()\n  }\n\n  findOneById(id: string) {\n    return this.exampleRepository.findOneById(id)\n  }\n\n  async update(id: string, updateExampleDto: UpdateExampleDto) {\n    const example = await this.findOneById(id)\n\n    // TODO: find a cleaner way to do this. This is probably overkill\n    //    maybe ? or ... somehow\n    example.testString = updateExampleDto.testString\n    example.testNumber = updateExampleDto.testNumber\n    example.isActive = updateExampleDto.isActive\n    example.description = updateExampleDto.description\n\n    this.logger.log(`ExampleService updates an Example: ${id}`)\n\n    return this.exampleRepository.save(example)\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findOneById(id)\n\n    this.logger.log(`ExampleService deletes an Example: ${id}`)\n\n    return this.exampleRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { Request } from 'express'\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true\n    })\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim()\n    return { ...payload, refreshToken }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExampleDto.html":{"url":"classes/UpdateExampleDto.html","title":"class - UpdateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/update-example.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateExampleDto } from './create-example.dto'\n\nexport class UpdateExampleDto extends PartialType(CreateExampleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateUserDto } from './create-user.dto'\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  BeforeInsert,\n  BeforeUpdate\n} from 'typeorm'\n\nimport { hash } from 'argon2'\nimport { IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\n//  if there are errors about uuid_v4, go into Postgres cmd line / pgAdmin / etc. and run\n//    create extension \"uuid-ossp\";\n//  like a query\n@Entity()\nexport class User {\n  // hash the password before insert / update\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    // TODO: this needs a salt\n    this.password = await hash(this.password)\n  }\n\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  name: string\n\n  @Column({ unique: true, nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  username: string\n\n  @Column({ unique: true, nullable: true })\n  @IsString()\n  email: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  password: string\n\n  @Column({ nullable: true })\n  refreshToken: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSeeder.html":{"url":"classes/UserSeeder.html","title":"class - UserSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/user.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/user.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { User } from '../../users/entities/user.entity'\n\nexport default class UserSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const userFactory = await factoryManager.get(User)\n    const numRecords = 3\n\n    // save numRecords factory generated entities, to the database\n    await userFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/username/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ParseUUIDPipe\n} from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { ApiBadRequestResponse, ApiTags } from '@nestjs/swagger'\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly usersService: UsersService) { }\n\n  @ApiBadRequestResponse()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto)\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll()\n  }\n\n  @Get('/id/:id')\n  findById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.findById(id)\n  }\n\n  @Get('/username/:username')\n  findByUsername(@Param('username') username: string) {\n    return this.usersService.findByUsername(username)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.usersService.update(id, updateUserDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { User } from './entities/user.entity'\nimport { UsersService } from './users.service'\nimport { UsersController } from './users.controller'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\n\nimport { User } from './entities/user.entity'\n\n@Injectable()\nexport class UsersService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(User) private userRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = this.userRepository.create(createUserDto)\n\n    this.logger.log(`UserService created new user: ${newUser.id}`)\n    return this.userRepository.save(newUser)\n  }\n\n  async findAll(): Promise {\n    this.logger.log(`UserService findAll`)\n    return this.userRepository.find()\n  }\n\n  async findById(id: string): Promise {\n    this.logger.log(`UserService findById: ${id}`)\n    return this.userRepository.findOne({ where: { id } })\n  }\n\n  async findByUsername(username: string): Promise {\n    this.logger.log(`UserService findByUsername: ${username}`)\n    return this.userRepository.findOne({ where: { username } })\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const theUser = await this.findById(id)\n\n    this.logger.log(`UserService updates User: ${id}`)\n\n    // https://stackoverflow.com/questions/47792808/typeorm-update-item-and-return-it\n    return this.userRepository.save({\n      ...theUser, // existing fields\n      ...updateUserDto // updated fields\n    })\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findById(id)\n\n    this.logger.log(`ExampleService deletes a User: ${id}`)\n\n    return this.userRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            connectionSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            cliConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/seeds/example.seeder.ts\n            \n            class\n            ExampleSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/db/seeds/user.seeder.ts\n            \n            class\n            UserSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/example/dto/create-example.dto.ts\n            \n            class\n            CreateExampleDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/example/dto/update-example.dto.ts\n            \n            class\n            UpdateExampleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/entities/example.entity.ts\n            \n            entity\n            Example\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/example.controller.ts\n            \n            controller\n            ExampleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/example/example.service.ts\n            \n            injectable\n            ExampleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            argon2 : ^0.30.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.12\n        \n            typeorm-extension : ^2.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS API Template\n\n\n\nThis repo is a scaffolded implementation of NestJS and supporting tech.\nThe purpose of this repo is to provide a straight-forward way to quickly stand up a RESTful API NestJS app, without having to install / configure the many packages that are useful for an average project.\nThis is not a turn-key API solution, but rather just a way to get started, quickly.\nStarting points for database connectivity, API endpoint generation, entity creation, data seeding, testing, authentication, etc. are available 'out-of-the-box'.\nExample code is provided in the src/example folder, which should be deleted once you are underway.\n\nIncludes\n\nNestJS\nSwagger / OpenAPI\nBasic logging\nCompodoc\n\n\nTypeORM\nPassport JS\nJWT Strategy\n\n\nPostgres connectivity\nTesting\nUnit testing\nE2E / endpoint testing\n\n\nAdditional packages\nargon2\ntypeorm-extention\nclass-validator\ncookie-parser\nhelmet\npg (postgres driver)\n@jest-mock/express (for testing. mocks request and result objects)\n\n\n\n\nInstallation and setup\nThe code needs to be installed, and a database for the project needs to be created.\nCreate the project folder and change into it\nmkdir \ncd Clone the repo (Don't forget the ' . ' at the end!!!)\ngit clone  .Install the node_modules\nyarn installCopy the sample.env to .env\ncp sample.env .envYou will need a database, to connect to. Once a database is available to your project ->\nSet .env vars with your project's database-specific connection info and jwt secrets.\nNODE_DEV= // valid: 'test' | 'dev' | 'prod' | 'production'\nAPI_PORT=\nDB_TYPE=\nDB_HOST=\nDB_PORT=\nDB_USER_NAME=\nDB_PASSORD=\nDB_DATABASE_NAME=\n\nJWT_SECRET=\nJWT_REFRESH_SECRET=\nIf you need a JWT secret, a quick way to get one is in a terminal (use a larger randomBytes() value to make a longer secret string)\n\nnode -e \"console.log(require('crypto').randomBytes(64).toString('base64'));\"If you are not using Postgres as a database, you will need to make some changes to the dbConfig and cliConfig files. More info is provided in the 'Database config' paragraph of the Dev notes section of this document, below.\nStart the app in dev / watch mode\n  yarn start:devFind the app at localhost:4000. You should see a 'hello world' message.\nFind the Swagger / OpenAPI docs at localhost:4000/api. You should see a Swagger page for 'example', 'users' and 'auth'. Schemas are displayed at the bottom.\nYou can then build out data seeders for your database. This template uses factories and seeders. You can find examples in their own folders under the src/db folder, which you can run to get a sense of how the seeding process works.\nIf you run the seeders 'out-of-the-box', you should have some test data in tables called examples and user.\nRun the seeders using\nyarn type-ext:seedLook over the Dev notes section of this document for more info specific to this implementation.\n\nHow to use\nIf there are questions about NestJS, the Overview section of the docs is a good place to start.\nIf you just want to jump in and see what happens, you can create new endpoint with nest g resource , and follow the example code provided in this repo.\nThis is where most of the work should be done.\n\nHere is a general guide for getting started. Look at existing app / auth / example / user code for further guidance.\nnest g resource name\nFill out as needed, referring to app / auth / example / user code when necessary\nUse class-validator (ie. @IsUUID, @IsNotEmpty, etc.) decorators as much as possible.\nentity\ncreate an entities folder\ncreate entity file (xxx.entity.ts)\n\n\nmigration:generate or synchronize\n_ NOTE _ There is currently an issue with the typeorm cli version 0.3.x that breaks the migration functionality.\n\n\n\n\ndto\nservice\ncontroller\nmodule\ntests\n\n\nKeep the docs up to dateyarn docs:create\nKeep the README.md file accurate and up to date.\n\n\n\n\nMigrations / Seeding\nCreate a migration\nyarn migration:create src/db/migrations/name.of.migrationGenerate a migration\nSHOULD: yarn migration:generate src/db/migrations/name.of.migration\nbut it doesn't. There is some kind of bug in the new cli (v. 0.3.x) that doesn't make a lot of senseSeed the example and user tables\nyarn type-ext:seed\nTesting\nBasic tests can be run using\nyarn testEnd-to-end / endpoint tests can be run using\nyarn test:e2eAn important thing to know about testing with NestJS is that much of it depends on decoupling injected dependencies. This can be confusing at first.\nThis video is helpful, for explaining the basic concepts and has examples.\nHere is a helpful place, for better understanding and examples.\n\nDocumentation\n\nThis repo uses the Compodoc plugin. You can generate the document set with this command\n\nyarn docs:createand then view it at localhost:8080.\nBy default, Compodoc creates documentation files in a documentation folder, mounted on the project root.\n\nDev notes\n\nBasis:\n\nThis implementation of NestJS runs in strict mode, ie. it was created using nest new . --strict.\nUse relative imports, ie. '../some/path', instead of absolute imports, ie. 'src/some/path. This will prevent problems during testing.\nUse class-validator decorators in dto and entity files.\nThere is an odd issue with linting / formatting, specifically a 'Del .' warning that occurs when code has an empty block. There doesn't appear to be a rule-based linter / formatter solution to this problem. For now, adding // eslint-disable-next-line prettier/prettier above the offending line seems to work. Perhaps your linter / formatter will provide additional suggestions, depending on what you're using.\nYou should delete the example code (found in the src/example folder) from your project, once you are underway.\n\n\nDatabase config:\n\nin dbConfig, seedConfig and cliConfig there is an odd typing issue with the 'type' key. It basically won't take a value from process.env.DB_TYPE. This value is 'postgres' for this implementation. You will need to change the value of the 'type' key in these files to whatever database driver you are using.\nThis template uses typeorm-extension to handle interactions with the data/database. These interations are limited to creating, seeding and dropping a database.\nIf there are Postgres errors about uuid_v4 not being available, go to pqsql / pgAdmin / etc. and run the following, as you would run a regular SQL statementcreate extension \"uuid-ossp\";This will install a Postgres extension for uuid_v4.\n\n\nTypeORM:\n\nmigrations\ncreate\n\nyarn typeorm migration:create src/db/migrations/name.of.migration.here\ngenerate\nDoesn't work with typeorm 0.3.xyarn typeorm migration:generate -d ./src/config/cliConfig aMigrationNamereturns the messageNo changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migration:create\" command\nThere is a known issue with this and it looks like the resolution depends on changes to the typeorm package for 0.3.x.\nRefer here for more information\n\n\n\n\n\n\nAuthentication:\n\nPassport JWT strategy is implemented. auth and user resources are provided as a starting point.\nThere is an example/protected route you can use as an example.\n\n\nTesting:\n\nAn example of protected route testing in located in app.e2e-spec.ts.\nAs soon as you start adding functionality, tests will fail with confusing messages (ie. 'Cant find ... in ...').\nThis ie likely due to dependencies among mondules. Usually this can be resolved by mocking the test subject's dependencies.\nHere is a good resource for setting up tests for TypeORM, using the 'cat' resource from the NestJS docs.\nThis video is also helpful.\n\n\napp.e2e-spec.ts generates log output if process.env.NODE_ENV is not equal to 'test'\niterations of this output equal the number of times the beforeEach() method of the test/s run.\n\n\n\n\nLogging:\n\nBasic logging is available using the default logger provided by NestJS. It is sparsely implemented in this repo. It should be better implemented in an actual application.\nReference this doc for more things to do.\n\n\napp.e2e-spec.ts generates log output if process.env.NODE_ENV is not equal to 'test'\n\n\nSwagger / OpenAPI\n\nDecorators for @nestjs/swagger are listed here. Look at the sidebar on the right of the page.\n\n\n\n\nTo Do\n\nMore robust / detailed tests.\nMore edge case tests are always better.\napp.e2e-spec.ts\nreliably turn off logging output\n\n\nauth.e2e-spec.ts\nfigure out how to either attach req.user, or how to mock req.user.\nunderlying refresh / logout code expects this. Tests can't run witout @Req / req.user object.\n\n\n\n\n\n\nGet typeorm cli to properly work with migrations, especially migrations:generate\nThis looks like it depends on TypeORM making changes to the cli.\n\n\nBetter configuration management / config object\nMore environment-aware (ie. 'dev' / 'test' / 'production')\n\n\nAdd Husky\nPassport / Auth.\nCASL / RBAC\n\n\nClean / rebase / squash git before pushing to github.\ngit rebase -i \nShft I\nreword / squash\nEsc :x\nNew commit message\nEsc :x\n\n\nAdmin module/s\n\n\nNice to have\n\nStreaming\nFile upload\nCache management\nRouter module\nAutomock\nRedis\nWhere / how\n\n\nElastic Search\nWhere / how\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExampleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : ISC\n        \n            Author : Matt Burnett mburnett@tutanota.de\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cliConfig   (src/.../seedConfig.ts)\n                        \n                        \n                            connectionSource   (src/.../cliConfig.ts)\n                        \n                        \n                            options   (src/.../seedConfig.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/seedConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  migrationsTableName: 'migrations',\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: parseInt(process.env.DB_PORT, 10),\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSORD,\n  // FIXME: here is the bug with the database name\n  database: 'e-comm_test',\n  // database: process.env.DB_DATABASE_NAME,\n  logging: false,\n  synchronize: process.env.NODE_ENV !== 'production' || false,\n  // name: 'default',\n  entities: ['src/**/**.entity{.ts,.js}'],\n  migrations: ['src/db/migrations/**/*{.ts,.js}'],\n  subscribers: ['src/subscriber/**/*{.ts,.js}'],\n  seeds: ['src/db/seeds/**/*{.ts,.js}'],\n  factories: ['src/db/factories/**/*{.ts,.js}']\n}\n                    \n                \n\n\n        \n    \n\n    src/config/cliConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        connectionSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource({\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE,\n  synchronize: false,\n  logging: true,\n  migrationsRun: false,\n  // entities: [__dirname + '/**/entities/*.entity.{js,ts}'],\n  entities: [__dirname + '../**/entities/**/*.ts'],\n  migrations: [__dirname + '/dist/src/migrations/*.{js,ts}'],\n  // entities: ['src/entity/**/*.ts'],\n  // migrations: ['src/migration/**/*.ts'],\n  subscribers: ['src/subscriber/**/*.ts']\n  //  FIXME: this should know where the migration directory is located\n  // cli: {\n  //   entitiesDir: 'src/entity',\n  //   migrationsDir: 'src/migration',\n  //   subscribersDir: 'src/subscriber'\n  // }\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
