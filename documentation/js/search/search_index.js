var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.717,1,1.741]],["body/injectables/AccessTokenGuard.html",[0,1.196,1,2.904,2,1.85,3,0.449,4,0.449,5,0.342,6,3.745,7,0.546,8,0.03,9,0.984,10,3.745,11,2.626,12,1.85,13,1.85,14,1.85,15,1.708,16,1.85,17,0.449,18,0.02,19,2.389,20,3.745,21,0.025,22,0.025]],["title/injectables/AccessTokenStrategy.html",[0,0.717,23,1.914]],["body/injectables/AccessTokenStrategy.html",[0,1.016,2,1.433,3,0.348,4,0.348,5,0.265,7,0.557,8,0.03,9,0.761,11,2.033,17,0.348,18,0.015,19,1.85,21,0.021,22,0.021,23,2.712,24,2.53,25,0.535,26,1.509,27,3.867,28,1.85,29,2.899,30,3.488,31,1.016,32,3.46,33,1.764,34,1.291,35,0.965,36,1.631,37,4.616,38,4.836,39,3.46,40,3.867,41,1.131,42,1.85,43,2.899,44,2.899,45,2.53,46,2.254,47,2.257,48,2.899,49,1.396,50,1.555,51,3.46,52,1.85,53,2.033,54,2.899,55,2.899,56,2.899,57,2.899,58,3.46,59,1.323]],["title/controllers/AppController.html",[60,1.349,61,2.122]],["body/controllers/AppController.html",[3,0.31,4,0.31,5,0.236,7,0.577,8,0.031,9,0.94,12,1.277,13,1.277,14,1.277,15,1.179,16,1.277,17,0.31,18,0.014,21,0.02,22,0.02,25,0.477,26,1.396,31,0.679,41,1.009,49,1.291,52,2.617,53,3.104,59,1.871,60,2.027,61,2.78,62,1.277,63,2.585,64,4.427,65,1.179,66,3.085,67,2.009,68,2.009,69,2.009,70,2.009,71,1.509,72,3.144,73,2.585,74,2.394,75,3.085,76,3.085,77,3.085,78,3.085,79,3.085,80,2.009,81,2.009,82,2.585,83,3.085,84,2.585,85,3.085,86,2.255,87,3.085,88,3.085,89,2.585,90,3.085,91,3.085,92,3.085,93,2.585,94,3.085]],["title/modules/AppModule.html",[95,1.464,96,2.122]],["body/modules/AppModule.html",[3,0.295,4,0.295,5,0.224,7,0.605,8,0.03,9,0.645,12,1.213,13,1.213,14,1.213,15,1.12,16,1.213,17,0.295,18,0.013,21,0.019,22,0.019,30,2.799,42,1.567,61,3.102,62,1.706,72,3.018,73,2.456,95,1.851,96,4.112,97,1.317,98,2.015,99,2.456,100,2.456,101,2.456,102,3.317,103,3.317,104,3.216,105,2.42,106,1.722,107,1.722,108,2.143,109,2.683,110,2.683,111,2.931,112,2.143,113,1.567,114,2.931,115,2.931,116,2.456,117,2.931,118,4.12,119,2.931,120,1.317,121,3.482,122,2.456,123,2.931,124,2.931,125,1.722,126,2.931,127,2.456,128,2.931,129,2.931,130,2.456,131,2.931,132,2.931,133,2.931]],["title/injectables/AppService.html",[0,0.717,72,1.741]],["body/injectables/AppService.html",[0,1.047,2,1.5,3,0.364,4,0.364,5,0.277,7,0.478,8,0.03,9,0.797,17,0.364,18,0.016,21,0.022,22,0.022,25,0.561,26,1.556,28,2.84,30,3.122,31,1.242,35,0.884,41,1.185,42,1.937,49,1.439,59,1.385,64,4.728,65,1.385,72,2.544,130,3.036,134,3.036,135,1.819,136,3.885,137,5.314,138,4.482,139,4.759,140,3.624,141,4.759,142,3.624,143,2.649,144,1.5,145,3.624,146,3.624,147,3.624,148,3.624]],["title/controllers/AuthController.html",[60,1.349,149,2.122]],["body/controllers/AuthController.html",[1,1.359,3,0.256,4,0.256,5,0.195,7,0.573,8,0.031,9,0.559,12,1.052,13,1.052,14,1.052,15,0.972,16,1.052,17,0.256,18,0.011,21,0.017,22,0.017,25,0.393,26,1.216,31,1.065,33,1.85,34,1.354,35,0.899,36,1.711,41,1.582,47,1.243,52,1.359,59,1.681,60,1.052,62,1.052,65,1.85,67,1.655,68,3.62,69,1.655,70,1.655,71,1.243,74,2.151,81,1.655,84,3.116,86,3.766,120,1.671,149,2.422,150,2.13,151,1.858,152,3.116,153,3.116,154,3.116,155,3.116,156,2.13,157,2.844,158,2.542,159,2.719,160,2.542,161,2.542,162,2.542,163,2.542,164,2.542,165,2.542,166,2.542,167,2.13,168,2.418,169,3.72,170,2.542,171,1.858,172,1.655,173,1.858,174,1.655,175,2.542,176,2.13,177,1.494,178,2.13,179,2.13,180,1.858,181,1.494,182,1.494,183,1.858,184,2.542,185,2.542,186,2.542,187,2.542,188,2.542,189,2.542,190,2.542,191,2.542,192,2.542,193,2.542,194,2.542,195,2.13,196,2.542,197,2.185,198,2.542,199,2.542,200,1.858,201,2.542,202,2.542,203,2.542]],["title/classes/AuthDto.html",[18,0.014,157,1.914]],["body/classes/AuthDto.html",[3,0.414,4,0.414,5,0.315,7,0.414,8,0.03,17,0.414,18,0.023,21,0.024,22,0.024,25,0.637,31,1.137,35,0.959,49,1.79,50,2.536,65,1.975,135,1.975,157,3.035,204,1.85,205,3.451,206,3.317,207,4.329,208,4.119,209,4.119,210,3.676,211,3.676,212,2.014]],["title/modules/AuthModule.html",[95,1.464,102,1.914]],["body/modules/AuthModule.html",[3,0.318,4,0.318,5,0.242,7,0.595,8,0.03,9,0.696,12,1.31,13,1.31,14,1.31,15,1.209,16,1.31,17,0.318,18,0.014,21,0.02,22,0.02,23,3.397,47,2.124,62,1.798,74,2.828,95,1.952,97,1.421,98,2.124,102,3.704,104,3.091,105,2.552,106,1.859,107,1.859,109,2.829,110,2.829,116,2.651,149,3.231,178,2.651,180,3.176,181,2.552,182,2.552,183,3.176,213,2.651,214,3.164,215,2.651,216,3.397,217,3.164,218,3.164,219,2.313,220,3.164,221,3.164,222,3.164,223,2.651,224,4.344,225,2.313]],["title/injectables/AuthService.html",[0,0.717,74,1.593]],["body/injectables/AuthService.html",[0,0.568,2,0.657,3,0.16,4,0.16,5,0.121,7,0.47,8,0.03,9,0.349,17,0.16,18,0.007,21,0.012,22,0.012,25,0.245,26,0.844,28,1.38,30,2.749,31,1.073,33,1.864,34,1.364,35,0.906,36,1.723,41,1.529,42,0.848,47,0.776,48,2.163,49,1.838,50,1.861,59,1.697,74,1.263,80,2.126,120,2.384,144,1.714,152,2.163,153,2.163,154,2.163,155,2.163,156,2.163,157,2.21,159,1.887,167,2.163,168,1.861,176,1.329,177,0.932,179,1.329,180,1.16,181,0.932,182,0.932,183,1.16,195,3.719,197,3.117,206,0.932,219,1.16,226,1.329,227,3.12,228,2.582,229,2.582,230,2.582,231,1.587,232,2.171,233,4.679,234,1.587,235,2.582,236,1.587,237,2.75,238,2.582,239,1.587,240,1.587,241,2.582,242,1.587,243,2.582,244,1.587,245,1.587,246,1.681,247,2.582,248,1.587,249,1.587,250,1.587,251,1.587,252,1.681,253,2.582,254,2.288,255,3.265,256,2.582,257,3.025,258,1.587,259,1.587,260,4.141,261,2.582,262,1.587,263,1.329,264,0.776,265,1.329,266,1.329,267,4.439,268,1.587,269,1.587,270,1.587,271,3.265,272,1.587,273,1.587,274,2.582,275,1.587,276,1.587,277,1.587,278,1.587,279,2.582,280,2.582,281,2.582,282,2.582,283,1.587,284,1.587,285,2.582,286,1.587,287,2.582,288,1.587,289,2.582,290,2.582,291,1.587,292,2.582,293,1.587,294,1.587,295,1.587,296,1.587,297,2.582,298,2.582,299,2.582,300,2.582,301,1.587]],["title/classes/CreateExampleDto.html",[18,0.014,302,1.741]],["body/classes/CreateExampleDto.html",[3,0.305,4,0.305,5,0.232,7,0.305,8,0.03,17,0.305,18,0.019,21,0.019,22,0.019,25,0.469,31,1.288,34,1.356,35,1.087,36,2.211,49,1.805,65,2.237,135,1.611,204,1.361,210,2.745,211,3.812,212,1.481,302,2.253,303,5.001,304,2.214,305,3.157,306,2.178,307,4.062,308,4.848,309,4.062,310,4.062,311,3.029,312,2.538,313,3.029,314,4.392,315,5.51,316,3.029,317,3.029,318,3.029,319,3.532,320,4.848,321,3.029,322,3.029,323,2.745]],["title/classes/CreateUserDto.html",[18,0.014,168,1.464]],["body/classes/CreateUserDto.html",[3,0.328,4,0.328,5,0.25,7,0.328,8,0.03,17,0.328,18,0.02,21,0.02,22,0.02,25,0.505,31,1.285,34,1.411,35,1.084,49,1.917,50,2.267,65,2.232,135,1.697,168,1.995,197,2.964,204,1.468,206,2.964,207,4.227,210,3.686,211,3.802,212,1.598,306,2.267,312,2.738,323,2.892,324,5.005,325,2.389,326,4.227,327,5.045,328,3.267,329,3.267,330,3.267,331,3.267,332,3.267,333,3.267]],["title/entities/Example.html",[264,1.593,334,1.464]],["body/entities/Example.html",[3,0.31,4,0.31,5,0.236,7,0.429,8,0.03,17,0.31,18,0.019,21,0.02,22,0.02,25,0.477,31,1.294,35,1.092,49,1.735,65,2.248,125,3.104,135,1.632,212,1.509,264,2.088,305,3.188,306,2.2,307,4.102,309,4.102,310,4.102,314,3.577,319,3.577,323,2.78,334,1.918,335,1.649,336,2.585,337,4.102,338,4.102,339,4.427,340,4.102,341,3.085,342,4.929,343,3.085,344,3.085,345,3.085,346,3.085,347,3.085,348,3.085,349,2.585,350,3.085,351,4.102,352,3.085,353,2.585,354,1.386,355,2.585,356,2.585,357,2.009]],["title/controllers/ExampleController.html",[60,1.349,358,2.122]],["body/controllers/ExampleController.html",[1,1.247,3,0.235,4,0.235,5,0.179,7,0.525,8,0.03,9,0.514,12,0.966,13,0.966,14,0.966,15,0.892,16,0.966,17,0.235,18,0.01,21,0.016,22,0.016,25,0.361,26,1.141,31,1.148,33,1.775,34,1.299,35,0.862,36,1.641,41,1.705,49,1.778,52,1.247,53,1.371,59,1.994,60,0.966,62,0.966,65,1.994,67,2.724,69,1.52,70,1.52,71,1.141,89,1.955,144,1.922,151,1.706,171,2.552,173,1.706,200,1.706,302,2.788,305,1.52,306,2.344,334,1.569,358,2.274,359,1.955,360,1.569,361,3.024,362,2.925,363,3.89,364,2.274,365,2.236,366,1.955,367,2.334,368,2.334,369,1.955,370,2.925,371,2.334,372,2.334,373,2.334,374,1.52,375,2.925,376,2.334,377,1.52,378,4.643,379,2.728,380,2.925,381,2.334,382,1.955,383,1.955,384,1.955,385,3.89,386,2.236,387,1.955,388,1.52,389,2.552,390,1.52,391,2.334,392,2.334,393,2.334,394,2.925,395,2.334,396,2.334,397,1.955,398,2.334,399,2.334,400,2.334,401,2.334,402,2.334,403,2.334,404,1.955,405,2.334,406,1.955,407,2.334]],["title/modules/ExampleModule.html",[95,1.464,103,1.914]],["body/modules/ExampleModule.html",[3,0.391,4,0.391,5,0.298,7,0.603,8,0.03,9,0.857,17,0.391,18,0.017,21,0.023,22,0.023,62,2.064,95,2.24,97,1.749,98,2.438,103,3.603,105,2.929,106,2.287,107,2.287,109,3.247,110,2.535,112,2.846,113,2.081,334,1.749,358,3.582,386,3.278,387,3.262,408,3.262,409,3.262,410,3.893,411,3.893,412,3.262,413,3.893]],["title/classes/ExampleSeeder.html",[18,0.014,414,2.382]],["body/classes/ExampleSeeder.html",[3,0.355,4,0.355,5,0.271,7,0.528,8,0.03,17,0.355,18,0.016,21,0.021,22,0.021,25,0.547,26,1.53,31,0.778,33,1.351,34,0.989,35,0.656,36,1.249,41,1.155,120,2.103,136,3.837,204,1.588,227,2.805,246,3.048,257,2.502,334,1.588,335,1.889,354,2.103,357,2.301,414,3.422,415,2.961,416,3.922,417,4.398,418,3.837,419,2.961,420,5.005,421,4.398,422,4.681,423,3.534,424,2.301,425,3.534,426,3.534,427,3.534,428,3.922,429,3.534,430,2.961,431,2.961,432,2.961,433,2.301,434,3.534]],["title/injectables/ExampleService.html",[0,0.717,386,1.741]],["body/injectables/ExampleService.html",[0,0.745,2,0.927,3,0.225,4,0.225,5,0.171,7,0.516,8,0.03,9,0.493,17,0.225,18,0.01,21,0.015,22,0.015,25,0.346,26,1.106,28,1.809,31,1.208,33,1.867,34,1.366,35,0.954,36,1.726,41,1.679,49,1.761,59,1.963,80,1.458,93,1.876,113,1.197,120,1.833,135,1.294,138,3.899,143,1.637,144,1.401,181,1.316,227,2.745,237,2.474,257,1.809,302,2.61,306,2.194,334,2.194,354,1.006,360,1.521,361,2.962,362,2.836,363,3.81,364,2.204,365,1.809,366,2.836,369,2.836,374,2.204,377,2.204,379,3.134,386,2.181,388,1.458,389,2.474,390,1.458,412,1.876,435,1.876,436,2.239,437,3.325,438,3.385,439,3.385,440,2.239,441,2.239,442,2.239,443,2.239,444,2.239,445,2.239,446,1.876,447,2.239,448,2.239,449,2.239,450,2.239,451,2.239,452,2.239,453,2.239,454,1.876,455,2.239,456,2.239,457,2.239,458,2.239,459,3.385,460,2.239,461,2.239,462,2.239,463,2.239,464,2.239,465,2.239,466,2.239,467,2.239,468,2.836,469,1.876,470,2.239,471,1.876,472,1.876,473,2.239]],["title/injectables/RefreshTokenGuard.html",[0,0.717,174,2.122]],["body/injectables/RefreshTokenGuard.html",[0,1.193,2,1.842,3,0.447,4,0.447,5,0.341,7,0.545,8,0.03,9,0.979,10,3.728,11,2.614,12,1.842,13,1.842,14,1.842,15,1.701,16,1.842,17,0.447,18,0.02,19,2.378,20,3.728,21,0.025,22,0.025,174,3.529,182,2.614,474,3.728]],["title/injectables/RefreshTokenStrategy.html",[0,0.717,216,1.914]],["body/injectables/RefreshTokenStrategy.html",[0,0.991,2,1.38,3,0.335,4,0.335,5,0.255,7,0.573,8,0.03,9,0.733,11,1.958,17,0.335,18,0.015,19,1.781,21,0.021,22,0.021,25,0.516,26,1.471,27,3.771,28,1.781,29,2.793,30,3.451,31,0.991,33,1.72,34,1.259,35,0.836,36,1.59,40,4.572,41,1.089,42,1.781,43,3.771,44,2.793,45,3.29,46,2.171,47,2.201,52,1.781,53,1.958,54,2.793,55,2.793,56,2.793,57,2.793,59,1.274,68,3.554,86,2.436,120,1.498,125,1.958,172,2.171,182,1.958,197,2.644,216,2.644,475,2.793,476,3.333,477,4.501,478,3.333,479,3.333,480,3.333,481,3.333,482,3.333]],["title/classes/UpdateExampleDto.html",[18,0.014,379,1.914]],["body/classes/UpdateExampleDto.html",[3,0.462,4,0.462,5,0.352,7,0.555,8,0.03,17,0.462,18,0.02,19,2.455,21,0.025,22,0.025,71,2.246,204,2.064,302,2.455,304,3.358,360,2.064,379,3.246,389,3.358,483,3.848,484,3.848,485,4.593]],["title/classes/UpdateUserDto.html",[18,0.014,486,1.914]],["body/classes/UpdateUserDto.html",[3,0.462,4,0.462,5,0.352,7,0.555,8,0.03,17,0.462,18,0.02,19,2.455,21,0.025,22,0.025,71,2.246,168,2.064,177,2.699,204,2.064,325,3.358,360,2.064,484,3.848,486,3.246,487,3.848,488,4.593]],["title/entities/User.html",[254,1.593,264,1.593]],["body/entities/User.html",[3,0.243,4,0.243,5,0.185,7,0.429,8,0.03,15,0.922,17,0.243,18,0.016,21,0.016,22,0.016,25,0.373,31,1.236,34,1.194,35,1.043,49,1.813,50,1.917,65,2.146,125,3.212,135,1.368,197,2.507,206,2.773,210,3.283,211,3.283,212,1.18,223,2.022,227,1.29,252,1.571,254,1.75,257,1.29,263,2.999,264,1.75,306,1.917,323,2.331,326,3.575,335,1.29,337,3.575,338,3.575,339,3.955,340,3.575,342,4.425,349,3.575,351,3.575,353,2.022,354,1.084,355,2.022,356,4.581,360,1.084,365,1.29,418,1.764,424,1.571,489,2.022,490,2.413,491,3.579,492,2.413,493,2.413,494,2.413,495,2.413,496,4.267,497,2.413,498,2.413,499,2.413,500,2.413,501,2.413,502,3.579,503,3.579,504,2.413,505,2.413,506,2.413,507,1.764,508,2.413,509,2.413,510,2.022,511,2.022,512,2.022,513,2.413,514,2.413,515,2.413,516,2.413,517,2.413,518,2.413,519,2.413,520,2.413,521,3.575,522,3.579]],["title/classes/UserSeeder.html",[18,0.014,523,2.382]],["body/classes/UserSeeder.html",[3,0.323,4,0.323,5,0.246,7,0.503,8,0.03,17,0.323,18,0.014,21,0.02,22,0.02,25,0.497,26,1.436,31,0.707,33,1.229,34,0.899,35,0.597,36,1.136,41,1.051,120,2.416,136,3.657,144,1.331,204,1.444,227,2.674,246,2.86,254,2.447,257,2.674,335,1.718,354,1.973,357,2.094,360,1.444,416,3.68,417,4.191,418,3.657,419,2.693,420,4.868,421,4.191,422,4.505,424,2.094,428,3.68,430,2.693,431,2.693,432,2.693,433,2.094,437,2.35,523,3.211,524,2.693,525,3.215,526,3.215,527,3.215,528,3.215,529,3.215,530,3.215,531,4.392,532,3.215,533,3.215,534,3.215,535,3.215,536,4.392,537,3.215,538,3.215,539,3.215,540,3.215,541,3.215]],["title/controllers/UsersController.html",[60,1.349,542,2.122]],["body/controllers/UsersController.html",[1,1.25,3,0.235,4,0.235,5,0.179,7,0.525,8,0.03,9,0.515,12,0.968,13,0.968,14,0.968,15,0.894,16,0.968,17,0.235,18,0.01,21,0.016,22,0.016,25,0.362,26,1.143,31,1.149,33,1.902,34,1.392,35,0.924,36,1.758,41,1.707,49,1.801,50,1.572,52,1.25,53,1.374,59,1.996,60,0.968,62,0.968,65,1.996,67,2.278,69,1.523,70,1.523,71,1.144,144,1.734,151,1.71,168,2.346,171,2.557,173,1.71,177,2.055,200,2.557,232,2.049,266,1.96,306,2.346,360,1.572,361,3.027,364,2.278,365,2.239,370,2.93,374,1.523,375,1.96,377,1.523,380,1.96,382,1.96,383,1.96,384,1.96,385,3.895,388,1.523,390,1.523,394,2.93,397,1.96,404,1.96,406,1.96,486,3.269,542,2.278,543,1.96,544,2.339,545,2.93,546,2.93,547,1.96,548,2.339,549,2.339,550,2.339,551,1.96,552,2.339,553,1.96,554,3.498,555,2.339,556,2.339,557,2.339,558,2.339,559,2.339,560,1.96,561,2.339,562,2.339,563,2.339,564,2.339,565,2.339,566,2.339,567,2.339,568,2.339,569,2.339]],["title/modules/UsersModule.html",[95,1.464,104,1.741]],["body/modules/UsersModule.html",[3,0.366,4,0.366,5,0.278,7,0.59,8,0.03,9,0.8,12,1.506,13,1.506,14,1.506,15,1.39,16,1.506,17,0.366,18,0.016,21,0.022,22,0.022,62,1.975,95,2.143,97,1.634,98,2.333,104,3.28,105,2.803,106,2.137,107,2.137,109,3.107,110,2.369,112,2.659,113,1.944,232,3.151,254,1.779,542,3.467,560,3.047,570,3.047,571,3.047,572,3.047,573,3.637,574,4.771,575,3.047,576,3.637,577,3.637]],["title/injectables/UsersService.html",[0,0.717,232,1.593]],["body/injectables/UsersService.html",[0,0.699,2,0.852,3,0.207,4,0.207,5,0.158,7,0.5,8,0.03,9,0.453,17,0.207,18,0.009,21,0.015,22,0.015,25,0.318,26,1.038,28,1.697,31,1.177,33,1.9,34,1.39,35,0.962,36,1.756,41,1.625,49,1.751,50,1.741,59,1.98,80,1.341,113,1.1,120,1.741,135,1.213,138,3.786,143,1.505,144,1.314,168,2.114,177,1.865,227,3.274,232,1.552,237,2.321,246,3.483,254,2.129,257,1.697,265,1.725,306,2.327,354,0.925,360,1.426,361,3.063,364,2.067,365,2.071,374,2.067,377,2.067,388,1.341,390,1.341,437,3.183,446,1.725,454,1.725,468,1.725,469,1.725,471,1.725,472,1.725,486,3.142,545,3.246,546,3.246,547,2.66,551,2.66,553,2.66,575,1.725,578,1.725,579,2.059,580,3.174,581,3.174,582,2.059,583,2.059,584,2.059,585,2.059,586,2.059,587,2.059,588,2.059,589,2.059,590,4.704,591,2.059,592,2.059,593,2.059,594,3.174,595,3.174,596,3.174,597,2.059,598,2.059,599,2.059,600,2.059,601,3.174,602,2.059,603,2.059]],["title/coverage.html",[604,3.713]],["body/coverage.html",[0,1.254,1,1.359,5,0.195,6,2.13,8,0.03,18,0.025,21,0.017,22,0.017,23,1.494,24,1.858,35,0.472,60,2.004,61,1.655,63,2.13,72,1.359,74,1.243,108,1.858,121,3.216,134,2.13,144,1.052,149,1.655,150,2.13,157,1.494,168,1.142,174,1.655,205,2.13,216,1.494,225,1.858,226,2.13,232,1.243,254,1.243,264,1.819,302,1.359,303,2.13,304,2.719,324,2.13,325,2.719,334,1.142,336,2.13,358,1.655,359,2.13,379,1.494,386,1.359,414,1.858,415,2.13,435,2.13,474,2.13,475,2.13,483,2.13,486,1.494,487,2.13,489,2.13,523,1.858,524,2.13,542,1.655,543,2.13,578,2.13,604,2.13,605,2.13,606,2.542,607,2.542,608,6.564,609,4.399,610,5.815,611,6.255,612,3.72,613,4.399,614,4.399,615,4.056,616,2.13,617,2.13,618,3.116,619,4.056,620,2.13,621,2.542,622,4.399,623,2.13,624,2.542,625,2.13,626,2.542,627,2.542]],["title/dependencies.html",[98,1.914,628,2.285]],["body/dependencies.html",[8,0.031,9,0.812,11,2.169,18,0.021,21,0.022,22,0.022,42,1.973,46,3.137,47,1.805,71,1.805,81,2.404,98,1.805,113,1.973,172,3.492,212,1.805,219,2.698,252,2.404,354,2.164,424,2.404,629,5.362,630,3.691,631,3.691,632,3.691,633,3.691,634,3.691,635,3.691,636,3.691,637,3.691,638,3.691,639,3.691,640,3.691,641,3.093,642,3.093,643,3.691,644,3.093,645,3.691,646,3.691,647,3.691,648,3.093,649,3.691,650,3.691,651,3.691,652,3.093,653,3.691,654,3.691,655,3.691,656,3.691,657,3.691,658,3.691,659,3.691,660,3.691]],["title/miscellaneous/functions.html",[661,1.458,662,3.28]],["body/miscellaneous/functions.html",[8,0.026,21,0.026,22,0.026,25,0.767,623,4.155,625,5.127,661,2.651,662,4.155,663,4.959]],["title/index.html",[25,0.422,664,2.728,665,2.728]],["body/index.html",[5,0.227,8,0.027,18,0.013,21,0.019,22,0.019,45,2.168,46,1.931,47,1.45,68,1.931,81,1.931,82,2.485,97,1.333,159,2.168,172,1.931,181,2.441,212,1.45,252,1.931,264,1.45,334,1.333,354,1.866,433,2.705,507,3.037,510,2.485,511,3.48,512,2.485,605,3.48,641,2.485,642,2.485,644,4.017,648,2.485,652,2.485,666,5.194,667,5.194,668,2.966,669,4.794,670,2.966,671,2.966,672,2.966,673,2.966,674,2.966,675,2.966,676,2.966,677,2.966,678,2.966,679,2.966,680,2.966,681,2.966,682,2.966,683,2.966,684,2.966,685,2.966,686,2.966,687,2.966,688,4.154,689,2.966,690,2.966,691,2.966,692,2.966,693,4.154,694,2.485,695,2.966,696,2.966,697,2.966,698,2.966,699,2.966,700,2.966,701,2.966,702,4.154,703,4.154,704,2.966,705,2.966,706,4.154,707,5.667,708,2.966,709,2.966,710,2.966,711,2.966,712,2.966,713,2.966,714,4.154,715,2.966,716,2.485,717,2.966,718,4.794,719,2.966,720,2.966,721,2.966,722,2.966,723,2.966,724,2.966,725,4.154,726,2.966,727,2.966,728,2.966,729,2.485,730,2.966,731,2.966,732,2.966,733,2.966,734,2.966,735,2.966,736,2.966,737,2.966,738,2.966,739,2.966,740,2.966,741,2.966,742,2.485,743,2.485,744,2.966,745,2.966]],["title/modules.html",[97,1.991]],["body/modules.html",[8,0.025,21,0.025,22,0.025,96,3.033,97,2.093,102,2.736,103,2.736,104,2.489,729,5.175,746,6.176,747,6.176,748,6.176]],["title/overview.html",[749,3.713]],["body/overview.html",[2,1.423,8,0.03,21,0.021,22,0.021,23,3.041,62,1.423,72,2.766,74,2.531,96,4.16,97,1.544,98,2.247,99,2.879,100,2.879,101,2.879,102,3.727,103,3.383,104,3.286,105,2.699,106,2.019,107,2.019,204,1.544,213,2.879,215,2.879,216,3.041,232,2.959,335,1.837,386,2.766,408,2.879,409,2.879,570,2.879,571,2.879,572,2.879,749,2.879,750,4.595,751,3.437,752,3.437,753,3.437]],["title/properties.html",[135,1.496,628,2.285]],["body/properties.html",[8,0.029,21,0.026,22,0.026,135,1.841,305,3.136,754,4.815,755,4.815,756,4.815,757,4.815,758,4.815,759,4.815,760,4.815,761,4.815]],["title/miscellaneous/typealiases.html",[661,1.458,762,3.915]],["body/miscellaneous/typealiases.html",[8,0.026,21,0.026,22,0.026,24,3.589,25,0.76,35,1.067,38,4.816,661,2.624,763,4.91,764,4.91,765,4.91]],["title/miscellaneous/variables.html",[661,1.458,766,3.28]],["body/miscellaneous/variables.html",[8,0.03,21,0.017,22,0.017,25,0.398,34,0.72,35,0.823,50,1.687,108,1.882,121,4.333,122,4.338,125,2.604,127,3.146,144,1.554,206,2.206,225,2.745,335,2.007,357,3.86,365,2.007,433,3.52,507,3.56,521,4.529,615,2.157,616,3.146,617,3.146,618,4.081,619,2.157,620,3.146,661,1.376,694,3.146,716,3.146,742,3.146,743,4.081,766,2.157,767,4.87,768,2.575,769,4.87,770,5.834,771,2.575,772,2.575,773,3.755,774,3.755,775,3.755,776,3.755,777,3.755,778,3.755,779,3.755,780,3.755,781,3.755,782,3.755,783,3.755,784,2.575,785,3.755,786,2.575,787,2.575,788,3.755,789,3.755,790,3.755,791,4.87,792,3.755,793,3.755,794,3.755,795,3.755,796,2.575,797,2.575,798,2.575,799,2.575,800,2.575,801,2.575,802,2.575,803,2.575,804,2.575]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":755,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["1.17.3",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["15m",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":751,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["2.5.0",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":530,"title":{},"body":{"classes/UserSeeder.html":{}}}],["4",{"_index":750,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":429,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["6.0.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":753,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":752,"title":{},"body":{"overview.html":{}}}],["8.9.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":23,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["additional",{"_index":724,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":763,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["another",{"_index":696,"title":{},"body":{"index.html":{}}}],["api",{"_index":667,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":394,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apibadrequestresponse()@post",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":391,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apibearerauth('bearerauth",{"_index":399,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('example",{"_index":392,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags('root",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":682,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":61,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":72,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["argon2.hash(data",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify(user.password",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"dependencies.html":{},"index.html":{}}}],["auth.controller",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.service",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_prev/auth.service",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["auth_prev/jwr",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":149,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":157,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authentication",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"index.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":102,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":758,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":74,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":708,"title":{},"body":{"index.html":{}}}],["average",{"_index":690,"title":{},"body":{"index.html":{}}}],["await",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('password",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["basic",{"_index":644,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["before",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":671,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":314,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["bootstrap",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":748,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":746,"title":{},"body":{"modules.html":{}}}],["burnett",{"_index":760,"title":{},"body":{"properties.html":{}}}],["cfg",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.get('database",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["check",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":18,"title":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":204,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{},"overview.html":{}}}],["cliconfig",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_examplemodule",{"_index":408,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_providers",{"_index":409,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":570,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":572,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":571,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["code",{"_index":709,"title":{},"body":{"index.html":{}}}],["column",{"_index":342,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({default",{"_index":346,"title":{},"body":{"entities/Example.html":{}}}],["column({nullable",{"_index":349,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({unique",{"_index":491,"title":{},"body":{"entities/User.html":{}}}],["common/guards/accesstoken.guard",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["compodoc",{"_index":717,"title":{},"body":{"index.html":{}}}],["compose.yaml",{"_index":720,"title":{},"body":{"index.html":{}}}],["config",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["config/dbconfig",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configoptions",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":479,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configure",{"_index":686,"title":{},"body":{"index.html":{}}}],["connectivity",{"_index":702,"title":{},"body":{"index.html":{}}}],["connects",{"_index":695,"title":{},"body":{"index.html":{}}}],["console.log('req.user",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(examplerepository",{"_index":436,"title":{},"body":{"injectables/ExampleService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('example",{"_index":393,"title":{},"body":{"controllers/ExampleController.html":{}}}],["controller('users",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":641,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["coverage",{"_index":604,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":360,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":397,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["create(createexampledto",{"_index":366,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["create(createuserdto",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":454,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":337,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":340,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createexampledto",{"_index":302,"title":{"classes/CreateExampleDto.html":{}},"body":{"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":168,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":396,"title":{},"body":{"controllers/ExampleController.html":{}}}],["creation",{"_index":705,"title":{},"body":{"index.html":{}}}],["data",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["data.password",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":433,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":420,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["datasource(configoptions",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(options",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(user",{"_index":529,"title":{},"body":{"classes/UserSeeder.html":{}}}],["datasourceoptions",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":339,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["db/migrations/*.{js,ts",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":357,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":384,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["delete('/id/:id",{"_index":375,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["deletes",{"_index":472,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployed",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description",{"_index":305,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"properties.html":{}}}],["details",{"_index":739,"title":{},"body":{"index.html":{}}}],["dev",{"_index":744,"title":{},"body":{"index.html":{}}}],["disable",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["doc",{"_index":736,"title":{},"body":{"index.html":{}}}],["docker",{"_index":718,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":719,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":605,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":697,"title":{},"body":{"index.html":{}}}],["don't",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["driver",{"_index":726,"title":{},"body":{"index.html":{}}}],["dto/auth.dto",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":388,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":390,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":723,"title":{},"body":{"index.html":{}}}],["email",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enable",{"_index":728,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":703,"title":{},"body":{"index.html":{}}}],["entities",{"_index":335,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/example.entity",{"_index":412,"title":{},"body":{"modules/ExampleModule.html":{},"injectables/ExampleService.html":{}}}],["entities/user.entity",{"_index":575,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":264,"title":{"entities/Example.html":{},"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/Example.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["entity{.ts,.js",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfile",{"_index":618,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":395,"title":{},"body":{"controllers/ExampleController.html":{}}}],["errors",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["eslint",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["etc",{"_index":510,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["example",{"_index":334,"title":{"entities/Example.html":{}},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"index.html":{}}}],["example.controller",{"_index":411,"title":{},"body":{"modules/ExampleModule.html":{}}}],["example.description",{"_index":466,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.dto",{"_index":389,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{}}}],["example.dto.ts",{"_index":304,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["example.dto.ts:12",{"_index":313,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:15",{"_index":322,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:18",{"_index":321,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:21",{"_index":318,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:24",{"_index":316,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:27",{"_index":317,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:30",{"_index":311,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.isactive",{"_index":464,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.service",{"_index":387,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["example.testnumber",{"_index":462,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.teststring",{"_index":460,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example/entities/example.entity",{"_index":425,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["example/example.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["examplecontroller",{"_index":358,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"coverage.html":{}}}],["examplefactory",{"_index":426,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplefactory.savemany(numrecords",{"_index":434,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplemodule",{"_index":103,"title":{"modules/ExampleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules.html":{},"overview.html":{}}}],["examplerepository",{"_index":439,"title":{},"body":{"injectables/ExampleService.html":{}}}],["exampleseeder",{"_index":414,"title":{"classes/ExampleSeeder.html":{}},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["exampleservice",{"_index":386,"title":{"injectables/ExampleService.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"overview.html":{}}}],["exist",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["expects",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":574,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["extends",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":424,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"dependencies.html":{}}}],["extention",{"_index":725,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["factories",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory",{"_index":431,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager",{"_index":421,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager.get(example",{"_index":427,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["factorymanager.get(user",{"_index":528,"title":{},"body":{"classes/UserSeeder.html":{}}}],["false",{"_index":521,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@isnotempty()@isstring",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["fields",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["findall",{"_index":361,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid(@param('id",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid(id",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername(@param('username",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyusername(username",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":362,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findonebyid(@param('id",{"_index":402,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findonebyid(id",{"_index":369,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["folder",{"_index":712,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["forward",{"_index":676,"title":{},"body":{"index.html":{}}}],["function",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":662,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":432,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["generation",{"_index":704,"title":{},"body":{"index.html":{}}}],["get('/id/:id",{"_index":370,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["get('/username/:username",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('logout",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('protected",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/ExampleController.html":{}}}],["get('refresh",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprotected",{"_index":363,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["getting",{"_index":664,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["go",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["hash",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["hash(this.password",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["hashdata",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata(data",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["having",{"_index":684,"title":{},"body":{"index.html":{}}}],["hello",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":648,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":694,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hosted",{"_index":693,"title":{},"body":{"index.html":{}}}],["hosting",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/47792808/typeorm",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://www.elvisduru.com/blog/nestjs",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=_l225zpuk0m&list=wl&index=17",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["id",{"_index":306,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["implements",{"_index":416,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["includes",{"_index":713,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["inject(configservice",{"_index":141,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":446,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(example",{"_index":447,"title":{},"body":{"injectables/ExampleService.html":{}}}],["injectrepository(user",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":685,"title":{},"body":{"index.html":{}}}],["installation",{"_index":740,"title":{},"body":{"index.html":{}}}],["instance",{"_index":692,"title":{},"body":{"index.html":{}}}],["instead",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isactive",{"_index":307,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["isboolean",{"_index":315,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isc",{"_index":757,"title":{},"body":{"properties.html":{}}}],["isemail",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":210,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isnumber",{"_index":320,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isstring",{"_index":211,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty",{"_index":207,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":323,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{}}}],["isuuid()@isnotempty",{"_index":312,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{}}}],["item",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["jest",{"_index":730,"title":{},"body":{"index.html":{}}}],["js",{"_index":721,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtauthguard",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtfromrequest",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":756,"title":{},"body":{"properties.html":{}}}],["line",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["links",{"_index":737,"title":{},"body":{"index.html":{}}}],["literal",{"_index":765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":138,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":716,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["login(data",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["many",{"_index":687,"title":{},"body":{"index.html":{}}}],["matching",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matt",{"_index":759,"title":{},"body":{"properties.html":{}}}],["mburnett@tutanota.de",{"_index":761,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migration:run",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":743,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":661,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock/express",{"_index":731,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":732,"title":{},"body":{"index.html":{}}}],["module",{"_index":95,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":738,"title":{},"body":{"index.html":{}}}],["msg",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["nestjs",{"_index":666,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexample",{"_index":451,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newexample.teststring",{"_index":455,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newuser",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.id",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.username",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["notes",{"_index":745,"title":{},"body":{"index.html":{}}}],["null",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":356,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["number",{"_index":319,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["numrecords",{"_index":428,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["object",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["objects",{"_index":734,"title":{},"body":{"index.html":{}}}],["one",{"_index":534,"title":{},"body":{"classes/UserSeeder.html":{}}}],["openapi",{"_index":715,"title":{},"body":{"index.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ossp",{"_index":512,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":749,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":628,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":688,"title":{},"body":{"index.html":{}}}],["param",{"_index":383,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":404,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":642,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":385,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":484,"title":{},"body":{"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createexampledto",{"_index":485,"title":{},"body":{"classes/UpdateExampleDto.html":{}}}],["partialtype(createuserdto",{"_index":488,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":480,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":206,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":382,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["patch('/id/:id",{"_index":380,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pg",{"_index":652,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["pgadmin",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["points",{"_index":701,"title":{},"body":{"index.html":{}}}],["port",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["post('signup",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["postges",{"_index":727,"title":{},"body":{"index.html":{}}}],["postgres",{"_index":507,"title":{},"body":{"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["primarygeneratedcolumn",{"_index":353,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":355,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid",{"_index":344,"title":{},"body":{"entities/Example.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid()@isnotempty",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["process.env.db_database_name",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":699,"title":{},"body":{"index.html":{}}}],["project",{"_index":691,"title":{},"body":{"index.html":{}}}],["promise",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":135,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["protected",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExampleService.html":{}}}],["provide",{"_index":674,"title":{},"body":{"index.html":{}}}],["provided",{"_index":710,"title":{},"body":{"index.html":{}}}],["providers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":735,"title":{},"body":{"index.html":{}}}],["public",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["purpose",{"_index":673,"title":{},"body":{"index.html":{}}}],["query",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["quickly",{"_index":678,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{}}}],["refreshtokenguard",{"_index":174,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(userid",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":216,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["remove",{"_index":364,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":406,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":374,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":669,"title":{},"body":{"index.html":{}}}],["repository",{"_index":437,"title":{},"body":{"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["repository.save(testuser",{"_index":540,"title":{},"body":{"classes/UserSeeder.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":481,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['refreshtoken",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['sub",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":448,"title":{},"body":{"injectables/ExampleService.html":{}}}],["restful",{"_index":681,"title":{},"body":{"index.html":{}}}],["result",{"_index":733,"title":{},"body":{"index.html":{}}}],["results",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":418,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{}}}],["run(datasource",{"_index":419,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["rxjs",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["save",{"_index":430,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["scaffolded",{"_index":670,"title":{},"body":{"index.html":{}}}],["secret",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["see",{"_index":449,"title":{},"body":{"injectables/ExampleService.html":{}}}],["seedconfig",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["seeder",{"_index":417,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seederfactorymanager",{"_index":422,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seeding",{"_index":706,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["setup",{"_index":741,"title":{},"body":{"index.html":{}}}],["showuser",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["signup",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":764,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.module.ts",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cliconfig.ts",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seedconfig.ts",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:15",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":139,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":205,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":209,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:9",{"_index":208,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":475,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:12",{"_index":476,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:21",{"_index":478,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":474,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/config/cliconfig.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/seedconfig.ts",{"_index":619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db/factories/**/*{.ts,.js",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/migrations/**/*{.ts,.js",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/**/*{.ts,.js",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/example.seeder.ts",{"_index":415,"title":{},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/example.seeder.ts:6",{"_index":423,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["src/db/seeds/user.seeder.ts",{"_index":524,"title":{},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/user.seeder.ts:6",{"_index":525,"title":{},"body":{"classes/UserSeeder.html":{}}}],["src/example",{"_index":711,"title":{},"body":{"index.html":{}}}],["src/example/dto/create",{"_index":303,"title":{},"body":{"classes/CreateExampleDto.html":{},"coverage.html":{}}}],["src/example/dto/update",{"_index":483,"title":{},"body":{"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts",{"_index":336,"title":{},"body":{"entities/Example.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts:14",{"_index":345,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:17",{"_index":350,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:20",{"_index":348,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:23",{"_index":347,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:26",{"_index":343,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:29",{"_index":341,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:32",{"_index":352,"title":{},"body":{"entities/Example.html":{}}}],["src/example/example.controller.ts",{"_index":359,"title":{},"body":{"controllers/ExampleController.html":{},"coverage.html":{}}}],["src/example/example.controller.ts:26",{"_index":367,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:33",{"_index":373,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:38",{"_index":368,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:44",{"_index":371,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:49",{"_index":381,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:57",{"_index":376,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.module.ts",{"_index":410,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/example/example.service.ts",{"_index":435,"title":{},"body":{"injectables/ExampleService.html":{},"coverage.html":{}}}],["src/example/example.service.ts:12",{"_index":438,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:20",{"_index":443,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:24",{"_index":440,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:33",{"_index":441,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:37",{"_index":442,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:41",{"_index":445,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:54",{"_index":444,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/main.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/subscriber/**/*.ts",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*{.ts,.js",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":487,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":489,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:45",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":493,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":490,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":573,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stand",{"_index":679,"title":{},"body":{"index.html":{}}}],["started",{"_index":665,"title":{"index.html":{}},"body":{}}],["starting",{"_index":700,"title":{},"body":{"index.html":{}}}],["statements",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["straight",{"_index":675,"title":{},"body":{"index.html":{}}}],["strategies/accesstoken.strategy",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["string",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["subscribers",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successful",{"_index":450,"title":{},"body":{"injectables/ExampleService.html":{}}}],["super",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":729,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":672,"title":{},"body":{"index.html":{}}}],["svg",{"_index":747,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":714,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":668,"title":{},"body":{"index.html":{}}}],["test",{"_index":531,"title":{},"body":{"classes/UserSeeder.html":{}}}],["test@one.com",{"_index":539,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testboolean",{"_index":308,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["testing",{"_index":707,"title":{},"body":{"index.html":{}}}],["testnumber",{"_index":309,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testone",{"_index":536,"title":{},"body":{"classes/UserSeeder.html":{}}}],["teststring",{"_index":310,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testuser",{"_index":532,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.email",{"_index":538,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.name",{"_index":533,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.password",{"_index":537,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.username",{"_index":535,"title":{},"body":{"classes/UserSeeder.html":{}}}],["theuser",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(data",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.body",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.examplerepository.create(createexampledto",{"_index":452,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.find",{"_index":457,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.findonebyid(id",{"_index":458,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.remove(todelete",{"_index":473,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(example",{"_index":470,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(newexample",{"_index":456,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.exampleservice.create(createexampledto",{"_index":398,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findall",{"_index":401,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findonebyid(id",{"_index":403,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.getprotected",{"_index":400,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.remove(id",{"_index":407,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.update(id",{"_index":405,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.findbyid(id",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(id",{"_index":459,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.gettokens(newuser.id",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(refreshtoken",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log",{"_index":453,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.logger.log('gethello",{"_index":145,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log(`exampleservice",{"_index":468,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`userservice",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.password",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["this.updaterefreshtoken(newuser.id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(todelete",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userid",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(data.username",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(username",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(userid",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["todelete",{"_index":471,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"entities/User.html":{}}}],["token",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["triggered",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["trim",{"_index":482,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring",{"_index":492,"title":{},"body":{"entities/User.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":762,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":354,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([example",{"_index":413,"title":{},"body":{"modules/ExampleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":577,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["unique",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":722,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":680,"title":{},"body":{"index.html":{}}}],["update",{"_index":365,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["update(id",{"_index":377,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":338,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":351,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updateexampledto",{"_index":379,"title":{"classes/UpdateExampleDto.html":{}},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["updateexampledto.description",{"_index":467,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.isactive",{"_index":465,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.testnumber",{"_index":463,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.teststring",{"_index":461,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updaterefreshtoken",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":469,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["updatetestdto",{"_index":378,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updateuserdto",{"_index":486,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":742,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":689,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('/id/:id",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('protected')@apibearerauth('bearerauth",{"_index":372,"title":{},"body":{"controllers/ExampleController.html":{}}}],["useguards(accesstokenguard)@patch('/id/:id",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(refreshtokenguard",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@get('refresh",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":254,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.refreshtoken",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfactory",{"_index":527,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userfactory.savemany(numrecords",{"_index":541,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["username",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":576,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/user.entity",{"_index":526,"title":{},"body":{"classes/UserSeeder.html":{}}}],["users/users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":542,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userseeder",{"_index":523,"title":{"classes/UserSeeder.html":{}},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":232,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":511,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["uuid_v4",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["validate",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":477,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":212,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":766,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":754,"title":{},"body":{"properties.html":{}}}],["void",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["way",{"_index":677,"title":{},"body":{"index.html":{}}}],["without",{"_index":683,"title":{},"body":{"index.html":{}}}],["work",{"_index":698,"title":{},"body":{"index.html":{}}}],["world",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class AccessTokenGuard extends AuthGuard('jwt') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\ntype JwtPayload = {\n  sub: string\n  username: string\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET')\n    })\n  }\n\n  validate(payload: JwtPayload) {\n    return payload\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        // import { Controller, Get, Post, Request, UseGuards } from '@nestjs/common'\nimport { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AppService } from './app.service'\n// import { AuthService } from './auth_prev/auth.service'\n// import { JwtAuthGuard } from './auth_prev/jwr-auth.guard'\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  // constructor(private readonly appService: AppService) { }\n  // constructor(private readonly authService: AuthService, private readonly appService: AppService) { }\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly appService: AppService) { }\n\n  //  auth implementation https://www.youtube.com/watch?v=_L225zpUK0M&list=WL&index=17\n\n  // @Post('login')\n  // login(@Request() req): any {\n  //   return this.authService.login(req.body)\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('protected')\n  // showUser(): object {\n  //   return { msg: 'protected' }\n  // }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExampleModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\n\nimport { ExampleModule } from './example/example.module'\n\nimport { UsersModule } from './users/users.module'\nimport { AuthModule } from './auth/auth.module'\n\nimport dbConfig from './config/dbConfig'\n\nconst ENV = process.env.NODE_ENV\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [dbConfig]\n    }),\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => cfg.get('database')\n    }),\n    ExampleModule,\n    UsersModule,\n    UsersModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class AppService {\n  @Inject(ConfigService)\n  public config: ConfigService\n\n  logger: Logger\n\n  constructor() {\n    this.logger = new Logger()\n  }\n\n  getHello(): string {\n    this.logger.log('getHello is triggered!')\n    return 'Hello World!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Request } from 'express'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthService } from './auth.service'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private authService: AuthService) { }\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto)\n  }\n\n  @Post('login')\n  login(@Body() data: AuthDto) {\n    return this.authService.login(data)\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Get('refresh')\n  refreshTokens(@Req() req: Request) {\n    // console.log('req.user: ', req.user)\n\n    const userId = req.user['sub']\n    const refreshToken = req.user['refreshToken']\n    return this.authService.refreshTokens(userId, refreshToken)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub'])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator'\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\n\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy'\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy'\n\nimport { UsersModule } from '../users/users.module'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  // TODO: JwtModule.register options?\n  imports: [UsersModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                hashData\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashData\n                        \n                    \n                \n            \n            \n                \nhashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable\n} from '@nestjs/common'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { UsersService } from '../users/users.service'\nimport * as argon2 from 'argon2'\nimport { JwtService } from '@nestjs/jwt'\nimport { ConfigService } from '@nestjs/config'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) { }\n  async signUp(createUserDto: CreateUserDto): Promise {\n    // Check if user exists\n    const userExists = await this.usersService.findByUsername(\n      createUserDto.username\n    )\n\n    if (userExists) {\n      throw new BadRequestException('User already exists')\n    }\n\n    // Hash password in the user entity\n    const newUser = await this.usersService.create(createUserDto)\n\n    const tokens = await this.getTokens(newUser.id, newUser.username)\n    await this.updateRefreshToken(newUser.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async login(data: AuthDto) {\n    // Check if user exists\n    const user = await this.usersService.findByUsername(data.username)\n    if (!user) throw new BadRequestException('User does not exist')\n\n    const passwordMatches = await argon2.verify(user.password, data.password)\n    if (!passwordMatches) throw new BadRequestException('Password is incorrect')\n\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async logout(userId: string) {\n    return this.usersService.update(userId, { refreshToken: null })\n  }\n\n  hashData(data: string) {\n    return argon2.hash(data)\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshToken = await this.hashData(refreshToken)\n    await this.usersService.update(userId, {\n      refreshToken: hashedRefreshToken\n    })\n  }\n\n  async getTokens(userId: string, username: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_SECRET'),\n          expiresIn: '15m'\n        }\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '7d'\n        }\n      )\n    ])\n\n    return {\n      accessToken,\n      refreshToken\n    }\n  }\n\n  async refreshTokens(userId: string, refreshToken: string) {\n    const user = await this.usersService.findById(userId)\n    if (!user || !user.refreshToken)\n      throw new ForbiddenException('Access Denied')\n\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken\n    )\n\n    if (!refreshTokenMatches) throw new ForbiddenException('Access Denied')\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n\n    return tokens\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExampleDto.html":{"url":"classes/CreateExampleDto.html","title":"class - CreateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/create-example.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isActive\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                testBoolean\n                            \n                            \n                                    Optional\n                                testNumber\n                            \n                            \n                                    Optional\n                                testString\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsUUID\n} from 'class-validator'\n\nexport class CreateExampleDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  testString?: string\n\n  @IsNumber()\n  testNumber?: number\n\n  @IsBoolean()\n  testBoolean?: boolean\n\n  @IsBoolean()\n  isActive?: boolean\n\n  @IsString()\n  name?: string\n\n  @IsString()\n  description?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\nexport class CreateUserDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  @IsNotEmpty()\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsEmail()\n  email: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n\n  @IsString()\n  refreshToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Example.html":{"url":"entities/Example.html","title":"entity - Example","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Example\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/entities/example.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                testNumber\n                            \n                            \n                                testString\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsUUID } from 'class-validator'\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class Example {\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  id: string\n\n  @Column({ nullable: true })\n  testString: string\n\n  @Column()\n  testNumber: number\n\n  @Column({ default: true })\n  isActive: boolean\n\n  @Column()\n  description: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExampleController.html":{"url":"controllers/ExampleController.html","title":"controller - ExampleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExampleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                example\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('protected')@ApiBearerAuth('bearerAuth')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTestDto: UpdateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTestDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseUUIDPipe,\n  UseGuards\n} from '@nestjs/common'\nimport { ExampleService } from './example.service'\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\n\n@ApiTags('example')\n@Controller('example')\nexport class ExampleController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly exampleService: ExampleService) { }\n\n  @Post()\n  // @ApiBadRequestResponse({ description: 'Error creating new example.' })\n  create(@Body() createExampleDto: CreateExampleDto) {\n    return this.exampleService.create(createExampleDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('protected')\n  @ApiBearerAuth('bearerAuth')\n  getProtected(): string {\n    return this.exampleService.getProtected()\n  }\n\n  @Get()\n  findAll() {\n    return this.exampleService.findAll()\n  }\n\n  @Get('/id/:id')\n  // @ApiBadRequestResponse()\n  findOneById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.findOneById(id)\n  }\n\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateTestDto: UpdateExampleDto\n  ) {\n    return this.exampleService.update(id, updateTestDto)\n  }\n\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExampleModule.html":{"url":"modules/ExampleModule.html","title":"module - ExampleModule","body":"\n                   \n\n\n\n\n    Modules\n    ExampleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\n\nExampleService\n\nExampleService\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/example/example.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExampleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExampleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { ExampleService } from './example.service'\nimport { ExampleController } from './example.controller'\n\nimport { Example } from './entities/example.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Example])],\n  controllers: [ExampleController],\n  providers: [ExampleService]\n})\nexport class ExampleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleSeeder.html":{"url":"classes/ExampleSeeder.html","title":"class - ExampleSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/example.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/example.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { Example } from '../../example/entities/example.entity'\n\nexport default class ExampleSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const exampleFactory = await factoryManager.get(Example)\n    const numRecords = 5\n\n    // save numRecords factory generated entities, to the database\n    await exampleFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExampleService.html":{"url":"injectables/ExampleService.html","title":"injectable - ExampleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExampleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exampleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/example/example.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exampleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateExampleDto: UpdateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExampleDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/example/example.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\n\nimport { Example } from './entities/example.entity'\n\n@Injectable()\nexport class ExampleService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(Example) private exampleRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  getProtected(): string {\n    return 'This is a protected resource. If you see this, authentication was successful.'\n  }\n\n  create(createExampleDto: CreateExampleDto) {\n    const newExample = this.exampleRepository.create(createExampleDto)\n\n    this.logger.log(\n      `ExampleService created a new Example: ${newExample.testString}`\n    )\n    return this.exampleRepository.save(newExample)\n  }\n\n  findAll() {\n    return this.exampleRepository.find()\n  }\n\n  findOneById(id: string) {\n    return this.exampleRepository.findOneById(id)\n  }\n\n  async update(id: string, updateExampleDto: UpdateExampleDto) {\n    const example = await this.findOneById(id)\n\n    example.testString = updateExampleDto.testString\n    example.testNumber = updateExampleDto.testNumber\n    example.isActive = updateExampleDto.isActive\n    example.description = updateExampleDto.description\n\n    this.logger.log(`ExampleService updates an Example: ${id}`)\n\n    return this.exampleRepository.save(example)\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findOneById(id)\n\n    this.logger.log(`ExampleService deletes an Example: ${id}`)\n\n    return this.exampleRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { Request } from 'express'\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true\n    })\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim()\n    return { ...payload, refreshToken }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExampleDto.html":{"url":"classes/UpdateExampleDto.html","title":"class - UpdateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/update-example.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateExampleDto } from './create-example.dto'\n\nexport class UpdateExampleDto extends PartialType(CreateExampleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateUserDto } from './create-user.dto'\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  BeforeInsert,\n  BeforeUpdate\n} from 'typeorm'\n\nimport { hash } from 'argon2'\nimport { IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\n//  if there are errors about uuid_v4, go into Postgres cmd line / pgAdmin / etc. and run\n//    create extension \"uuid-ossp\";\n//  like a query\n@Entity()\nexport class User {\n  // hash the password before insert / update\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    // TODO: this needs a salt\n    this.password = await hash(this.password)\n  }\n\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  name: string\n\n  @Column({ unique: true, nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  username: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  password: string\n\n  @Column({ unique: true, nullable: true })\n  @IsString()\n  email: string\n\n  @Column({ nullable: true })\n  refreshToken: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSeeder.html":{"url":"classes/UserSeeder.html","title":"class - UserSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/user.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/user.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { User } from '../../users/entities/user.entity'\n\nexport default class UserSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const userFactory = await factoryManager.get(User)\n    const repository = dataSource.getRepository(User)\n\n    const numRecords = 3\n\n    //  create test user\n    const testUser = new User()\n\n    testUser.name = 'Test One'\n    testUser.username = 'testOne'\n    testUser.password = 'testOne'\n    testUser.email = 'test@one.com'\n\n    await repository.save(testUser)\n\n    // save numRecords factory generated entities, to the database\n    await userFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/username/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ParseUUIDPipe\n} from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { ApiBadRequestResponse, ApiTags } from '@nestjs/swagger'\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly usersService: UsersService) { }\n\n  @ApiBadRequestResponse()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto)\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll()\n  }\n\n  @Get('/id/:id')\n  findById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.findById(id)\n  }\n\n  @Get('/username/:username')\n  findByUsername(@Param('username') username: string) {\n    return this.usersService.findByUsername(username)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.usersService.update(id, updateUserDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { User } from './entities/user.entity'\nimport { UsersService } from './users.service'\nimport { UsersController } from './users.controller'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\n\nimport { User } from './entities/user.entity'\n\n@Injectable()\nexport class UsersService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(User) private userRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = this.userRepository.create(createUserDto)\n\n    this.logger.log(`UserService created new user: ${newUser.id}`)\n    return this.userRepository.save(newUser)\n  }\n\n  async findAll(): Promise {\n    this.logger.log(`UserService findAll`)\n    return this.userRepository.find()\n  }\n\n  async findById(id: string): Promise {\n    this.logger.log(`UserService findById: ${id}`)\n    return this.userRepository.findOne({ where: { id } })\n  }\n\n  async findByUsername(username: string): Promise {\n    this.logger.log(`UserService findByUsername: ${username}`)\n    return this.userRepository.findOne({ where: { username } })\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const theUser = await this.findById(id)\n\n    this.logger.log(`UserService updates User: ${id}`)\n\n    // https://stackoverflow.com/questions/47792808/typeorm-update-item-and-return-it\n    return this.userRepository.save({\n      ...theUser, // existing fields\n      ...updateUserDto // updated fields\n    })\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findById(id)\n\n    this.logger.log(`ExampleService deletes a User: ${id}`)\n\n    return this.userRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            cliConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            configOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            envFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            seedConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/seeds/example.seeder.ts\n            \n            class\n            ExampleSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/db/seeds/user.seeder.ts\n            \n            class\n            UserSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/example/dto/create-example.dto.ts\n            \n            class\n            CreateExampleDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/example/dto/update-example.dto.ts\n            \n            class\n            UpdateExampleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/entities/example.entity.ts\n            \n            entity\n            Example\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/example.controller.ts\n            \n            controller\n            ExampleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/example/example.service.ts\n            \n            injectable\n            ExampleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            argon2 : ^0.30.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            express-basic-auth : ^1.2.1\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.12\n        \n            typeorm-extension : ^2.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS API Template\n\n\n\nThis repo is a scaffolded / boilerplate implementation of NestJS and supporting modules.\nThe purpose of this repo is to provide a straight-forward way to quickly stand up a RESTful API NestJS app, without having to install / configure the many packages that are useful for an average project.\nAn instance of this repo is hosted here, where it connects to a database hosted at another domain.\nThis is a work-in-progress.\nStarting points for database connectivity, API endpoint generation, entity creation, data seeding, testing, authentication, etc. are available.\nExample code is provided in the src/example folder.\nIncludes\n\nNestJS\nSwagger / OpenAPI documentation\nBasic logging\nCompodoc\n\n\nDocker\nDockerfile\ndocker-compose.yaml file\n\n\nTypeORM\nPassport JS\nJWT Strategy\n\n\nPostgres connectivity\nTesting\nUnit testing\nE2E / endpoint testing\n\n\nAdditional packages\nargon2\ntypeorm-extention\nclass-validator\ncookie-parser\nhelmet\npg (postgres driver)\nuuid-ossp (postges extention to enable uuid support)\n@jest-mock/express (for testing. mocks request and result objects)\nexpress-basic-auth (provides basic authentication for Swagger API doc)\n\n\n\nLinks to more details\n\nInstallation and setup\nDocker\nHow to use\nMigrations / Seeding\nTesting\nDocumentation\nDev notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExampleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : ISC\n        \n            Author : Matt Burnett mburnett@tutanota.de\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cliConfig   (src/.../cliConfig.ts)\n                        \n                        \n                            configOptions   (src/.../cliConfig.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            ENV   (src/.../cliConfig.ts)\n                        \n                        \n                            ENV   (src/.../seedConfig.ts)\n                        \n                        \n                            envFile   (src/.../cliConfig.ts)\n                        \n                        \n                            envFile   (src/.../seedConfig.ts)\n                        \n                        \n                            options   (src/.../seedConfig.ts)\n                        \n                        \n                            seedConfig   (src/.../seedConfig.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cliConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(configOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: true,\n  // don't update database here. use migration:run instead.\n  synchronize: false,\n  migrationsRun: false,\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  migrations: [__dirname + '/../db/migrations/*.{js,ts}'],\n  migrationsTableName: 'migrations',\n  // Postgres database hosting expects SSL, but localhost doesn't.\n  ssl: process.env.NODE_ENV === 'deployed' ? true : false\n  // subscribers: ['src/subscriber/**/*.ts']\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : !ENV ? '.env' : `.env.${ENV}`\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/seedConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : !ENV ? '.env' : `.env.${ENV}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  migrationsTableName: 'migrations',\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: false,\n  // don't update database here. use migration:run instead.\n  synchronize: false,\n  // name: 'default',\n  entities: ['src/**/**.entity{.ts,.js}'],\n  migrations: ['src/db/migrations/**/*{.ts,.js}'],\n  subscribers: ['src/subscriber/**/*{.ts,.js}'],\n  seeds: ['src/db/seeds/**/*{.ts,.js}'],\n  factories: ['src/db/factories/**/*{.ts,.js}'],\n  // Postgres database hosting expects SSL, but localhost doesn't.\n  ssl: process.env.NODE_ENV === 'deployed' ? true : false\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
