var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.717,1,1.741]],["body/injectables/AccessTokenGuard.html",[0,1.193,1,2.897,2,1.842,3,0.447,4,0.447,5,0.393,6,3.728,7,0.545,8,0.03,9,0.979,10,3.728,11,2.614,12,1.842,13,1.842,14,1.842,15,1.701,16,1.842,17,0.447,18,0.02,19,2.378,20,3.728,21,0.025,22,0.025]],["title/injectables/AccessTokenStrategy.html",[0,0.717,23,1.914]],["body/injectables/AccessTokenStrategy.html",[0,1.009,2,1.419,3,0.345,4,0.345,5,0.303,7,0.555,8,0.03,9,0.754,11,2.014,17,0.345,18,0.015,19,1.832,21,0.021,22,0.021,23,2.695,24,2.506,25,0.53,26,1.499,27,3.843,28,1.832,29,2.872,30,3.479,31,1.009,32,3.428,33,1.753,34,1.283,35,0.96,36,1.621,37,4.587,38,4.821,39,3.428,40,3.843,41,1.12,42,1.832,43,2.872,44,2.872,45,2.506,46,2.232,47,2.061,48,2.872,49,1.387,50,1.54,51,3.428,52,1.832,53,2.014,54,2.872,55,2.872,56,2.872,57,2.872,58,3.428,59,1.31]],["title/controllers/AppController.html",[60,1.349,61,2.122]],["body/controllers/AppController.html",[3,0.307,4,0.307,5,0.269,7,0.575,8,0.031,9,0.932,12,1.263,13,1.263,14,1.263,15,1.166,16,1.263,17,0.307,18,0.014,21,0.019,22,0.019,25,0.472,26,1.385,31,0.671,41,0.997,49,1.281,52,2.601,53,3.089,59,1.86,60,2.015,61,2.759,62,1.263,63,2.556,64,4.405,65,1.166,66,3.05,67,1.986,68,1.986,69,1.986,70,1.986,71,1.492,72,3.134,73,2.556,74,2.38,75,3.05,76,3.05,77,3.05,78,3.05,79,3.05,80,1.986,81,2.556,82,2.556,83,3.05,84,2.556,85,3.05,86,2.23,87,3.05,88,3.05,89,2.556,90,3.05,91,3.05,92,3.05,93,2.556,94,3.05]],["title/modules/AppModule.html",[95,1.464,96,2.122]],["body/modules/AppModule.html",[3,0.285,4,0.285,5,0.25,7,0.6,8,0.03,9,0.624,12,1.174,13,1.174,14,1.174,15,1.084,16,1.174,17,0.285,18,0.013,21,0.018,22,0.018,30,2.992,42,1.516,47,1.274,61,3.047,62,1.666,72,2.986,73,2.376,95,1.808,96,4.091,97,1.274,98,1.968,99,2.376,100,2.376,101,2.376,102,3.282,103,3.282,104,3.192,105,2.365,106,1.666,107,1.516,108,2.836,109,2.621,110,2.621,111,2.836,112,2.073,113,1.516,114,2.836,115,2.836,116,2.376,117,2.836,118,2.836,119,1.174,120,2.376,121,2.836,122,2.376,123,2.376,124,2.836,125,4.025,126,2.836,127,1.847,128,1.666,129,1.516,130,1.847,131,2.836,132,2.376,133,2.836,134,1.387,135,2.836,136,2.836,137,2.836,138,1.666,139,2.836]],["title/injectables/AppService.html",[0,0.717,72,1.741]],["body/injectables/AppService.html",[0,1.041,2,1.487,3,0.361,4,0.361,5,0.317,7,0.476,8,0.03,9,0.791,17,0.361,18,0.016,21,0.022,22,0.022,25,0.556,26,1.547,28,2.828,30,3.109,31,1.238,35,0.879,41,1.174,42,1.92,49,1.431,59,1.373,64,4.712,65,1.373,72,2.529,132,3.01,140,3.01,141,1.809,142,3.868,143,5.291,144,4.472,145,4.732,146,3.593,147,4.732,148,3.593,149,2.626,150,1.487,151,3.593,152,3.593,153,3.593,154,3.593]],["title/controllers/AuthController.html",[60,1.349,155,2.122]],["body/controllers/AuthController.html",[1,1.34,3,0.252,4,0.252,5,0.221,7,0.571,8,0.031,9,0.552,12,1.038,13,1.038,14,1.038,15,0.958,16,1.038,17,0.252,18,0.011,21,0.017,22,0.017,25,0.388,26,1.203,31,1.058,33,1.838,34,1.345,35,0.893,36,1.699,41,1.572,47,1.126,52,1.34,59,1.668,60,1.038,62,1.038,65,1.838,67,1.632,68,3.604,69,1.632,70,1.632,71,1.226,74,2.134,81,2.1,84,3.084,86,3.744,127,1.632,128,1.472,129,1.34,130,1.632,155,2.397,156,2.1,157,1.832,158,3.084,159,3.084,160,3.084,161,3.084,162,2.1,163,2.825,164,2.506,165,2.691,166,2.506,167,2.506,168,2.506,169,2.506,170,2.506,171,2.506,172,2.506,173,2.1,174,2.406,175,3.681,176,2.506,177,1.832,178,1.832,179,1.832,180,1.632,181,2.506,182,2.1,183,1.472,184,2.1,185,2.1,186,2.506,187,2.506,188,2.506,189,2.506,190,2.506,191,2.506,192,2.506,193,2.506,194,2.506,195,2.506,196,2.506,197,1.8,198,2.1,199,2.506,200,2.163,201,2.506,202,2.506,203,1.832,204,2.506,205,2.506,206,2.506]],["title/classes/AuthDto.html",[18,0.014,163,1.914]],["body/classes/AuthDto.html",[3,0.411,4,0.411,5,0.362,7,0.411,8,0.03,17,0.411,18,0.023,21,0.024,22,0.024,25,0.633,31,1.132,35,0.956,49,1.786,50,2.529,65,1.967,141,1.967,163,3.024,207,1.839,208,3.429,209,3.307,210,4.312,211,4.093,212,4.093,213,3.666,214,3.666,215,2.002]],["title/modules/AuthModule.html",[95,1.464,102,1.914]],["body/modules/AuthModule.html",[3,0.315,4,0.315,5,0.276,7,0.594,8,0.03,9,0.689,12,1.295,13,1.295,14,1.295,15,1.196,16,1.295,17,0.315,18,0.014,21,0.02,22,0.02,23,3.386,47,1.937,62,1.785,74,2.818,95,1.937,97,1.406,98,2.108,102,3.697,104,3.08,105,2.533,106,1.838,107,1.672,109,2.808,110,2.808,116,2.622,127,2.808,128,2.533,129,2.304,130,2.808,155,3.212,184,2.622,216,2.622,217,3.129,218,2.622,219,3.386,220,3.129,221,3.129,222,2.287,223,3.129,224,3.129,225,3.129,226,2.287,227,4.311,228,2.287]],["title/injectables/AuthService.html",[0,0.717,74,1.593]],["body/injectables/AuthService.html",[0,0.559,2,0.644,3,0.157,4,0.157,5,0.137,7,0.467,8,0.03,9,0.343,17,0.157,18,0.007,21,0.012,22,0.012,25,0.241,26,0.831,28,1.359,30,2.727,31,1.065,33,1.85,34,1.354,35,0.899,36,1.711,41,1.517,42,0.832,47,0.699,48,2.13,49,1.832,50,1.842,59,1.681,74,1.243,80,2.098,127,1.014,128,0.915,129,0.832,130,1.014,134,2.844,150,1.697,158,2.13,159,2.13,160,2.13,161,2.13,162,2.13,163,2.186,165,1.858,173,2.13,174,1.842,182,1.304,183,0.915,185,1.304,197,2.58,198,3.686,200,3.099,209,0.915,222,1.138,229,1.304,230,2.542,231,2.542,232,2.542,233,1.557,234,2.151,235,4.641,236,1.557,237,2.542,238,1.557,239,2.719,240,2.542,241,1.557,242,1.557,243,2.542,244,1.557,245,2.542,246,1.557,247,1.557,248,1.656,249,2.542,250,1.557,251,1.557,252,1.557,253,1.557,254,1.656,255,2.542,256,2.27,257,3.222,258,2.542,259,3.011,260,1.557,261,1.557,262,4.1,263,2.542,264,1.557,265,1.304,266,0.761,267,1.304,268,1.304,269,4.399,270,1.557,271,1.557,272,1.557,273,3.222,274,1.557,275,1.557,276,2.542,277,1.557,278,1.557,279,1.557,280,1.557,281,2.542,282,2.542,283,2.542,284,2.542,285,1.557,286,1.557,287,2.542,288,1.557,289,2.542,290,1.557,291,2.542,292,2.542,293,1.557,294,2.542,295,1.557,296,1.557,297,1.557,298,1.557,299,2.542,300,2.542,301,2.542,302,2.542,303,1.557]],["title/classes/CreateExampleDto.html",[18,0.014,304,1.741]],["body/classes/CreateExampleDto.html",[3,0.301,4,0.301,5,0.264,7,0.301,8,0.03,17,0.301,18,0.019,21,0.019,22,0.019,25,0.463,31,1.284,34,1.348,35,1.083,36,2.207,49,1.8,65,2.23,141,1.598,207,1.345,213,2.723,214,3.799,215,1.464,304,2.235,305,4.986,306,2.188,307,3.138,308,2.165,309,4.037,310,4.818,311,4.037,312,4.037,313,2.994,314,2.508,315,2.994,316,4.37,317,5.487,318,2.994,319,2.994,320,2.994,321,3.503,322,4.818,323,2.994,324,2.994,325,2.723]],["title/classes/CreateUserDto.html",[18,0.014,174,1.464]],["body/classes/CreateUserDto.html",[3,0.325,4,0.325,5,0.286,7,0.325,8,0.03,17,0.325,18,0.02,21,0.02,22,0.02,25,0.5,31,1.281,34,1.404,35,1.081,49,1.914,50,2.254,65,2.225,141,1.685,174,1.981,200,2.948,207,1.453,209,2.948,210,4.204,213,3.673,214,3.791,215,1.581,308,2.254,314,2.709,325,2.871,326,4.991,327,2.364,328,4.204,329,5.018,330,3.233,331,3.233,332,3.233,333,3.233,334,3.233,335,3.233]],["title/entities/Example.html",[266,1.593,336,1.464]],["body/entities/Example.html",[3,0.307,4,0.307,5,0.269,7,0.426,8,0.03,17,0.307,18,0.019,21,0.019,22,0.019,25,0.472,31,1.29,35,1.089,49,1.729,65,2.241,119,1.263,138,3.089,141,1.619,215,1.492,266,2.072,307,3.169,308,2.187,309,4.077,311,4.077,312,4.077,316,3.549,321,3.549,325,2.759,336,1.903,337,1.63,338,2.556,339,4.077,340,4.077,341,4.405,342,4.077,343,3.05,344,4.913,345,3.05,346,3.05,347,3.05,348,3.05,349,3.05,350,3.05,351,2.556,352,3.05,353,4.077,354,3.05,355,2.556,356,2.556,357,2.556,358,1.986]],["title/controllers/ExampleController.html",[60,1.349,359,2.122]],["body/controllers/ExampleController.html",[1,1.234,3,0.232,4,0.232,5,0.204,7,0.522,8,0.03,9,0.508,12,0.956,13,0.956,14,0.956,15,0.883,16,0.956,17,0.232,18,0.01,21,0.016,22,0.016,25,0.357,26,1.132,31,1.144,33,1.766,34,1.292,35,0.858,36,1.632,41,1.699,49,1.773,52,1.234,53,1.357,59,1.986,60,0.956,62,0.956,65,1.986,67,2.707,69,1.504,70,1.504,71,1.129,89,1.935,150,1.912,157,1.688,177,2.532,179,1.688,203,1.688,304,2.778,307,1.504,308,2.335,336,1.557,359,2.256,360,1.935,361,1.557,362,3.008,363,2.902,364,3.87,365,2.256,366,2.442,367,1.935,368,2.309,369,2.309,370,1.935,371,2.902,372,2.309,373,2.309,374,2.309,375,1.504,376,2.902,377,2.309,378,1.504,379,4.619,380,2.714,381,2.902,382,2.309,383,1.935,384,1.935,385,1.935,386,3.87,387,2.222,388,1.935,389,1.504,390,2.532,391,1.504,392,2.309,393,2.309,394,2.902,395,2.309,396,2.309,397,1.935,398,2.309,399,2.309,400,2.309,401,2.309,402,2.309,403,1.935,404,2.309,405,1.935,406,2.309]],["title/modules/ExampleModule.html",[95,1.464,103,1.914]],["body/modules/ExampleModule.html",[3,0.389,4,0.389,5,0.341,7,0.601,8,0.03,9,0.85,17,0.389,18,0.017,21,0.023,22,0.023,62,2.054,95,2.23,97,1.736,98,2.427,103,3.596,105,2.915,106,2.271,107,2.066,109,3.231,110,2.517,112,2.825,113,2.066,336,1.736,359,3.569,387,3.271,388,3.238,407,3.238,408,3.238,409,3.865,410,3.865,411,3.238,412,3.865]],["title/classes/ExampleSeeder.html",[18,0.014,413,2.382]],["body/classes/ExampleSeeder.html",[3,0.352,4,0.352,5,0.309,7,0.525,8,0.03,17,0.352,18,0.016,21,0.021,22,0.021,25,0.542,26,1.521,31,0.771,33,1.338,34,0.98,35,0.65,36,1.237,41,1.145,119,1.926,134,2.555,142,3.819,197,2.275,207,1.573,248,3.03,259,2.487,336,1.573,337,1.872,358,2.28,413,3.401,414,2.934,415,3.898,416,4.378,417,3.819,418,2.934,419,4.355,420,4.378,421,4.664,422,3.502,423,2.28,424,3.502,425,3.502,426,3.502,427,3.898,428,3.502,429,2.934,430,2.934,431,2.934,432,2.28,433,3.502]],["title/injectables/ExampleService.html",[0,0.717,387,1.741]],["body/injectables/ExampleService.html",[0,0.725,2,0.894,3,0.217,4,0.217,5,0.191,7,0.509,8,0.03,9,0.475,17,0.217,18,0.01,21,0.015,22,0.015,25,0.334,26,1.077,28,1.76,31,1.195,33,1.837,34,1.345,35,0.941,36,1.699,41,1.656,49,1.745,59,1.936,80,1.407,93,1.81,113,1.155,119,0.894,134,2.477,141,1.259,144,3.851,149,1.579,150,1.364,197,1.952,226,1.579,239,2.408,259,1.76,304,2.569,308,2.16,336,2.16,361,1.48,362,2.908,363,2.759,364,3.741,365,2.145,366,1.935,367,2.759,370,2.759,375,2.145,378,2.145,380,3.095,387,2.134,389,1.407,390,2.408,391,1.407,411,1.81,434,1.81,435,2.16,436,3.264,437,3.294,438,3.294,439,2.16,440,2.16,441,2.16,442,2.16,443,2.16,444,2.16,445,1.81,446,2.16,447,2.16,448,2.16,449,2.16,450,2.16,451,1.81,452,2.16,453,2.16,454,2.16,455,2.16,456,3.294,457,2.16,458,2.16,459,1.81,460,2.16,461,2.16,462,2.16,463,2.16,464,2.16,465,2.16,466,2.16,467,2.16,468,2.16,469,2.16,470,2.16,471,2.16,472,2.759,473,1.81,474,2.16,475,1.81,476,1.81,477,2.16]],["title/injectables/RefreshTokenGuard.html",[0,0.717,180,2.122]],["body/injectables/RefreshTokenGuard.html",[0,1.189,2,1.834,3,0.445,4,0.445,5,0.391,7,0.543,8,0.03,9,0.975,10,3.711,11,2.602,12,1.834,13,1.834,14,1.834,15,1.693,16,1.834,17,0.445,18,0.02,19,2.368,20,3.711,21,0.025,22,0.025,129,2.368,180,3.52,478,3.711]],["title/injectables/RefreshTokenStrategy.html",[0,0.717,219,1.914]],["body/injectables/RefreshTokenStrategy.html",[0,0.984,2,1.366,3,0.332,4,0.332,5,0.291,7,0.571,8,0.03,9,0.726,11,1.938,17,0.332,18,0.015,19,1.763,21,0.02,22,0.02,25,0.51,26,1.461,27,3.745,28,1.763,29,2.764,30,3.44,31,0.984,33,1.709,34,1.251,35,0.83,36,1.58,40,4.553,41,1.078,42,1.763,43,3.745,44,2.764,45,3.268,46,2.149,47,2.009,52,1.763,53,1.938,54,2.764,55,2.764,56,2.764,57,2.764,59,1.261,68,3.539,86,2.412,129,1.763,138,1.938,178,2.412,197,1.614,200,2.626,219,2.626,479,2.764,480,3.299,481,4.47,482,3.299,483,3.299,484,3.299,485,3.299,486,3.299]],["title/classes/UpdateExampleDto.html",[18,0.014,380,1.914]],["body/classes/UpdateExampleDto.html",[3,0.46,4,0.46,5,0.404,7,0.554,8,0.029,17,0.46,18,0.02,19,2.446,21,0.025,22,0.025,71,2.238,207,2.056,304,2.446,306,3.345,361,2.056,380,3.238,390,3.345,487,3.834,488,3.834,489,4.576]],["title/classes/UpdateUserDto.html",[18,0.014,490,1.914]],["body/classes/UpdateUserDto.html",[3,0.46,4,0.46,5,0.404,7,0.554,8,0.029,17,0.46,18,0.02,19,2.446,21,0.025,22,0.025,71,2.238,174,2.056,183,2.688,207,2.056,327,3.345,361,2.056,488,3.834,490,3.238,491,3.834,492,4.576]],["title/entities/User.html",[256,1.593,266,1.593]],["body/entities/User.html",[3,0.239,4,0.239,5,0.21,7,0.425,8,0.03,15,0.909,17,0.239,18,0.016,21,0.016,22,0.016,25,0.368,31,1.23,34,1.183,35,1.038,49,1.807,50,1.9,65,2.137,119,0.984,134,1.163,138,3.197,141,1.353,200,2.485,209,2.753,213,3.263,214,3.263,215,1.163,226,1.738,254,1.548,256,1.731,259,1.271,265,2.966,266,1.731,308,1.9,325,2.305,328,3.544,337,1.271,339,3.544,340,3.544,341,3.926,342,3.544,344,4.401,351,3.544,353,3.544,355,1.992,356,1.992,357,4.559,361,1.068,366,1.397,417,1.738,423,1.548,493,1.992,494,2.377,495,3.54,496,2.377,497,2.377,498,2.377,499,2.377,500,4.23,501,2.377,502,2.377,503,2.377,504,2.377,505,2.377,506,3.54,507,3.54,508,2.377,509,2.377,510,2.377,511,1.738,512,2.377,513,2.377,514,1.992,515,2.377,516,2.377,517,2.377,518,2.377,519,2.377,520,2.377,521,2.377,522,2.377,523,2.377,524,2.377,525,3.544,526,3.54]],["title/classes/UserSeeder.html",[18,0.014,527,2.382]],["body/classes/UserSeeder.html",[3,0.32,4,0.32,5,0.281,7,0.5,8,0.03,17,0.32,18,0.014,21,0.02,22,0.02,25,0.492,26,1.425,31,0.7,33,1.216,34,0.89,35,0.591,36,1.124,41,1.04,119,1.805,120,2.665,134,2.433,142,3.637,150,1.317,197,2.617,207,1.429,248,2.839,256,2.433,259,2.659,337,1.7,358,2.071,361,1.429,415,3.653,416,4.168,417,3.637,418,2.665,419,4.234,420,4.168,421,4.484,423,2.071,427,3.653,429,2.665,430,2.665,431,2.665,432,2.071,436,2.325,527,3.187,528,2.665,529,3.18,530,3.18,531,3.18,532,3.18,533,3.18,534,3.18,535,4.36,536,3.18,537,3.18,538,3.18,539,4.36,540,3.18,541,3.18,542,3.18,543,3.18,544,3.18]],["title/controllers/UsersController.html",[60,1.349,545,2.122]],["body/controllers/UsersController.html",[1,1.231,3,0.232,4,0.232,5,0.203,7,0.522,8,0.03,9,0.507,12,0.954,13,0.954,14,0.954,15,0.881,16,0.954,17,0.232,18,0.01,21,0.016,22,0.016,25,0.356,26,1.13,31,1.143,33,1.89,34,1.383,35,0.918,36,1.747,41,1.697,49,1.795,50,1.554,52,1.231,53,1.354,59,1.985,60,0.954,62,0.954,65,1.985,67,2.252,69,1.5,70,1.5,71,1.127,150,1.719,157,1.684,174,2.333,177,2.528,179,1.684,183,2.032,203,2.528,234,2.03,268,1.93,308,2.333,361,1.554,362,3.005,365,2.252,366,2.439,371,2.897,375,1.5,376,1.93,378,1.5,381,1.93,383,1.93,384,1.93,385,1.93,386,3.866,389,1.5,391,1.5,394,2.897,397,1.93,403,1.93,405,1.93,490,3.254,545,2.252,546,1.93,547,2.304,548,2.897,549,2.897,550,1.93,551,2.304,552,2.304,553,2.304,554,1.93,555,2.304,556,1.93,557,3.458,558,2.304,559,2.304,560,2.304,561,2.304,562,2.304,563,1.93,564,2.304,565,2.304,566,2.304,567,2.304,568,2.304,569,2.304,570,2.304,571,2.304,572,2.304]],["title/modules/UsersModule.html",[95,1.464,104,1.741]],["body/modules/UsersModule.html",[3,0.363,4,0.363,5,0.318,7,0.588,8,0.03,9,0.794,12,1.493,13,1.493,14,1.493,15,1.378,16,1.493,17,0.363,18,0.016,21,0.022,22,0.022,62,1.964,95,2.131,97,1.62,98,2.32,104,3.273,105,2.787,106,2.119,107,1.927,109,3.089,110,2.348,112,2.636,113,1.927,234,3.147,256,1.764,545,3.452,563,3.021,573,3.021,574,3.021,575,3.021,576,3.606,577,4.744,578,3.021,579,3.606,580,3.606]],["title/injectables/UsersService.html",[0,0.717,234,1.593]],["body/injectables/UsersService.html",[0,0.69,2,0.838,3,0.204,4,0.204,5,0.179,7,0.496,8,0.03,9,0.446,17,0.204,18,0.009,21,0.014,22,0.014,25,0.313,26,1.024,28,1.675,31,1.17,33,1.887,34,1.381,35,0.956,36,1.744,41,1.614,49,1.744,50,1.723,59,1.968,80,1.319,113,1.082,119,0.838,134,2.987,141,1.198,144,3.763,149,1.48,150,1.297,174,2.097,183,1.841,197,1.875,234,1.533,239,2.291,248,3.464,256,2.111,259,1.675,267,1.696,308,2.313,361,1.408,362,3.04,365,2.041,366,2.252,375,2.041,378,2.041,389,1.319,391,1.319,436,3.155,445,1.696,451,1.696,472,1.696,473,1.696,475,1.696,476,1.696,490,3.125,548,3.212,549,3.212,550,2.626,554,2.626,556,2.626,578,1.696,581,1.696,582,2.025,583,3.134,584,3.134,585,2.025,586,2.025,587,2.025,588,2.025,589,2.025,590,2.025,591,2.025,592,2.025,593,4.668,594,2.025,595,2.025,596,2.025,597,3.134,598,3.134,599,3.134,600,2.025,601,2.025,602,2.025,603,2.025,604,3.134,605,2.025,606,2.025]],["title/coverage.html",[607,3.713]],["body/coverage.html",[0,1.283,1,1.477,5,0.244,6,2.315,8,0.03,18,0.025,21,0.018,22,0.018,23,1.624,24,2.02,35,0.513,60,2.084,61,1.8,63,2.315,72,1.477,74,1.351,140,2.315,150,1.144,155,1.8,156,2.315,163,1.624,174,1.242,180,1.8,208,2.315,219,1.624,228,2.02,229,2.315,234,1.351,256,1.351,266,1.932,304,1.477,305,2.315,306,2.888,326,2.315,327,2.888,336,1.242,338,2.315,359,1.8,360,2.315,380,1.624,387,1.477,413,2.02,414,2.315,434,2.315,478,2.315,479,2.315,487,2.315,490,1.624,491,2.315,493,2.315,527,2.02,528,2.315,545,1.8,546,2.315,581,2.315,607,2.315,608,2.315,609,2.763,610,2.763,611,6.536,612,4.612,613,3.951,614,4.612,615,4.612,616,6.022,617,2.315,618,4.612,619,2.315,620,3.31,621,2.315,622,2.763,623,4.612,624,2.315,625,2.763,626,2.315,627,2.763,628,2.763]],["title/dependencies.html",[98,1.914,629,2.285]],["body/dependencies.html",[8,0.031,9,0.821,11,2.192,18,0.022,21,0.022,22,0.022,42,1.994,46,3.159,47,1.676,71,1.825,98,1.825,113,1.994,119,2.008,178,3.546,215,1.825,222,2.727,254,2.43,423,2.43,630,5.389,631,3.731,632,3.731,633,3.731,634,3.731,635,3.731,636,3.731,637,3.731,638,3.731,639,3.731,640,3.731,641,3.731,642,3.126,643,3.126,644,3.731,645,3.731,646,3.731,647,3.126,648,3.731,649,3.731,650,3.731,651,3.126,652,3.731,653,3.731,654,3.731,655,3.731,656,3.731,657,3.731,658,3.731,659,3.731]],["title/miscellaneous/functions.html",[660,1.458,661,3.28]],["body/miscellaneous/functions.html",[8,0.026,21,0.026,22,0.026,25,0.766,624,4.147,626,5.123,660,2.645,661,4.147,662,4.95]],["title/index.html",[25,0.422,663,2.728,664,2.285]],["body/index.html",[8,0.027,18,0.014,21,0.02,22,0.02,45,2.28,46,2.031,47,1.401,68,2.031,82,2.613,97,1.401,107,1.667,119,1.781,123,4.447,128,1.832,165,2.28,215,1.525,254,2.031,266,1.525,336,1.401,432,2.031,459,3.604,511,3.145,514,2.613,608,2.613,642,2.613,643,2.613,647,2.613,651,2.613,664,2.613,665,5.308,666,3.119,667,4.302,668,3.119,669,3.119,670,3.119,671,3.119,672,3.119,673,3.119,674,3.119,675,3.119,676,3.119,677,4.302,678,3.119,679,3.119,680,3.119,681,3.119,682,3.119,683,3.119,684,3.119,685,3.119,686,3.119,687,4.302,688,3.119,689,3.119,690,3.119,691,3.119,692,3.119,693,3.119,694,3.119,695,3.119,696,4.302,697,4.302,698,3.119,699,3.119,700,4.302,701,5.757,702,3.119,703,3.119,704,3.119,705,3.119,706,3.119,707,3.119,708,3.119,709,3.119,710,3.119,711,3.119,712,3.119,713,3.119,714,3.119,715,2.613,716,3.119,717,3.119,718,3.119,719,3.119,720,3.119,721,3.119,722,3.119,723,3.119,724,3.119,725,3.119,726,3.119,727,3.119,728,3.119,729,3.119,730,3.119,731,3.119,732,3.119,733,3.119,734,2.613,735,3.119,736,3.119]],["title/modules.html",[97,1.991]],["body/modules.html",[8,0.025,21,0.025,22,0.025,96,3.023,97,2.086,102,2.727,103,2.727,104,2.481,737,6.169,738,6.169,739,6.169,740,6.169]],["title/overview.html",[741,3.713]],["body/overview.html",[2,1.409,8,0.029,21,0.021,22,0.021,23,3.026,62,1.409,72,2.753,74,2.519,96,4.154,97,1.529,98,2.232,99,2.852,100,2.852,101,2.852,102,3.721,103,3.372,104,3.279,105,2.682,106,2,107,1.819,207,1.529,216,2.852,218,2.852,219,3.026,234,2.952,337,1.819,387,2.753,407,2.852,408,2.852,573,2.852,574,2.852,575,2.852,741,2.852,742,4.565,743,3.404,744,3.404,745,3.404]],["title/properties.html",[141,1.496,629,2.285]],["body/properties.html",[8,0.029,21,0.026,22,0.026,141,1.836,307,3.128,746,4.803,747,4.803,748,4.803,749,4.803,750,4.803,751,4.803,752,4.803,753,4.803]],["title/miscellaneous/typealiases.html",[660,1.458,754,3.915]],["body/miscellaneous/typealiases.html",[8,0.026,21,0.026,22,0.026,24,3.582,25,0.758,35,1.066,38,4.81,660,2.619,755,4.9,756,4.9,757,4.9]],["title/miscellaneous/variables.html",[660,1.458,758,3.28]],["body/miscellaneous/variables.html",[8,0.03,21,0.02,22,0.02,25,0.481,34,0.87,35,0.797,50,1.929,122,2.605,138,1.827,150,1.777,209,2.522,228,3.138,337,2.833,358,3.452,419,2.273,432,2.795,511,3.138,525,4.441,617,2.605,619,3.596,620,2.605,621,3.596,660,1.662,715,3.596,734,4.441,758,2.605,759,3.109,760,4.292,761,4.916,762,4.292,763,4.292,764,4.292,765,4.292,766,3.109,767,3.109,768,3.109,769,4.292,770,3.109,771,4.916,772,3.109,773,3.109,774,3.109,775,3.109,776,3.109,777,4.292,778,3.109,779,3.109,780,3.109,781,3.109,782,3.109,783,3.109,784,3.109,785,3.109,786,3.109,787,3.109,788,3.109,789,3.109,790,3.109,791,3.109,792,3.109,793,3.109,794,3.109,795,3.109,796,3.109,797,3.109,798,3.109,799,3.109,800,3.109,801,3.109,802,3.109,803,3.109]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":747,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["1.17.3",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["15m",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":743,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["2.5.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":534,"title":{},"body":{"classes/UserSeeder.html":{}}}],["4",{"_index":742,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":428,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["6.0.1",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":745,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":744,"title":{},"body":{"overview.html":{}}}],["8.9.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":23,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["additional",{"_index":720,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":755,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":665,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":394,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apibadrequestresponse()@post",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('example",{"_index":392,"title":{},"body":{"controllers/ExampleController.html":{}}}],["apitags('root",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":681,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":61,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":72,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["argon2.hash(data",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify(user.password",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["auth.controller",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.service",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_prev/auth.service",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["auth_prev/jwr",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":155,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":163,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authentication",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["authguard",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":102,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":750,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":74,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":702,"title":{},"body":{"index.html":{}}}],["average",{"_index":689,"title":{},"body":{"index.html":{}}}],["await",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('password",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["basic",{"_index":714,"title":{},"body":{"index.html":{}}}],["before",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":669,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":316,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["bootstrap",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":703,"title":{},"body":{"index.html":{}}}],["browse",{"_index":740,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":737,"title":{},"body":{"modules.html":{}}}],["burnett",{"_index":752,"title":{},"body":{"properties.html":{}}}],["check",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":18,"title":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":207,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"classes/ExampleSeeder.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSeeder.html":{},"overview.html":{}}}],["cleaner",{"_index":458,"title":{},"body":{"injectables/ExampleService.html":{}}}],["cli",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_examplemodule",{"_index":407,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_examplemodule_providers",{"_index":408,"title":{},"body":{"modules/ExampleModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":573,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":575,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":574,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["code",{"_index":704,"title":{},"body":{"index.html":{}}}],["column",{"_index":344,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({default",{"_index":348,"title":{},"body":{"entities/Example.html":{}}}],["column({nullable",{"_index":351,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["column({unique",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["common/guards/accesstoken.guard",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["common/guards/refreshtoken.guard",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["compodoc",{"_index":716,"title":{},"body":{"index.html":{}}}],["config",{"_index":143,"title":{},"body":{"injectables/AppService.html":{}}}],["config/dbconfig",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('database",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":483,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configuration",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":685,"title":{},"body":{"index.html":{}}}],["connectionsource",{"_index":619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["connectivity",{"_index":696,"title":{},"body":{"index.html":{}}}],["console.log('req.user",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(examplerepository",{"_index":435,"title":{},"body":{"injectables/ExampleService.html":{}}}],["constructor(private",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('example",{"_index":393,"title":{},"body":{"controllers/ExampleController.html":{}}}],["controller('users",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":642,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["coverage",{"_index":607,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":361,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":397,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["create(createexampledto",{"_index":367,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["create(createuserdto",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":451,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["created_at",{"_index":339,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":342,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["createexampledto",{"_index":304,"title":{"classes/CreateExampleDto.html":{}},"body":{"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":174,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":396,"title":{},"body":{"controllers/ExampleController.html":{}}}],["creation",{"_index":699,"title":{},"body":{"index.html":{}}}],["data",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["data.password",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":432,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":419,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/variables.html":{}}}],["datasource(options",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(user",{"_index":533,"title":{},"body":{"classes/UserSeeder.html":{}}}],["date",{"_index":341,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["dbconfig",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":358,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":385,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["delete('/id/:id",{"_index":376,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":708,"title":{},"body":{"index.html":{}}}],["deletes",{"_index":476,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":307,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"properties.html":{}}}],["details",{"_index":730,"title":{},"body":{"index.html":{}}}],["dev",{"_index":735,"title":{},"body":{"index.html":{}}}],["directory",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["dist/src/migrations/*.{js,ts",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":608,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driver",{"_index":722,"title":{},"body":{"index.html":{}}}],["dto/auth.dto",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":389,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":391,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":719,"title":{},"body":{"index.html":{}}}],["email",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["endpoint",{"_index":697,"title":{},"body":{"index.html":{}}}],["entities",{"_index":337,"title":{},"body":{"entities/Example.html":{},"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/**/*.ts",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/*.entity.{js,ts",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/example.entity",{"_index":411,"title":{},"body":{"modules/ExampleModule.html":{},"injectables/ExampleService.html":{}}}],["entities/user.entity",{"_index":578,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entitiesdir",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":266,"title":{"entities/Example.html":{},"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/Example.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["error",{"_index":395,"title":{},"body":{"controllers/ExampleController.html":{}}}],["errors",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["eslint",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["etc",{"_index":514,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["example",{"_index":336,"title":{"entities/Example.html":{}},"body":{"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"index.html":{}}}],["example.controller",{"_index":410,"title":{},"body":{"modules/ExampleModule.html":{}}}],["example.description",{"_index":470,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.dto",{"_index":390,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{}}}],["example.dto.ts",{"_index":306,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["example.dto.ts:12",{"_index":315,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:15",{"_index":324,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:18",{"_index":323,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:21",{"_index":320,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:24",{"_index":318,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:27",{"_index":319,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.dto.ts:30",{"_index":313,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["example.isactive",{"_index":468,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.service",{"_index":388,"title":{},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{}}}],["example.testnumber",{"_index":466,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example.teststring",{"_index":464,"title":{},"body":{"injectables/ExampleService.html":{}}}],["example/entities/example.entity",{"_index":424,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["example/example.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["examplecontroller",{"_index":359,"title":{"controllers/ExampleController.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"coverage.html":{}}}],["examplefactory",{"_index":425,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplefactory.savemany(numrecords",{"_index":433,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["examplemodule",{"_index":103,"title":{"modules/ExampleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules.html":{},"overview.html":{}}}],["examplerepository",{"_index":438,"title":{},"body":{"injectables/ExampleService.html":{}}}],["exampleseeder",{"_index":413,"title":{"classes/ExampleSeeder.html":{}},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["exampleservice",{"_index":387,"title":{"injectables/ExampleService.html":{}},"body":{"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"coverage.html":{},"overview.html":{}}}],["exist",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":577,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":423,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"dependencies.html":{}}}],["extention",{"_index":721,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["factories",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factory",{"_index":430,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager",{"_index":420,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["factorymanager.get(example",{"_index":426,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["factorymanager.get(user",{"_index":532,"title":{},"body":{"classes/UserSeeder.html":{}}}],["false",{"_index":525,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@isnotempty()@isstring",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["fields",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":457,"title":{},"body":{"injectables/ExampleService.html":{}}}],["findall",{"_index":362,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid(@param('id",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyid(id",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername(@param('username",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyusername(username",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":363,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["findonebyid(@param('id",{"_index":401,"title":{},"body":{"controllers/ExampleController.html":{}}}],["findonebyid(id",{"_index":370,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["fixme",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":707,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["forward",{"_index":676,"title":{},"body":{"index.html":{}}}],["function",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":661,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":431,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["generation",{"_index":698,"title":{},"body":{"index.html":{}}}],["get('/id/:id",{"_index":371,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["get('/username/:username",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('logout",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('protected",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/ExampleController.html":{}}}],["get('refresh",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprotected",{"_index":364,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{}}}],["getting",{"_index":663,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["go",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["hash",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["hash(this.password",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["hashdata",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata(data",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["having",{"_index":683,"title":{},"body":{"index.html":{}}}],["hello",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":647,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["host",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/questions/47792808/typeorm",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://stackoverflow.com/questions/59913475/configure",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["https://www.elvisduru.com/blog/nestjs",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=_l225zpuk0m&list=wl&index=17",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["id",{"_index":308,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["implements",{"_index":415,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["import",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["includes",{"_index":711,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["inject(configservice",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":445,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(example",{"_index":446,"title":{},"body":{"injectables/ExampleService.html":{}}}],["injectrepository(user",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":684,"title":{},"body":{"index.html":{}}}],["installation",{"_index":731,"title":{},"body":{"index.html":{}}}],["isactive",{"_index":309,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["isboolean",{"_index":317,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isc",{"_index":749,"title":{},"body":{"properties.html":{}}}],["isemail",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":213,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isnumber",{"_index":322,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["isstring",{"_index":214,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty",{"_index":210,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["isuuid",{"_index":325,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{}}}],["isuuid()@isnotempty",{"_index":314,"title":{},"body":{"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{}}}],["item",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["jest",{"_index":723,"title":{},"body":{"index.html":{}}}],["js",{"_index":717,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtauthguard",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtfromrequest",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["jwtservice",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["key",{"_index":692,"title":{},"body":{"index.html":{}}}],["know",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":748,"title":{},"body":{"properties.html":{}}}],["line",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["links",{"_index":728,"title":{},"body":{"index.html":{}}}],["literal",{"_index":757,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["located",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":715,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["login(data",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["many",{"_index":686,"title":{},"body":{"index.html":{}}}],["matching",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matt",{"_index":751,"title":{},"body":{"properties.html":{}}}],["maybe",{"_index":462,"title":{},"body":{"injectables/ExampleService.html":{}}}],["mburnett@tutanota.de",{"_index":753,"title":{},"body":{"properties.html":{}}}],["metadata",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migration",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":734,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":660,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock/express",{"_index":724,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":725,"title":{},"body":{"index.html":{}}}],["module",{"_index":95,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":729,"title":{},"body":{"index.html":{}}}],["msg",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":521,"title":{},"body":{"entities/User.html":{}}}],["nestjs",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"injectables/ExampleService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexample",{"_index":448,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newexample.teststring",{"_index":452,"title":{},"body":{"injectables/ExampleService.html":{}}}],["newuser",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.id",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.username",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["notes",{"_index":736,"title":{},"body":{"index.html":{}}}],["null",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":357,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["number",{"_index":321,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["numrecords",{"_index":427,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["object",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["objects",{"_index":727,"title":{},"body":{"index.html":{}}}],["once",{"_index":709,"title":{},"body":{"index.html":{}}}],["one",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"classes/UserSeeder.html":{}}}],["openapi",{"_index":713,"title":{},"body":{"index.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ossp",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overkill",{"_index":461,"title":{},"body":{"injectables/ExampleService.html":{}}}],["overview",{"_index":741,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":629,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":687,"title":{},"body":{"index.html":{}}}],["param",{"_index":384,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":403,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":643,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":386,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":488,"title":{},"body":{"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createexampledto",{"_index":489,"title":{},"body":{"classes/UpdateExampleDto.html":{}}}],["partialtype(createuserdto",{"_index":492,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":484,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":209,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":383,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["patch('/id/:id",{"_index":381,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["pg",{"_index":651,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["pgadmin",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["points",{"_index":695,"title":{},"body":{"index.html":{}}}],["port",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["post('signup",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":511,"title":{},"body":{"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["primarygeneratedcolumn",{"_index":355,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":356,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid",{"_index":346,"title":{},"body":{"entities/Example.html":{}}}],["primarygeneratedcolumn('uuid')@isuuid()@isnotempty",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["probably",{"_index":460,"title":{},"body":{"injectables/ExampleService.html":{}}}],["process.env.db_database",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_database_name",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_passord",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["progress",{"_index":672,"title":{},"body":{"index.html":{}}}],["project",{"_index":690,"title":{},"body":{"index.html":{}}}],["promise",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":141,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["protected",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExampleService.html":{}}}],["provide",{"_index":674,"title":{},"body":{"index.html":{}}}],["provided",{"_index":705,"title":{},"body":{"index.html":{}}}],["providers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["purpose",{"_index":673,"title":{},"body":{"index.html":{}}}],["query",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["quickly",{"_index":677,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/ExampleController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{}}}],["refreshtokenguard",{"_index":180,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@req",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(req",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(userid",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":219,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["remove",{"_index":365,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":405,"title":{},"body":{"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":375,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repo",{"_index":667,"title":{},"body":{"index.html":{}}}],["repository",{"_index":436,"title":{},"body":{"injectables/ExampleService.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{}}}],["repository.save(testuser",{"_index":543,"title":{},"body":{"classes/UserSeeder.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":485,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['refreshtoken",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user['sub",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":447,"title":{},"body":{"injectables/ExampleService.html":{}}}],["restful",{"_index":680,"title":{},"body":{"index.html":{}}}],["result",{"_index":726,"title":{},"body":{"index.html":{}}}],["results",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":417,"title":{},"body":{"classes/ExampleSeeder.html":{},"entities/User.html":{},"classes/UserSeeder.html":{}}}],["run(datasource",{"_index":418,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["rxjs",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["save",{"_index":429,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["scaffolded",{"_index":668,"title":{},"body":{"index.html":{}}}],["secret",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["seedconfig",{"_index":621,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["seeder",{"_index":416,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seederfactorymanager",{"_index":421,"title":{},"body":{"classes/ExampleSeeder.html":{},"classes/UserSeeder.html":{}}}],["seeding",{"_index":700,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["setup",{"_index":732,"title":{},"body":{"index.html":{}}}],["showuser",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["signup",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["solution",{"_index":693,"title":{},"body":{"index.html":{}}}],["somehow",{"_index":463,"title":{},"body":{"injectables/ExampleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"modules/ExampleModule.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateExampleDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/**/**.entity{.ts,.js",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../accesstoken.strategy.ts",{"_index":756,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cliconfig.ts",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../seedconfig.ts",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":140,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:15",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":145,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":208,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":212,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:9",{"_index":211,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:12",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/accesstoken.strategy.ts:20",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts",{"_index":479,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:12",{"_index":480,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/auth/strategies/refreshtoken.strategy.ts:21",{"_index":482,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["src/common/guards/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/common/guards/refreshtoken.guard.ts",{"_index":478,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/config/cliconfig.ts",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/seedconfig.ts",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db/factories/**/*{.ts,.js",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/migrations/**/*{.ts,.js",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/**/*{.ts,.js",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/db/seeds/example.seeder.ts",{"_index":414,"title":{},"body":{"classes/ExampleSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/example.seeder.ts:6",{"_index":422,"title":{},"body":{"classes/ExampleSeeder.html":{}}}],["src/db/seeds/user.seeder.ts",{"_index":528,"title":{},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["src/db/seeds/user.seeder.ts:6",{"_index":529,"title":{},"body":{"classes/UserSeeder.html":{}}}],["src/entity",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/entity/**/*.ts",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/example",{"_index":706,"title":{},"body":{"index.html":{}}}],["src/example/dto/create",{"_index":305,"title":{},"body":{"classes/CreateExampleDto.html":{},"coverage.html":{}}}],["src/example/dto/update",{"_index":487,"title":{},"body":{"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts",{"_index":338,"title":{},"body":{"entities/Example.html":{},"coverage.html":{}}}],["src/example/entities/example.entity.ts:14",{"_index":347,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:17",{"_index":352,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:20",{"_index":350,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:23",{"_index":349,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:26",{"_index":345,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:29",{"_index":343,"title":{},"body":{"entities/Example.html":{}}}],["src/example/entities/example.entity.ts:32",{"_index":354,"title":{},"body":{"entities/Example.html":{}}}],["src/example/example.controller.ts",{"_index":360,"title":{},"body":{"controllers/ExampleController.html":{},"coverage.html":{}}}],["src/example/example.controller.ts:26",{"_index":368,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:32",{"_index":374,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:37",{"_index":369,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:43",{"_index":372,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:48",{"_index":382,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.controller.ts:56",{"_index":377,"title":{},"body":{"controllers/ExampleController.html":{}}}],["src/example/example.module.ts",{"_index":409,"title":{},"body":{"modules/ExampleModule.html":{}}}],["src/example/example.service.ts",{"_index":434,"title":{},"body":{"injectables/ExampleService.html":{},"coverage.html":{}}}],["src/example/example.service.ts:12",{"_index":437,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:20",{"_index":442,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:24",{"_index":439,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:33",{"_index":440,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:37",{"_index":441,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:41",{"_index":444,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/example/example.service.ts:56",{"_index":443,"title":{},"body":{"injectables/ExampleService.html":{}}}],["src/main.ts",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migration",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/migration/**/*.ts",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*.ts",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/subscriber/**/*{.ts,.js",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":491,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":493,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:45",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":576,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["stand",{"_index":678,"title":{},"body":{"index.html":{}}}],["started",{"_index":664,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":694,"title":{},"body":{"index.html":{}}}],["statements",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["straight",{"_index":675,"title":{},"body":{"index.html":{}}}],["strategies/accesstoken.strategy",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refreshtoken.strategy",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"index.html":{}}}],["string",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["subscribers",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribersdir",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":738,"title":{},"body":{"modules.html":{}}}],["supporting",{"_index":670,"title":{},"body":{"index.html":{}}}],["svg",{"_index":739,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":712,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":666,"title":{},"body":{"index.html":{}}}],["test",{"_index":535,"title":{},"body":{"classes/UserSeeder.html":{}}}],["test@one.com",{"_index":542,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testboolean",{"_index":310,"title":{},"body":{"classes/CreateExampleDto.html":{}}}],["testing",{"_index":701,"title":{},"body":{"index.html":{}}}],["testnumber",{"_index":311,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testone",{"_index":539,"title":{},"body":{"classes/UserSeeder.html":{}}}],["teststring",{"_index":312,"title":{},"body":{"classes/CreateExampleDto.html":{},"entities/Example.html":{}}}],["testuser",{"_index":536,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.email",{"_index":541,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.name",{"_index":537,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.password",{"_index":540,"title":{},"body":{"classes/UserSeeder.html":{}}}],["testuser.username",{"_index":538,"title":{},"body":{"classes/UserSeeder.html":{}}}],["theuser",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(data",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.body",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.logout(req.user['sub",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.examplerepository.create(createexampledto",{"_index":449,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.find",{"_index":454,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.findonebyid(id",{"_index":455,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.remove(todelete",{"_index":477,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(example",{"_index":474,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.examplerepository.save(newexample",{"_index":453,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.exampleservice.create(createexampledto",{"_index":398,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findall",{"_index":400,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.findonebyid(id",{"_index":402,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.getprotected",{"_index":399,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.remove(id",{"_index":406,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.exampleservice.update(id",{"_index":404,"title":{},"body":{"controllers/ExampleController.html":{}}}],["this.findbyid(id",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(id",{"_index":456,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.gettokens(newuser.id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(refreshtoken",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":149,"title":{},"body":{"injectables/AppService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log",{"_index":450,"title":{},"body":{"injectables/ExampleService.html":{}}}],["this.logger.log('gethello",{"_index":151,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log(`exampleservice",{"_index":472,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`userservice",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.password",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["this.updaterefreshtoken(newuser.id",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(todelete",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userid",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(data.username",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(username",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(userid",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["todelete",{"_index":475,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/ExampleService.html":{},"entities/User.html":{}}}],["token",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["triggered",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["trim",{"_index":486,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["turn",{"_index":691,"title":{},"body":{"index.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"controllers/ExampleController.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":754,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/Example.html":{},"classes/ExampleSeeder.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([example",{"_index":412,"title":{},"body":{"modules/ExampleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":580,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["underway",{"_index":710,"title":{},"body":{"index.html":{}}}],["unique",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":718,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":679,"title":{},"body":{"index.html":{}}}],["update",{"_index":366,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":378,"title":{},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":340,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":353,"title":{},"body":{"entities/Example.html":{},"entities/User.html":{}}}],["updateexampledto",{"_index":380,"title":{"classes/UpdateExampleDto.html":{}},"body":{"controllers/ExampleController.html":{},"injectables/ExampleService.html":{},"classes/UpdateExampleDto.html":{},"coverage.html":{}}}],["updateexampledto.description",{"_index":471,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.isactive",{"_index":469,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.testnumber",{"_index":467,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updateexampledto.teststring",{"_index":465,"title":{},"body":{"injectables/ExampleService.html":{}}}],["updaterefreshtoken",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":473,"title":{},"body":{"injectables/ExampleService.html":{},"injectables/UsersService.html":{}}}],["updatetestdto",{"_index":379,"title":{},"body":{"controllers/ExampleController.html":{}}}],["updateuserdto",{"_index":490,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":733,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":688,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExampleController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('/id/:id",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('logout",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@get('protected",{"_index":373,"title":{},"body":{"controllers/ExampleController.html":{}}}],["useguards(accesstokenguard)@patch('/id/:id",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(refreshtokenguard",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@get('refresh",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":256,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserSeeder.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.refreshtoken",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfactory",{"_index":531,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userfactory.savemany(numrecords",{"_index":544,"title":{},"body":{"classes/UserSeeder.html":{}}}],["userid",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["username",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":579,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/user.entity",{"_index":530,"title":{},"body":{"classes/UserSeeder.html":{}}}],["users/users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":545,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userseeder",{"_index":527,"title":{"classes/UserSeeder.html":{}},"body":{"classes/UserSeeder.html":{},"coverage.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":234,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["uuid_v4",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["validate",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(req",{"_index":481,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validator",{"_index":215,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExampleDto.html":{},"classes/CreateUserDto.html":{},"entities/Example.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":758,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":746,"title":{},"body":{"properties.html":{}}}],["void",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["way",{"_index":459,"title":{},"body":{"injectables/ExampleService.html":{},"index.html":{}}}],["without",{"_index":682,"title":{},"body":{"index.html":{}}}],["work",{"_index":671,"title":{},"body":{"index.html":{}}}],["world",{"_index":154,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExampleModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/accessToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class AccessTokenGuard extends AuthGuard('jwt') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/accessToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/accessToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/accessToken.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\ntype JwtPayload = {\n  sub: string\n  username: string\n}\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET')\n    })\n  }\n\n  validate(payload: JwtPayload) {\n    return payload\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        // import { Controller, Get, Post, Request, UseGuards } from '@nestjs/common'\nimport { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AppService } from './app.service'\n// import { AuthService } from './auth_prev/auth.service'\n// import { JwtAuthGuard } from './auth_prev/jwr-auth.guard'\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  // constructor(private readonly appService: AppService) { }\n  // constructor(private readonly authService: AuthService, private readonly appService: AppService) { }\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly appService: AppService) { }\n\n  //  auth implementation https://www.youtube.com/watch?v=_L225zpUK0M&list=WL&index=17\n\n  // @Post('login')\n  // login(@Request() req): any {\n  //   return this.authService.login(req.body)\n  // }\n\n  // @UseGuards(JwtAuthGuard)\n  // @Get('protected')\n  // showUser(): object {\n  //   return { msg: 'protected' }\n  // }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExampleModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\n\nimport { ExampleModule } from './example/example.module'\n\nimport { UsersModule } from './users/users.module'\nimport { AuthModule } from './auth/auth.module'\n\n// https://stackoverflow.com/questions/59913475/configure-typeorm-with-one-configuration-for-cli-and-nestjs-application\nimport dbConfig from './config/dbConfig'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  imports: [\n    ExampleModule,\n    UsersModule,\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('database')\n      })\n    }),\n    ConfigModule.forRoot({ isGlobal: true, load: [dbConfig] }),\n    UsersModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class AppService {\n  @Inject(ConfigService)\n  public config: ConfigService\n\n  logger: Logger\n\n  constructor() {\n    this.logger = new Logger()\n  }\n\n  getHello(): string {\n    this.logger.log('getHello is triggered!')\n    return 'Hello World!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \nrefreshTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Request } from 'express'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { RefreshTokenGuard } from '../common/guards/refreshToken.guard'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthService } from './auth.service'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private authService: AuthService) { }\n\n  @Post('signup')\n  signup(@Body() createUserDto: CreateUserDto) {\n    return this.authService.signUp(createUserDto)\n  }\n\n  @Post('login')\n  login(@Body() data: AuthDto) {\n    return this.authService.login(data)\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Get('refresh')\n  refreshTokens(@Req() req: Request) {\n    // console.log('req.user: ', req.user)\n\n    const userId = req.user['sub']\n    const refreshToken = req.user['refreshToken']\n    return this.authService.refreshTokens(userId, refreshToken)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('logout')\n  logout(@Req() req: Request) {\n    this.authService.logout(req.user['sub'])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator'\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\n\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { AccessTokenStrategy } from './strategies/accessToken.strategy'\nimport { RefreshTokenStrategy } from './strategies/refreshToken.strategy'\n\nimport { UsersModule } from '../users/users.module'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n\n@Module({\n  // TODO: JwtModule.register options?\n  imports: [UsersModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, AccessTokenStrategy, RefreshTokenStrategy]\n})\n// eslint-disable-next-line prettier/prettier\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                hashData\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashData\n                        \n                    \n                \n            \n            \n                \nhashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable\n} from '@nestjs/common'\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { UsersService } from '../users/users.service'\nimport * as argon2 from 'argon2'\nimport { JwtService } from '@nestjs/jwt'\nimport { ConfigService } from '@nestjs/config'\nimport { AuthDto } from './dto/auth.dto'\n\n// https://www.elvisduru.com/blog/nestjs-jwt-authentication-refresh-token\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) { }\n  async signUp(createUserDto: CreateUserDto): Promise {\n    // Check if user exists\n    const userExists = await this.usersService.findByUsername(\n      createUserDto.username\n    )\n\n    if (userExists) {\n      throw new BadRequestException('User already exists')\n    }\n\n    // Hash password in the user entity\n    const newUser = await this.usersService.create(createUserDto)\n\n    const tokens = await this.getTokens(newUser.id, newUser.username)\n    await this.updateRefreshToken(newUser.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async login(data: AuthDto) {\n    // Check if user exists\n    const user = await this.usersService.findByUsername(data.username)\n    if (!user) throw new BadRequestException('User does not exist')\n\n    const passwordMatches = await argon2.verify(user.password, data.password)\n    if (!passwordMatches) throw new BadRequestException('Password is incorrect')\n\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n    return tokens\n  }\n\n  async logout(userId: string) {\n    return this.usersService.update(userId, { refreshToken: null })\n  }\n\n  hashData(data: string) {\n    return argon2.hash(data)\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshToken = await this.hashData(refreshToken)\n    await this.usersService.update(userId, {\n      refreshToken: hashedRefreshToken\n    })\n  }\n\n  async getTokens(userId: string, username: string) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_SECRET'),\n          expiresIn: '15m'\n        }\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          username\n        },\n        {\n          secret: this.configService.get('JWT_REFRESH_SECRET'),\n          expiresIn: '7d'\n        }\n      )\n    ])\n\n    return {\n      accessToken,\n      refreshToken\n    }\n  }\n\n  async refreshTokens(userId: string, refreshToken: string) {\n    const user = await this.usersService.findById(userId)\n    if (!user || !user.refreshToken)\n      throw new ForbiddenException('Access Denied')\n\n    const refreshTokenMatches = await argon2.verify(\n      user.refreshToken,\n      refreshToken\n    )\n\n    if (!refreshTokenMatches) throw new ForbiddenException('Access Denied')\n    const tokens = await this.getTokens(user.id, user.username)\n    await this.updateRefreshToken(user.id, tokens.refreshToken)\n\n    return tokens\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExampleDto.html":{"url":"classes/CreateExampleDto.html","title":"class - CreateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/create-example.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isActive\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                testBoolean\n                            \n                            \n                                    Optional\n                                testNumber\n                            \n                            \n                                    Optional\n                                testString\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/dto/create-example.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsUUID\n} from 'class-validator'\n\nexport class CreateExampleDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  testString?: string\n\n  @IsNumber()\n  testNumber?: number\n\n  @IsBoolean()\n  testBoolean?: boolean\n\n  @IsBoolean()\n  isActive?: boolean\n\n  @IsString()\n  name?: string\n\n  @IsString()\n  description?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\nexport class CreateUserDto {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @IsString()\n  @IsNotEmpty()\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  username: string\n\n  @IsEmail()\n  email: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n\n  @IsString()\n  refreshToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Example.html":{"url":"entities/Example.html","title":"entity - Example","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Example\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/entities/example.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                testNumber\n                            \n                            \n                                testString\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/example/entities/example.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsUUID } from 'class-validator'\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class Example {\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  id: string\n\n  @Column({ nullable: true })\n  testString: string\n\n  @Column()\n  testNumber: number\n\n  @Column({ default: true })\n  isActive: boolean\n\n  @Column()\n  description: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExampleController.html":{"url":"controllers/ExampleController.html","title":"controller - ExampleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExampleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                example\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('protected')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTestDto: UpdateExampleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/example/example.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTestDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseUUIDPipe,\n  UseGuards\n} from '@nestjs/common'\nimport { ExampleService } from './example.service'\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\n\n@ApiTags('example')\n@Controller('example')\nexport class ExampleController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly exampleService: ExampleService) { }\n\n  @Post()\n  // @ApiBadRequestResponse({ description: 'Error creating new example.' })\n  create(@Body() createExampleDto: CreateExampleDto) {\n    return this.exampleService.create(createExampleDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('protected')\n  getProtected(): string {\n    return this.exampleService.getProtected()\n  }\n\n  @Get()\n  findAll() {\n    return this.exampleService.findAll()\n  }\n\n  @Get('/id/:id')\n  // @ApiBadRequestResponse()\n  findOneById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.findOneById(id)\n  }\n\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateTestDto: UpdateExampleDto\n  ) {\n    return this.exampleService.update(id, updateTestDto)\n  }\n\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.exampleService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExampleModule.html":{"url":"modules/ExampleModule.html","title":"module - ExampleModule","body":"\n                   \n\n\n\n\n    Modules\n    ExampleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\n\nExampleService\n\nExampleService\n\n\n\nExampleModule\n\nExampleModule\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/example/example.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExampleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExampleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { ExampleService } from './example.service'\nimport { ExampleController } from './example.controller'\n\nimport { Example } from './entities/example.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Example])],\n  controllers: [ExampleController],\n  providers: [ExampleService]\n})\nexport class ExampleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExampleSeeder.html":{"url":"classes/ExampleSeeder.html","title":"class - ExampleSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExampleSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/example.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/example.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { Example } from '../../example/entities/example.entity'\n\nexport default class ExampleSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const exampleFactory = await factoryManager.get(Example)\n    const numRecords = 5\n\n    // save numRecords factory generated entities, to the database\n    await exampleFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExampleService.html":{"url":"injectables/ExampleService.html","title":"injectable - ExampleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExampleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/example.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOneById\n                            \n                            \n                                getProtected\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exampleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/example/example.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exampleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createExampleDto: CreateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExampleDto\n                                    \n                                                CreateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProtected\n                        \n                    \n                \n            \n            \n                \ngetProtected()\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateExampleDto: UpdateExampleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/example/example.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExampleDto\n                                    \n                                                UpdateExampleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/example/example.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateExampleDto } from './dto/create-example.dto'\nimport { UpdateExampleDto } from './dto/update-example.dto'\n\nimport { Example } from './entities/example.entity'\n\n@Injectable()\nexport class ExampleService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(Example) private exampleRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  getProtected(): string {\n    return 'This is a protected resource'\n  }\n\n  create(createExampleDto: CreateExampleDto) {\n    const newExample = this.exampleRepository.create(createExampleDto)\n\n    this.logger.log(\n      `ExampleService created a new Example: ${newExample.testString}`\n    )\n    return this.exampleRepository.save(newExample)\n  }\n\n  findAll() {\n    return this.exampleRepository.find()\n  }\n\n  findOneById(id: string) {\n    return this.exampleRepository.findOneById(id)\n  }\n\n  async update(id: string, updateExampleDto: UpdateExampleDto) {\n    const example = await this.findOneById(id)\n\n    // TODO: find a cleaner way to do this. This is probably overkill\n    //    maybe ? or ... somehow\n    example.testString = updateExampleDto.testString\n    example.testNumber = updateExampleDto.testNumber\n    example.isActive = updateExampleDto.isActive\n    example.description = updateExampleDto.description\n\n    this.logger.log(`ExampleService updates an Example: ${id}`)\n\n    return this.exampleRepository.save(example)\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findOneById(id)\n\n    this.logger.log(`ExampleService deletes an Example: ${id}`)\n\n    return this.exampleRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/refreshToken.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\n// eslint-disable-next-line prettier/prettier\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refreshToken.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refreshToken.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refreshToken.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { Request } from 'express'\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true\n    })\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim()\n    return { ...payload, refreshToken }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExampleDto.html":{"url":"classes/UpdateExampleDto.html","title":"class - UpdateExampleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExampleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/example/dto/update-example.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateExampleDto } from './create-example.dto'\n\nexport class UpdateExampleDto extends PartialType(CreateExampleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateUserDto } from './create-user.dto'\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  BeforeInsert,\n  BeforeUpdate\n} from 'typeorm'\n\nimport { hash } from 'argon2'\nimport { IsNotEmpty, IsString, IsUUID } from 'class-validator'\n\n//  if there are errors about uuid_v4, go into Postgres cmd line / pgAdmin / etc. and run\n//    create extension \"uuid-ossp\";\n//  like a query\n@Entity()\nexport class User {\n  // hash the password before insert / update\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    // TODO: this needs a salt\n    this.password = await hash(this.password)\n  }\n\n  @PrimaryGeneratedColumn('uuid')\n  @IsUUID()\n  @IsNotEmpty()\n  id: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  name: string\n\n  @Column({ unique: true, nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  username: string\n\n  @Column({ nullable: false })\n  @IsNotEmpty()\n  @IsString()\n  password: string\n\n  @Column({ unique: true, nullable: true })\n  @IsString()\n  email: string\n\n  @Column({ nullable: true })\n  refreshToken: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSeeder.html":{"url":"classes/UserSeeder.html","title":"class - UserSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/seeds/user.seeder.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n            \n                \n                    Defined in src/db/seeds/user.seeder.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    factoryManager\n                                    \n                                            SeederFactoryManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension'\nimport { DataSource } from 'typeorm'\nimport { User } from '../../users/entities/user.entity'\n\nexport default class UserSeeder implements Seeder {\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    const userFactory = await factoryManager.get(User)\n    const repository = dataSource.getRepository(User)\n\n    const numRecords = 3\n\n    //  create test user\n    const testUser = new User()\n\n    testUser.name = 'Test One'\n    testUser.username = 'testOne'\n    testUser.password = 'testOne'\n    testUser.email = 'test@one.com'\n\n    await repository.save(testUser)\n\n    // save numRecords factory generated entities, to the database\n    await userFactory.saveMany(numRecords)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findByUsername\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/username/:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('/id/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ParseUUIDPipe\n} from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { AccessTokenGuard } from '../common/guards/accessToken.guard'\nimport { ApiBadRequestResponse, ApiTags } from '@nestjs/swagger'\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  // eslint-disable-next-line prettier/prettier\n  constructor(private readonly usersService: UsersService) { }\n\n  @ApiBadRequestResponse()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto)\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll()\n  }\n\n  @Get('/id/:id')\n  findById(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.findById(id)\n  }\n\n  @Get('/username/:username')\n  findByUsername(@Param('username') username: string) {\n    return this.usersService.findByUsername(username)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch('/id/:id')\n  update(\n    @Param('id', new ParseUUIDPipe()) id: string,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.usersService.update(id, updateUserDto)\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Delete('/id/:id')\n  remove(@Param('id', new ParseUUIDPipe()) id: string) {\n    return this.usersService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { User } from './entities/user.entity'\nimport { UsersService } from './users.service'\nimport { UsersController } from './users.controller'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\n// eslint-disable-next-line prettier/prettier\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\n\nimport { User } from './entities/user.entity'\n\n@Injectable()\nexport class UsersService {\n  logger: Logger\n\n  constructor(\n    @InjectRepository(User) private userRepository: Repository\n  ) {\n    this.logger = new Logger()\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = this.userRepository.create(createUserDto)\n\n    this.logger.log(`UserService created new user: ${newUser.id}`)\n    return this.userRepository.save(newUser)\n  }\n\n  async findAll(): Promise {\n    this.logger.log(`UserService findAll`)\n    return this.userRepository.find()\n  }\n\n  async findById(id: string): Promise {\n    this.logger.log(`UserService findById: ${id}`)\n    return this.userRepository.findOne({ where: { id } })\n  }\n\n  async findByUsername(username: string): Promise {\n    this.logger.log(`UserService findByUsername: ${username}`)\n    return this.userRepository.findOne({ where: { username } })\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const theUser = await this.findById(id)\n\n    this.logger.log(`UserService updates User: ${id}`)\n\n    // https://stackoverflow.com/questions/47792808/typeorm-update-item-and-return-it\n    return this.userRepository.save({\n      ...theUser, // existing fields\n      ...updateUserDto // updated fields\n    })\n  }\n\n  async remove(id: string) {\n    const toDelete = await this.findById(id)\n\n    this.logger.log(`ExampleService deletes a User: ${id}`)\n\n    return this.userRepository.remove(toDelete)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refreshToken.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/refreshToken.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cliConfig.ts\n            \n            variable\n            connectionSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/seedConfig.ts\n            \n            variable\n            seedConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/seeds/example.seeder.ts\n            \n            class\n            ExampleSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/db/seeds/user.seeder.ts\n            \n            class\n            UserSeeder\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/example/dto/create-example.dto.ts\n            \n            class\n            CreateExampleDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/example/dto/update-example.dto.ts\n            \n            class\n            UpdateExampleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/entities/example.entity.ts\n            \n            entity\n            Example\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/example/example.controller.ts\n            \n            controller\n            ExampleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/example/example.service.ts\n            \n            injectable\n            ExampleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            argon2 : ^0.30.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.12\n        \n            typeorm-extension : ^2.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS API Template\n\n\n\nThis repo is a scaffolded / boilerplate implementation of NestJS and supporting modules.\nIt is a work-in-progress.\nThe purpose of this repo is to provide a straight-forward way to quickly stand up a RESTful API NestJS app, without having to install / configure the many packages that are useful for an average project.\nThis is not a turn-key API solution, but rather just a way to get started, quickly.\nStarting points for database connectivity, API endpoint generation, entity creation, data seeding, testing, authentication, etc. are available 'out-of-the-box'.\nExample code is provided in the src/example folder, which can be deleted once you are underway.\nIncludes\n\nNestJS\nSwagger / OpenAPI\nBasic logging\nCompodoc\n\n\nTypeORM\nPassport JS\nJWT Strategy\n\n\nPostgres connectivity\nTesting\nUnit testing\nE2E / endpoint testing\n\n\nAdditional packages\nargon2\ntypeorm-extention\nclass-validator\ncookie-parser\nhelmet\npg (postgres driver)\n@jest-mock/express (for testing. mocks request and result objects)\n\n\n\nLinks to more details\n\nInstallation and setup\nHow to use\nMigrations / Seeding\nTesting\nDocumentation\nDev notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExampleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ExampleModule\n\n\n\ncluster_ExampleModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExampleModule\n\nExampleModule\n\nAppModule -->\n\nExampleModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nExampleService\n\nExampleService\n\nExampleModule -->\n\nExampleService->ExampleModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : ISC\n        \n            Author : Matt Burnett mburnett@tutanota.de\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../accessToken.strategy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/strategies/accessToken.strategy.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            connectionSource   (src/.../cliConfig.ts)\n                        \n                        \n                            options   (src/.../seedConfig.ts)\n                        \n                        \n                            seedConfig   (src/.../seedConfig.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cliConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        connectionSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource({\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_DATABASE,\n  synchronize: false,\n  logging: true,\n  migrationsRun: false,\n  // entities: [__dirname + '/**/entities/*.entity.{js,ts}'],\n  entities: [__dirname + '../**/entities/**/*.ts'],\n  migrations: [__dirname + '/dist/src/migrations/*.{js,ts}'],\n  // entities: ['src/entity/**/*.ts'],\n  // migrations: ['src/migration/**/*.ts'],\n  subscribers: ['src/subscriber/**/*.ts']\n  //  FIXME: this should know where the migration directory is located\n  // cli: {\n  //   entitiesDir: 'src/entity',\n  //   migrationsDir: 'src/migration',\n  //   subscribersDir: 'src/subscriber'\n  // }\n})\n                    \n                \n\n\n        \n    \n\n    src/config/seedConfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  migrationsTableName: 'migrations',\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: +process.env.DB_PORT,\n  username: process.env.DB_USER_NAME,\n  password: process.env.DB_PASSORD,\n  database: process.env.DB_DATABASE_NAME,\n  logging: false,\n  synchronize: process.env.NODE_ENV !== 'production' || false,\n  // name: 'default',\n  entities: ['src/**/**.entity{.ts,.js}'],\n  migrations: ['src/db/migrations/**/*{.ts,.js}'],\n  subscribers: ['src/subscriber/**/*{.ts,.js}'],\n  seeds: ['src/db/seeds/**/*{.ts,.js}'],\n  factories: ['src/db/factories/**/*{.ts,.js}']\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
